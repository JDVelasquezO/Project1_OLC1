
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftMASMENOSleftPORDIVIDIDOleftELEVADOrightUMENOSCADENA CHAR CONCAT DECIMAL DIVIDIDO ELEVADO ELSE ENTERO FALSE ID IF IGUAL IGUALQUE LLAVDER LLAVIZQ MAIN MAS MAYQUE MENOS MENQUE MIENTRAS NIGUALQUE PARDER PARIZQ POR PRINT PTCOMA TRUE VARinit       : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion\n                         | emptyinstruccion      : func_main\n                        | imprimir_instr\n                        | definicion_instr\n                        | asignacion_instr\n                        | def_asig_instr\n                        | mientras_instr\n                        | if_instr\n                        | if_else_instrdef_funcs_vars   : definicion_instr\n                        | asignacion_instr\n                        | emptyfunc_main  : MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDERimprimir_instr     : PRINT PARIZQ print_expresion_general PARDER def_instr_primaprint_expresion_general  :  expresion_numerica\n                                | expresion_cadena\n                                | expresion_id\n                                | expresion_boolean\n                                | expresion_charexpresion_id   : IDexpresion_boolean  : TRUE\n                          | FALSEdefinicion_instr   : VAR ID def_instr_primadef_instr_prima   : PTCOMA\n                        | emptyempty :asignacion_instr   : ID IGUAL asign_expresion_general def_instr_primaasign_expresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | expresion_id\n                            | expresion_boolean\n                            | expresion_chardef_asig_instr     : VAR ID IGUAL asign_def_expresion_general def_instr_primaasign_def_expresion_general  :  expresion_numerica\n                                    | expresion_cadena\n                                    | expresion_id\n                                    | expresion_boolean\n                                    | expresion_charmientras_instr     : MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion_numerica MAS expresion_numerica\n                        | expresion_numerica MENOS expresion_numerica\n                        | expresion_numerica POR expresion_numerica\n                        | expresion_numerica DIVIDIDO expresion_numerica\n                        | expresion_numerica ELEVADO expresion_numerica\n                        | expresion_id MAS expresion_idexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n                        | DECIMALexpresion_numerica   : IDexpresion_char   : CHARexpresion_cadena     : expresion_cadena MAS expresion_cadena\n                            | expresion_numerica MAS expresion_cadena\n                            | expresion_cadena MAS expresion_numericaexpresion_cadena     : CADENAexpresion_cadena     : expresion_numericaexpresion_logica : expresion_numerica MAYQUE expresion_numerica\n                        | expresion_numerica MENQUE expresion_numerica\n                        | expresion_numerica IGUALQUE expresion_numerica\n                        | expresion_numerica NIGUALQUE expresion_numerica'
    
_lr_action_items = {'MAIN':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,56,58,66,67,68,69,70,71,72,73,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,100,101,102,104,105,106,107,108,110,111,112,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-53,-54,-23,-60,-24,-25,-56,-26,-27,-28,-29,-31,-32,-33,-34,-35,13,-29,-51,-29,-37,-38,-39,-40,-41,-30,13,-52,-17,-45,-58,-46,-47,-48,-49,-57,-59,-50,-23,-36,13,-45,13,-16,13,13,-45,-42,-43,13,13,-44,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,56,58,66,67,68,69,70,71,72,73,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,100,101,102,104,105,106,107,108,110,111,112,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-53,-54,-23,-60,-24,-25,-56,-26,-27,-28,-29,-31,-32,-33,-34,-35,14,-29,-51,-29,-37,-38,-39,-40,-41,-30,14,-52,-17,-45,-58,-46,-47,-48,-49,-57,-59,-50,-23,-36,14,-45,14,-16,14,14,-45,-42,-43,14,14,-44,]),'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,56,58,66,67,68,69,70,71,72,73,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,100,101,102,104,105,106,107,108,110,111,112,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-53,-54,-23,-60,-24,-25,-56,-26,-27,-28,-29,-31,-32,-33,-34,-35,15,-29,-51,-29,-37,-38,-39,-40,-41,-30,15,-52,-17,-45,-58,-46,-47,-48,-49,-57,-59,-50,-23,-36,15,-45,15,-16,15,15,-45,-42,-43,15,15,-44,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,15,19,21,22,23,24,25,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,100,101,102,103,104,105,106,107,108,110,111,112,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,22,-2,37,-29,37,37,37,37,37,-53,-54,-23,-60,-24,-25,-56,-26,37,-27,-28,-29,-31,-32,-33,-34,-35,16,-29,37,37,37,37,37,37,93,-51,-29,-37,-38,-39,-40,-41,-30,37,37,37,37,37,16,-52,-17,-45,-58,-46,-47,-48,-49,-57,-59,-50,-23,-36,16,-45,16,-16,37,16,16,-45,-42,-43,16,16,-44,]),'MIENTRAS':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,56,58,66,67,68,69,70,71,72,73,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,100,101,102,104,105,106,107,108,110,111,112,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-53,-54,-23,-60,-24,-25,-56,-26,-27,-28,-29,-31,-32,-33,-34,-35,17,-29,-51,-29,-37,-38,-39,-40,-41,-30,17,-52,-17,-45,-58,-46,-47,-48,-49,-57,-59,-50,-23,-36,17,-45,17,-16,17,17,-45,-42,-43,17,17,-44,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,56,58,66,67,68,69,70,71,72,73,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,100,101,102,104,105,106,107,108,110,111,112,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-53,-54,-23,-60,-24,-25,-56,-26,-27,-28,-29,-31,-32,-33,-34,-35,18,-29,-51,-29,-37,-38,-39,-40,-41,-30,18,-52,-17,-45,-58,-46,-47,-48,-49,-57,-59,-50,-23,-36,18,-45,18,-16,18,18,-45,-42,-43,18,18,-44,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,58,66,67,68,69,70,71,72,73,82,83,84,85,86,87,88,89,90,91,92,93,94,100,102,106,107,108,112,],[-29,0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-53,-54,-23,-60,-24,-25,-56,-26,-27,-28,-29,-31,-32,-33,-34,-35,-29,-51,-29,-37,-38,-39,-40,-41,-30,-52,-17,-45,-58,-46,-47,-48,-49,-57,-59,-50,-23,-36,-45,-16,-45,-42,-43,-44,]),'LLAVDER':([3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,56,58,66,67,68,69,70,71,72,73,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,100,101,102,104,105,106,107,108,110,111,112,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-53,-54,-23,-60,-24,-25,-56,-26,-27,-28,-29,-31,-32,-33,-34,-35,-29,-29,-51,-29,-37,-38,-39,-40,-41,-30,102,-52,-17,-45,-58,-46,-47,-48,-49,-57,-59,-50,-23,-36,-29,-45,-29,-16,107,108,-45,-42,-43,-29,112,-44,]),'PARIZQ':([13,14,17,18,21,23,24,25,27,34,43,59,60,61,62,63,64,75,76,77,78,79,103,],[20,21,24,25,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'IGUAL':([16,22,],[23,43,]),'PARDER':([20,28,29,30,31,32,33,35,36,37,38,39,40,41,52,55,57,66,82,84,85,86,87,88,89,90,91,92,93,96,97,98,99,100,106,],[26,58,-18,-19,-20,-21,-22,-53,-54,-23,-60,-24,-25,-56,74,80,82,-51,-52,-45,-58,-46,-47,-48,-49,-57,-59,-50,-23,-62,-63,-64,-65,-45,-45,]),'MENOS':([21,23,24,25,27,29,34,35,36,37,43,47,53,57,59,60,61,62,63,64,66,68,75,76,77,78,79,82,84,86,87,88,89,91,92,93,96,97,98,99,100,103,106,],[34,34,34,34,34,60,34,-53,-54,-55,34,60,60,60,34,34,34,34,34,34,-51,60,34,34,34,34,34,-52,-45,-46,-47,-48,-49,60,-50,-23,60,60,60,60,-45,34,-45,]),'ENTERO':([21,23,24,25,27,34,43,59,60,61,62,63,64,75,76,77,78,79,103,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'DECIMAL':([21,23,24,25,27,34,43,59,60,61,62,63,64,75,76,77,78,79,103,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'CADENA':([21,23,43,59,64,103,],[38,38,38,38,38,38,]),'TRUE':([21,23,43,],[39,39,39,]),'FALSE':([21,23,43,],[40,40,40,]),'CHAR':([21,23,43,],[41,41,41,]),'PTCOMA':([22,35,36,37,38,39,40,41,46,47,48,49,50,51,58,66,67,68,69,70,71,72,82,84,85,86,87,88,89,90,91,92,93,100,106,],[44,-53,-54,-23,-60,-24,-25,-56,44,-31,-32,-33,-34,-35,44,-51,44,-37,-38,-39,-40,-41,-52,-45,-58,-46,-47,-48,-49,-57,-59,-50,-23,-45,-45,]),'LLAVIZQ':([26,74,80,109,],[56,95,101,110,]),'MAS':([29,30,31,35,36,37,38,47,48,49,53,54,57,66,68,69,70,82,84,85,86,87,88,89,90,91,92,93,96,97,98,99,100,106,],[59,64,65,-53,-54,-23,-60,59,64,65,79,65,79,-51,59,64,65,-52,-45,-58,-46,-47,-48,-49,-57,-59,-50,-23,79,79,79,79,-45,-45,]),'POR':([29,35,36,37,47,53,57,66,68,82,84,86,87,88,89,91,92,93,96,97,98,99,100,106,],[61,-53,-54,-55,61,61,61,-51,61,-52,61,61,-47,-48,-49,61,-50,-23,61,61,61,61,61,61,]),'DIVIDIDO':([29,35,36,37,47,53,57,66,68,82,84,86,87,88,89,91,92,93,96,97,98,99,100,106,],[62,-53,-54,-55,62,62,62,-51,62,-52,62,62,-47,-48,-49,62,-50,-23,62,62,62,62,62,62,]),'ELEVADO':([29,35,36,37,47,53,57,66,68,82,84,86,87,88,89,91,92,93,96,97,98,99,100,106,],[63,-53,-54,-55,63,63,63,-51,63,-52,63,63,63,63,-49,63,-50,-23,63,63,63,63,63,63,]),'MAYQUE':([35,36,37,53,66,82,86,87,88,89,92,93,100,],[-53,-54,-55,75,-51,-52,-46,-47,-48,-49,-50,-23,-45,]),'MENQUE':([35,36,37,53,66,82,86,87,88,89,92,93,100,],[-53,-54,-55,76,-51,-52,-46,-47,-48,-49,-50,-23,-45,]),'IGUALQUE':([35,36,37,53,66,82,86,87,88,89,92,93,100,],[-53,-54,-55,77,-51,-52,-46,-47,-48,-49,-50,-23,-45,]),'NIGUALQUE':([35,36,37,53,66,82,86,87,88,89,92,93,100,],[-53,-54,-55,78,-51,-52,-46,-47,-48,-49,-50,-23,-45,]),'ELSE':([108,],[109,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,56,95,101,110,],[2,81,104,105,111,]),'instruccion':([0,2,56,81,95,101,104,105,110,111,],[3,19,3,19,3,3,19,19,3,19,]),'empty':([0,22,46,56,58,67,95,101,110,],[4,45,45,4,45,45,4,4,4,]),'func_main':([0,2,56,81,95,101,104,105,110,111,],[5,5,5,5,5,5,5,5,5,5,]),'imprimir_instr':([0,2,56,81,95,101,104,105,110,111,],[6,6,6,6,6,6,6,6,6,6,]),'definicion_instr':([0,2,56,81,95,101,104,105,110,111,],[7,7,7,7,7,7,7,7,7,7,]),'asignacion_instr':([0,2,56,81,95,101,104,105,110,111,],[8,8,8,8,8,8,8,8,8,8,]),'def_asig_instr':([0,2,56,81,95,101,104,105,110,111,],[9,9,9,9,9,9,9,9,9,9,]),'mientras_instr':([0,2,56,81,95,101,104,105,110,111,],[10,10,10,10,10,10,10,10,10,10,]),'if_instr':([0,2,56,81,95,101,104,105,110,111,],[11,11,11,11,11,11,11,11,11,11,]),'if_else_instr':([0,2,56,81,95,101,104,105,110,111,],[12,12,12,12,12,12,12,12,12,12,]),'print_expresion_general':([21,],[28,]),'expresion_numerica':([21,23,24,25,27,34,43,59,60,61,62,63,64,75,76,77,78,79,103,],[29,47,53,53,57,66,68,84,86,87,88,89,91,96,97,98,99,100,106,]),'expresion_cadena':([21,23,43,59,64,103,],[30,48,69,85,90,85,]),'expresion_id':([21,23,24,25,27,34,43,59,60,61,62,63,64,65,75,76,77,78,79,103,],[31,49,54,54,54,54,70,54,54,54,54,54,54,92,54,54,54,54,54,54,]),'expresion_boolean':([21,23,43,],[32,50,71,]),'expresion_char':([21,23,43,],[33,51,72,]),'def_instr_prima':([22,46,58,67,],[42,73,83,94,]),'asign_expresion_general':([23,],[46,]),'expresion_logica':([24,25,],[52,55,]),'asign_def_expresion_general':([43,],[67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',154),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',159),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',165),
  ('instrucciones -> empty','instrucciones',1,'p_instrucciones_instruccion','grammar.py',166),
  ('instruccion -> func_main','instruccion',1,'p_instruccion','grammar.py',171),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','grammar.py',172),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','grammar.py',173),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','grammar.py',174),
  ('instruccion -> def_asig_instr','instruccion',1,'p_instruccion','grammar.py',175),
  ('instruccion -> mientras_instr','instruccion',1,'p_instruccion','grammar.py',176),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','grammar.py',177),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','grammar.py',178),
  ('def_funcs_vars -> definicion_instr','def_funcs_vars',1,'p_beforeOfMain','grammar.py',183),
  ('def_funcs_vars -> asignacion_instr','def_funcs_vars',1,'p_beforeOfMain','grammar.py',184),
  ('def_funcs_vars -> empty','def_funcs_vars',1,'p_beforeOfMain','grammar.py',185),
  ('func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER','func_main',6,'p_func_main','grammar.py',190),
  ('imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima','imprimir_instr',5,'p_instruccion_imprimir','grammar.py',195),
  ('print_expresion_general -> expresion_numerica','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',200),
  ('print_expresion_general -> expresion_cadena','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',201),
  ('print_expresion_general -> expresion_id','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',202),
  ('print_expresion_general -> expresion_boolean','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',203),
  ('print_expresion_general -> expresion_char','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',204),
  ('expresion_id -> ID','expresion_id',1,'p_expresionId','grammar.py',209),
  ('expresion_boolean -> TRUE','expresion_boolean',1,'p_expresionBoolean','grammar.py',214),
  ('expresion_boolean -> FALSE','expresion_boolean',1,'p_expresionBoolean','grammar.py',215),
  ('definicion_instr -> VAR ID def_instr_prima','definicion_instr',3,'p_instruccion_definicion','grammar.py',221),
  ('def_instr_prima -> PTCOMA','def_instr_prima',1,'p_instrDef_prima','grammar.py',226),
  ('def_instr_prima -> empty','def_instr_prima',1,'p_instrDef_prima','grammar.py',227),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',232),
  ('asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima','asignacion_instr',4,'p_asignacion_instr','grammar.py',237),
  ('asign_expresion_general -> expresion_numerica','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',242),
  ('asign_expresion_general -> expresion_cadena','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',243),
  ('asign_expresion_general -> expresion_id','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',244),
  ('asign_expresion_general -> expresion_boolean','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',245),
  ('asign_expresion_general -> expresion_char','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',246),
  ('def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima','def_asig_instr',5,'p_definicion_asignacion','grammar.py',251),
  ('asign_def_expresion_general -> expresion_numerica','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',256),
  ('asign_def_expresion_general -> expresion_cadena','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',257),
  ('asign_def_expresion_general -> expresion_id','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',258),
  ('asign_def_expresion_general -> expresion_boolean','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',259),
  ('asign_def_expresion_general -> expresion_char','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',260),
  ('mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','mientras_instr',7,'p_mientras_instr','grammar.py',265),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','grammar.py',270),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','grammar.py',275),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',280),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',281),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',282),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',283),
  ('expresion_numerica -> expresion_numerica ELEVADO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',284),
  ('expresion_numerica -> expresion_id MAS expresion_id','expresion_numerica',3,'p_expresion_binaria','grammar.py',285),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','grammar.py',304),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','grammar.py',309),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','grammar.py',314),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','grammar.py',315),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','grammar.py',320),
  ('expresion_char -> CHAR','expresion_char',1,'p_expresion_char','grammar.py',325),
  ('expresion_cadena -> expresion_cadena MAS expresion_cadena','expresion_cadena',3,'p_expresion_concatenacion','grammar.py',330),
  ('expresion_cadena -> expresion_numerica MAS expresion_cadena','expresion_cadena',3,'p_expresion_concatenacion','grammar.py',331),
  ('expresion_cadena -> expresion_cadena MAS expresion_numerica','expresion_cadena',3,'p_expresion_concatenacion','grammar.py',332),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','grammar.py',337),
  ('expresion_cadena -> expresion_numerica','expresion_cadena',1,'p_expresion_cadena_numerico','grammar.py',342),
  ('expresion_logica -> expresion_numerica MAYQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',347),
  ('expresion_logica -> expresion_numerica MENQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',348),
  ('expresion_logica -> expresion_numerica IGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',349),
  ('expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',350),
]
