
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftMASMENOSleftPORDIVIDIDOrightUMENOSCADENA CONCAT DECIMAL DIVIDIDO ELSE ENTERO ID IF IGUAL IGUALQUE LLAVDER LLAVIZQ MAS MAYQUE MENOS MENQUE MIENTRAS NIGUALQUE PARDER PARIZQ POR PRINT PTCOMA VARinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion instruccion      : imprimir_instr\n                        | definicion_instr\n                        | asignacion_instr\n                        | def_asig_instr\n                        | mientras_instr\n                        | if_instr\n                        | if_else_instrimprimir_instr     : PRINT PARIZQ expresion_general PARDER PTCOMAexpresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | expresion_idexpresion_id   : IDdefinicion_instr   : VAR ID PTCOMAasignacion_instr   : ID IGUAL expresion_numerica PTCOMAdef_asig_instr     : VAR ID IGUAL expresion_numerica PTCOMAmientras_instr     : MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion_numerica MAS expresion_numerica\n                        | expresion_numerica MENOS expresion_numerica\n                        | expresion_numerica POR expresion_numerica\n                        | expresion_numerica DIVIDIDO expresion_numericaexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n                        | DECIMALexpresion_numerica   : IDexpresion_cadena     : expresion_cadena CONCAT expresion_cadenaexpresion_cadena     : CADENAexpresion_cadena     : expresion_numericaexpresion_logica : expresion_numerica MAYQUE expresion_numerica\n                        | expresion_numerica MENQUE expresion_numerica\n                        | expresion_numerica IGUALQUE expresion_numerica\n                        | expresion_numerica NIGUALQUE expresion_numerica'
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,8,9,10,16,32,48,56,63,64,69,70,71,72,73,75,76,77,],[11,11,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-18,11,11,11,11,-19,-20,11,11,-21,]),'VAR':([0,2,3,4,5,6,7,8,9,10,16,32,48,56,63,64,69,70,71,72,73,75,76,77,],[12,12,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-18,12,12,12,12,-19,-20,12,12,-21,]),'ID':([0,2,3,4,5,6,7,8,9,10,12,16,17,19,20,21,22,27,32,33,41,42,43,44,45,48,50,51,52,53,56,63,64,69,70,71,72,73,75,76,77,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,18,-2,30,34,34,34,34,34,-16,34,34,34,34,34,34,-17,34,34,34,34,-11,-18,13,13,13,13,-19,-20,13,13,-21,]),'MIENTRAS':([0,2,3,4,5,6,7,8,9,10,16,32,48,56,63,64,69,70,71,72,73,75,76,77,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-18,14,14,14,14,-19,-20,14,14,-21,]),'IF':([0,2,3,4,5,6,7,8,9,10,16,32,48,56,63,64,69,70,71,72,73,75,76,77,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-18,15,15,15,15,-19,-20,15,15,-21,]),'$end':([1,2,3,4,5,6,7,8,9,10,16,32,48,56,63,72,73,77,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-18,-19,-20,-21,]),'LLAVDER':([3,4,5,6,7,8,9,10,16,32,48,56,63,70,71,72,73,76,77,],[-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-18,72,73,-19,-20,77,-21,]),'PARIZQ':([11,14,15,17,19,20,21,22,27,33,41,42,43,44,45,50,51,52,53,],[17,20,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'IGUAL':([13,18,],[19,33,]),'MENOS':([17,19,20,21,22,24,27,28,29,30,33,34,35,37,39,41,42,43,44,45,46,47,50,51,52,53,55,57,58,59,60,62,65,66,67,68,],[27,27,27,27,27,42,27,-28,-29,-30,27,-30,42,42,42,27,27,27,27,27,-26,42,27,27,27,27,-27,-22,-23,-24,-25,42,42,42,42,42,]),'ENTERO':([17,19,20,21,22,27,33,41,42,43,44,45,50,51,52,53,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'DECIMAL':([17,19,20,21,22,27,33,41,42,43,44,45,50,51,52,53,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CADENA':([17,45,],[31,31,]),'PTCOMA':([18,28,29,34,35,40,46,47,55,57,58,59,60,],[32,-28,-29,-30,48,56,-26,63,-27,-22,-23,-24,-25,]),'PARDER':([23,24,25,26,28,29,30,31,34,36,38,39,46,55,57,58,59,60,61,62,65,66,67,68,],[40,-12,-13,-14,-28,-29,-15,-32,-30,49,54,55,-26,-27,-22,-23,-24,-25,-31,-33,-34,-35,-36,-37,]),'MAS':([24,28,29,30,34,35,37,39,46,47,55,57,58,59,60,62,65,66,67,68,],[41,-28,-29,-30,-30,41,41,41,-26,41,-27,-22,-23,-24,-25,41,41,41,41,41,]),'POR':([24,28,29,30,34,35,37,39,46,47,55,57,58,59,60,62,65,66,67,68,],[43,-28,-29,-30,-30,43,43,43,-26,43,-27,43,43,-24,-25,43,43,43,43,43,]),'DIVIDIDO':([24,28,29,30,34,35,37,39,46,47,55,57,58,59,60,62,65,66,67,68,],[44,-28,-29,-30,-30,44,44,44,-26,44,-27,44,44,-24,-25,44,44,44,44,44,]),'CONCAT':([24,25,28,29,30,31,34,46,55,57,58,59,60,61,62,],[-33,45,-28,-29,-30,-32,-30,-26,-27,-22,-23,-24,-25,-31,-33,]),'MAYQUE':([28,29,34,37,46,55,57,58,59,60,],[-28,-29,-30,50,-26,-27,-22,-23,-24,-25,]),'MENQUE':([28,29,34,37,46,55,57,58,59,60,],[-28,-29,-30,51,-26,-27,-22,-23,-24,-25,]),'IGUALQUE':([28,29,34,37,46,55,57,58,59,60,],[-28,-29,-30,52,-26,-27,-22,-23,-24,-25,]),'NIGUALQUE':([28,29,34,37,46,55,57,58,59,60,],[-28,-29,-30,53,-26,-27,-22,-23,-24,-25,]),'LLAVIZQ':([49,54,74,],[64,69,75,]),'ELSE':([73,],[74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,64,69,75,],[2,70,71,76,]),'instruccion':([0,2,64,69,70,71,75,76,],[3,16,3,3,16,16,3,16,]),'imprimir_instr':([0,2,64,69,70,71,75,76,],[4,4,4,4,4,4,4,4,]),'definicion_instr':([0,2,64,69,70,71,75,76,],[5,5,5,5,5,5,5,5,]),'asignacion_instr':([0,2,64,69,70,71,75,76,],[6,6,6,6,6,6,6,6,]),'def_asig_instr':([0,2,64,69,70,71,75,76,],[7,7,7,7,7,7,7,7,]),'mientras_instr':([0,2,64,69,70,71,75,76,],[8,8,8,8,8,8,8,8,]),'if_instr':([0,2,64,69,70,71,75,76,],[9,9,9,9,9,9,9,9,]),'if_else_instr':([0,2,64,69,70,71,75,76,],[10,10,10,10,10,10,10,10,]),'expresion_general':([17,],[23,]),'expresion_numerica':([17,19,20,21,22,27,33,41,42,43,44,45,50,51,52,53,],[24,35,37,37,39,46,47,57,58,59,60,62,65,66,67,68,]),'expresion_cadena':([17,45,],[25,61,]),'expresion_id':([17,],[26,]),'expresion_logica':([20,21,],[36,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',139),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',144),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',150),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','grammar.py',155),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','grammar.py',156),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','grammar.py',157),
  ('instruccion -> def_asig_instr','instruccion',1,'p_instruccion','grammar.py',158),
  ('instruccion -> mientras_instr','instruccion',1,'p_instruccion','grammar.py',159),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','grammar.py',160),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','grammar.py',161),
  ('imprimir_instr -> PRINT PARIZQ expresion_general PARDER PTCOMA','imprimir_instr',5,'p_instruccion_imprimir','grammar.py',166),
  ('expresion_general -> expresion_numerica','expresion_general',1,'p_expresionGeneralImprimir','grammar.py',171),
  ('expresion_general -> expresion_cadena','expresion_general',1,'p_expresionGeneralImprimir','grammar.py',172),
  ('expresion_general -> expresion_id','expresion_general',1,'p_expresionGeneralImprimir','grammar.py',173),
  ('expresion_id -> ID','expresion_id',1,'p_expresionId','grammar.py',178),
  ('definicion_instr -> VAR ID PTCOMA','definicion_instr',3,'p_instruccion_definicion','grammar.py',183),
  ('asignacion_instr -> ID IGUAL expresion_numerica PTCOMA','asignacion_instr',4,'p_asignacion_instr','grammar.py',188),
  ('def_asig_instr -> VAR ID IGUAL expresion_numerica PTCOMA','def_asig_instr',5,'p_definicion_asignacion','grammar.py',193),
  ('mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','mientras_instr',7,'p_mientras_instr','grammar.py',199),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','grammar.py',204),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','grammar.py',209),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',214),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',215),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',216),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',217),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','grammar.py',229),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','grammar.py',234),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','grammar.py',239),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','grammar.py',240),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','grammar.py',245),
  ('expresion_cadena -> expresion_cadena CONCAT expresion_cadena','expresion_cadena',3,'p_expresion_concatenacion','grammar.py',250),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','grammar.py',255),
  ('expresion_cadena -> expresion_numerica','expresion_cadena',1,'p_expresion_cadena_numerico','grammar.py',260),
  ('expresion_logica -> expresion_numerica MAYQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',265),
  ('expresion_logica -> expresion_numerica MENQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',266),
  ('expresion_logica -> expresion_numerica IGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',267),
  ('expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',268),
]
