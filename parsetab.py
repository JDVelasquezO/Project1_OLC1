
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftMASMENOSleftPORDIVIDIDOrightUMENOSCADENA CONCAT DECIMAL DIVIDIDO ELSE ENTERO ID IF IGUAL IGUALQUE LLAVDER LLAVIZQ MAIN MAS MAYQUE MENOS MENQUE MIENTRAS NIGUALQUE PARDER PARIZQ POR PRINT PTCOMA VARinit            : func_mainfunc_main  : MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDERinstrucciones    : instrucciones instruccioninstrucciones    : instruccion instruccion      : imprimir_instr\n                        | definicion_instr\n                        | asignacion_instr\n                        | def_asig_instr\n                        | mientras_instr\n                        | if_instr\n                        | if_else_instrimprimir_instr     : PRINT PARIZQ print_expresion_general PARDER PTCOMAprint_expresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | expresion_idexpresion_id   : IDdefinicion_instr   : VAR ID def_instr_primadef_instr_prima   : PTCOMA\n                        | emptyempty :asignacion_instr   : ID IGUAL asign_expresion_general def_instr_primaasign_expresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | expresion_iddef_asig_instr     : VAR ID IGUAL asign_def_expresion_general def_instr_primaasign_def_expresion_general  :  expresion_numerica\n                                | expresion_cadena\n                                | expresion_idmientras_instr     : MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion_numerica MAS expresion_numerica\n                        | expresion_numerica MENOS expresion_numerica\n                        | expresion_numerica POR expresion_numerica\n                        | expresion_numerica DIVIDIDO expresion_numericaexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n                        | DECIMALexpresion_numerica   : IDexpresion_cadena     : expresion_cadena CONCAT expresion_cadenaexpresion_cadena     : CADENAexpresion_cadena     : expresion_numericaexpresion_logica : expresion_numerica MAYQUE expresion_numerica\n                        | expresion_numerica MENQUE expresion_numerica\n                        | expresion_numerica IGUALQUE expresion_numerica\n                        | expresion_numerica NIGUALQUE expresion_numerica'
    
_lr_action_items = {'MAIN':([0,],[3,]),'$end':([1,2,21,],[0,-1,-2,]),'PARIZQ':([3,16,19,20,23,25,26,27,28,33,39,52,53,54,55,56,64,65,66,67,],[4,23,26,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'PARDER':([4,29,30,31,32,34,35,36,37,46,48,49,50,57,69,71,72,73,74,75,76,79,80,81,82,],[5,51,-13,-14,-15,-38,-39,-16,-42,63,-40,68,69,-36,-37,-32,-33,-34,-35,-41,-43,-44,-45,-46,-47,]),'LLAVIZQ':([5,63,68,88,],[6,78,83,89,]),'PRINT':([6,7,8,9,10,11,12,13,14,15,22,24,34,35,36,37,38,40,41,42,43,44,45,48,57,58,59,60,61,62,69,70,71,72,73,74,75,76,77,78,83,84,85,86,87,89,90,91,],[16,16,-4,-5,-6,-7,-8,-9,-10,-11,-3,-20,-38,-39,-16,-42,-17,-18,-19,-20,-22,-23,-24,-40,-36,-20,-26,-27,-28,-21,-37,-12,-32,-33,-34,-35,-41,-43,-25,16,16,16,16,-29,-30,16,16,-31,]),'VAR':([6,7,8,9,10,11,12,13,14,15,22,24,34,35,36,37,38,40,41,42,43,44,45,48,57,58,59,60,61,62,69,70,71,72,73,74,75,76,77,78,83,84,85,86,87,89,90,91,],[17,17,-4,-5,-6,-7,-8,-9,-10,-11,-3,-20,-38,-39,-16,-42,-17,-18,-19,-20,-22,-23,-24,-40,-36,-20,-26,-27,-28,-21,-37,-12,-32,-33,-34,-35,-41,-43,-25,17,17,17,17,-29,-30,17,17,-31,]),'ID':([6,7,8,9,10,11,12,13,14,15,17,22,23,24,25,26,27,28,33,34,35,36,37,38,39,40,41,42,43,44,45,48,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,69,70,71,72,73,74,75,76,77,78,83,84,85,86,87,89,90,91,],[18,18,-4,-5,-6,-7,-8,-9,-10,-11,24,-3,36,-20,36,48,48,48,48,-38,-39,-16,-42,-17,36,-18,-19,-20,-22,-23,-24,-40,48,48,48,48,48,-36,-20,-26,-27,-28,-21,48,48,48,48,-37,-12,-32,-33,-34,-35,-41,-43,-25,18,18,18,18,-29,-30,18,18,-31,]),'MIENTRAS':([6,7,8,9,10,11,12,13,14,15,22,24,34,35,36,37,38,40,41,42,43,44,45,48,57,58,59,60,61,62,69,70,71,72,73,74,75,76,77,78,83,84,85,86,87,89,90,91,],[19,19,-4,-5,-6,-7,-8,-9,-10,-11,-3,-20,-38,-39,-16,-42,-17,-18,-19,-20,-22,-23,-24,-40,-36,-20,-26,-27,-28,-21,-37,-12,-32,-33,-34,-35,-41,-43,-25,19,19,19,19,-29,-30,19,19,-31,]),'IF':([6,7,8,9,10,11,12,13,14,15,22,24,34,35,36,37,38,40,41,42,43,44,45,48,57,58,59,60,61,62,69,70,71,72,73,74,75,76,77,78,83,84,85,86,87,89,90,91,],[20,20,-4,-5,-6,-7,-8,-9,-10,-11,-3,-20,-38,-39,-16,-42,-17,-18,-19,-20,-22,-23,-24,-40,-36,-20,-26,-27,-28,-21,-37,-12,-32,-33,-34,-35,-41,-43,-25,20,20,20,20,-29,-30,20,20,-31,]),'LLAVDER':([7,8,9,10,11,12,13,14,15,22,24,34,35,36,37,38,40,41,42,43,44,45,48,57,58,59,60,61,62,69,70,71,72,73,74,75,76,77,84,85,86,87,90,91,],[21,-4,-5,-6,-7,-8,-9,-10,-11,-3,-20,-38,-39,-16,-42,-17,-18,-19,-20,-22,-23,-24,-40,-36,-20,-26,-27,-28,-21,-37,-12,-32,-33,-34,-35,-41,-43,-25,86,87,-29,-30,91,-31,]),'IGUAL':([18,24,],[25,39,]),'MENOS':([23,25,26,27,28,30,33,34,35,36,39,43,47,48,50,52,53,54,55,56,57,59,64,65,66,67,69,71,72,73,74,76,79,80,81,82,],[33,33,33,33,33,53,33,-38,-39,-40,33,53,53,-40,53,33,33,33,33,33,-36,53,33,33,33,33,-37,-32,-33,-34,-35,53,53,53,53,53,]),'ENTERO':([23,25,26,27,28,33,39,52,53,54,55,56,64,65,66,67,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'DECIMAL':([23,25,26,27,28,33,39,52,53,54,55,56,64,65,66,67,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'CADENA':([23,25,39,56,],[37,37,37,37,]),'PTCOMA':([24,34,35,36,37,42,43,44,45,48,51,57,58,59,60,61,69,71,72,73,74,75,76,],[40,-38,-39,-16,-42,40,-22,-23,-24,-40,70,-36,40,-26,-27,-28,-37,-32,-33,-34,-35,-41,-43,]),'MAS':([30,34,35,36,43,47,48,50,57,59,69,71,72,73,74,76,79,80,81,82,],[52,-38,-39,-40,52,52,-40,52,-36,52,-37,-32,-33,-34,-35,52,52,52,52,52,]),'POR':([30,34,35,36,43,47,48,50,57,59,69,71,72,73,74,76,79,80,81,82,],[54,-38,-39,-40,54,54,-40,54,-36,54,-37,54,54,-34,-35,54,54,54,54,54,]),'DIVIDIDO':([30,34,35,36,43,47,48,50,57,59,69,71,72,73,74,76,79,80,81,82,],[55,-38,-39,-40,55,55,-40,55,-36,55,-37,55,55,-34,-35,55,55,55,55,55,]),'CONCAT':([30,31,34,35,36,37,43,44,48,57,59,60,69,71,72,73,74,75,76,],[-43,56,-38,-39,-40,-42,-43,56,-40,-36,-43,56,-37,-32,-33,-34,-35,-41,-43,]),'MAYQUE':([34,35,47,48,57,69,71,72,73,74,],[-38,-39,64,-40,-36,-37,-32,-33,-34,-35,]),'MENQUE':([34,35,47,48,57,69,71,72,73,74,],[-38,-39,65,-40,-36,-37,-32,-33,-34,-35,]),'IGUALQUE':([34,35,47,48,57,69,71,72,73,74,],[-38,-39,66,-40,-36,-37,-32,-33,-34,-35,]),'NIGUALQUE':([34,35,47,48,57,69,71,72,73,74,],[-38,-39,67,-40,-36,-37,-32,-33,-34,-35,]),'ELSE':([87,],[88,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'func_main':([0,],[2,]),'instrucciones':([6,78,83,89,],[7,84,85,90,]),'instruccion':([6,7,78,83,84,85,89,90,],[8,22,8,8,22,22,8,22,]),'imprimir_instr':([6,7,78,83,84,85,89,90,],[9,9,9,9,9,9,9,9,]),'definicion_instr':([6,7,78,83,84,85,89,90,],[10,10,10,10,10,10,10,10,]),'asignacion_instr':([6,7,78,83,84,85,89,90,],[11,11,11,11,11,11,11,11,]),'def_asig_instr':([6,7,78,83,84,85,89,90,],[12,12,12,12,12,12,12,12,]),'mientras_instr':([6,7,78,83,84,85,89,90,],[13,13,13,13,13,13,13,13,]),'if_instr':([6,7,78,83,84,85,89,90,],[14,14,14,14,14,14,14,14,]),'if_else_instr':([6,7,78,83,84,85,89,90,],[15,15,15,15,15,15,15,15,]),'print_expresion_general':([23,],[29,]),'expresion_numerica':([23,25,26,27,28,33,39,52,53,54,55,56,64,65,66,67,],[30,43,47,47,50,57,59,71,72,73,74,76,79,80,81,82,]),'expresion_cadena':([23,25,39,56,],[31,44,60,75,]),'expresion_id':([23,25,39,],[32,45,61,]),'def_instr_prima':([24,42,58,],[38,62,77,]),'empty':([24,42,58,],[41,41,41,]),'asign_expresion_general':([25,],[42,]),'expresion_logica':([26,27,],[46,49,]),'asign_def_expresion_general':([39,],[58,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> func_main','init',1,'p_init','grammar.py',138),
  ('func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER','func_main',6,'p_main','grammar.py',143),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',148),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',154),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','grammar.py',159),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','grammar.py',160),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','grammar.py',161),
  ('instruccion -> def_asig_instr','instruccion',1,'p_instruccion','grammar.py',162),
  ('instruccion -> mientras_instr','instruccion',1,'p_instruccion','grammar.py',163),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','grammar.py',164),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','grammar.py',165),
  ('imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER PTCOMA','imprimir_instr',5,'p_instruccion_imprimir','grammar.py',170),
  ('print_expresion_general -> expresion_numerica','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',175),
  ('print_expresion_general -> expresion_cadena','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',176),
  ('print_expresion_general -> expresion_id','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',177),
  ('expresion_id -> ID','expresion_id',1,'p_expresionId','grammar.py',182),
  ('definicion_instr -> VAR ID def_instr_prima','definicion_instr',3,'p_instruccion_definicion','grammar.py',187),
  ('def_instr_prima -> PTCOMA','def_instr_prima',1,'p_instrDef_prima','grammar.py',192),
  ('def_instr_prima -> empty','def_instr_prima',1,'p_instrDef_prima','grammar.py',193),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',198),
  ('asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima','asignacion_instr',4,'p_asignacion_instr','grammar.py',203),
  ('asign_expresion_general -> expresion_numerica','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',208),
  ('asign_expresion_general -> expresion_cadena','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',209),
  ('asign_expresion_general -> expresion_id','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',210),
  ('def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima','def_asig_instr',5,'p_definicion_asignacion','grammar.py',215),
  ('asign_def_expresion_general -> expresion_numerica','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',220),
  ('asign_def_expresion_general -> expresion_cadena','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',221),
  ('asign_def_expresion_general -> expresion_id','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',222),
  ('mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','mientras_instr',7,'p_mientras_instr','grammar.py',227),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','grammar.py',232),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','grammar.py',237),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',242),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',243),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',244),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',245),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','grammar.py',257),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','grammar.py',262),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','grammar.py',267),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','grammar.py',268),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','grammar.py',273),
  ('expresion_cadena -> expresion_cadena CONCAT expresion_cadena','expresion_cadena',3,'p_expresion_concatenacion','grammar.py',278),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','grammar.py',283),
  ('expresion_cadena -> expresion_numerica','expresion_cadena',1,'p_expresion_cadena_numerico','grammar.py',288),
  ('expresion_logica -> expresion_numerica MAYQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',293),
  ('expresion_logica -> expresion_numerica MENQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',294),
  ('expresion_logica -> expresion_numerica IGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',295),
  ('expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',296),
]
