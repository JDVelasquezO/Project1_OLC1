
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftMASMENOSleftPORDIVIDIDOleftELEVADOrightUMENOSCADENA CHAR CONCAT DECIMAL DIVIDIDO ELEVADO ELSE ENTERO FALSE ID IF IGUAL IGUALQUE LLAVDER LLAVIZQ MAIN MAS MAYQUE MENOS MENQUE MIENTRAS NIGUALQUE PARDER PARIZQ POR PRINT PTCOMA TRUE VARinit       : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion\n                         | emptyinstruccion      : func_main\n                        | imprimir_instr\n                        | definicion_instr\n                        | asignacion_instr\n                        | def_asig_instr\n                        | mientras_instr\n                        | if_instr\n                        | if_else_instrdef_funcs_vars   : definicion_instr\n                        | asignacion_instr\n                        | emptyfunc_main  : MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDERimprimir_instr     : PRINT PARIZQ print_expresion_general PARDER def_instr_primaprint_expresion_general  :  expresion_numerica\n                                | expresion_cadena\n                                | expresion_id\n                                | expresion_boolean\n                                | expresion_charexpresion_id   : IDexpresion_boolean  : TRUE\n                          | FALSEdefinicion_instr   : VAR ID def_instr_primadef_instr_prima   : PTCOMA\n                        | emptyempty :asignacion_instr   : ID IGUAL asign_expresion_general def_instr_primaasign_expresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | expresion_id\n                            | expresion_boolean\n                            | expresion_chardef_asig_instr     : VAR ID IGUAL asign_def_expresion_general def_instr_primaasign_def_expresion_general  :  expresion_numerica\n                                    | expresion_cadena\n                                    | expresion_id\n                                    | expresion_boolean\n                                    | expresion_charmientras_instr     : MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion_numerica MAS expresion_numerica\n                        | expresion_numerica MENOS expresion_numerica\n                        | expresion_numerica POR expresion_numerica\n                        | expresion_numerica DIVIDIDO expresion_numerica\n                        | expresion_numerica ELEVADO expresion_numericaexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n                        | DECIMALexpresion_numerica   : IDexpresion_char   : CHARexpresion_cadena     : var_concatenar MAS var_concatenarvar_concatenar     : expresion_cadena\n                            | expresion_numerica\n                            | expresion_charexpresion_cadena     : CADENAexpresion_cadena     : expresion_numericaexpresion_logica : expresion_numerica MAYQUE expresion_numerica\n                        | expresion_numerica MENQUE expresion_numerica\n                        | expresion_numerica IGUALQUE expresion_numerica\n                        | expresion_numerica NIGUALQUE expresion_numerica'
    
_lr_action_items = {'MAIN':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,39,40,41,42,43,45,46,47,48,49,50,51,52,55,57,59,65,67,68,69,70,71,72,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,99,100,101,102,103,105,106,107,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-52,-53,-23,-60,-24,-25,-55,-26,-27,-28,-29,-31,-32,-33,-34,-35,-54,13,-29,-50,-29,-37,-38,-39,-40,-41,-30,13,-51,-17,-45,-46,-47,-48,-49,-56,-57,-58,-59,-36,13,13,-16,13,13,-42,-43,13,13,-44,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,39,40,41,42,43,45,46,47,48,49,50,51,52,55,57,59,65,67,68,69,70,71,72,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,99,100,101,102,103,105,106,107,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-52,-53,-23,-60,-24,-25,-55,-26,-27,-28,-29,-31,-32,-33,-34,-35,-54,14,-29,-50,-29,-37,-38,-39,-40,-41,-30,14,-51,-17,-45,-46,-47,-48,-49,-56,-57,-58,-59,-36,14,14,-16,14,14,-42,-43,14,14,-44,]),'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,39,40,41,42,43,45,46,47,48,49,50,51,52,55,57,59,65,67,68,69,70,71,72,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,99,100,101,102,103,105,106,107,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-52,-53,-23,-60,-24,-25,-55,-26,-27,-28,-29,-31,-32,-33,-34,-35,-54,15,-29,-50,-29,-37,-38,-39,-40,-41,-30,15,-51,-17,-45,-46,-47,-48,-49,-56,-57,-58,-59,-36,15,15,-16,15,15,-42,-43,15,15,-44,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,15,19,21,22,23,24,25,27,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,99,100,101,102,103,105,106,107,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,22,-2,37,-29,37,55,55,55,55,-52,-53,-23,-60,-24,-25,-55,-26,37,-27,-28,-29,-31,-32,-33,-34,-35,-54,16,-29,55,55,55,55,55,-50,55,-29,-37,-38,-39,-40,-41,-30,55,55,55,55,16,-51,-17,-45,-46,-47,-48,-49,-56,-57,-58,-59,-36,16,16,-16,16,16,-42,-43,16,16,-44,]),'MIENTRAS':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,39,40,41,42,43,45,46,47,48,49,50,51,52,55,57,59,65,67,68,69,70,71,72,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,99,100,101,102,103,105,106,107,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-52,-53,-23,-60,-24,-25,-55,-26,-27,-28,-29,-31,-32,-33,-34,-35,-54,17,-29,-50,-29,-37,-38,-39,-40,-41,-30,17,-51,-17,-45,-46,-47,-48,-49,-56,-57,-58,-59,-36,17,17,-16,17,17,-42,-43,17,17,-44,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,39,40,41,42,43,45,46,47,48,49,50,51,52,55,57,59,65,67,68,69,70,71,72,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,99,100,101,102,103,105,106,107,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-52,-53,-23,-60,-24,-25,-55,-26,-27,-28,-29,-31,-32,-33,-34,-35,-54,18,-29,-50,-29,-37,-38,-39,-40,-41,-30,18,-51,-17,-45,-46,-47,-48,-49,-56,-57,-58,-59,-36,18,18,-16,18,18,-42,-43,18,18,-44,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,39,40,41,42,43,45,46,47,48,49,50,51,52,55,59,65,67,68,69,70,71,72,73,81,82,83,84,85,86,87,88,89,90,91,92,99,102,103,107,],[-29,0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-52,-53,-23,-60,-24,-25,-55,-26,-27,-28,-29,-31,-32,-33,-34,-35,-54,-29,-50,-29,-37,-38,-39,-40,-41,-30,-51,-17,-45,-46,-47,-48,-49,-56,-57,-58,-59,-36,-16,-42,-43,-44,]),'LLAVDER':([3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,39,40,41,42,43,45,46,47,48,49,50,51,52,55,57,59,65,67,68,69,70,71,72,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,99,100,101,102,103,105,106,107,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-29,-52,-53,-23,-60,-24,-25,-55,-26,-27,-28,-29,-31,-32,-33,-34,-35,-54,-29,-29,-50,-29,-37,-38,-39,-40,-41,-30,99,-51,-17,-45,-46,-47,-48,-49,-56,-57,-58,-59,-36,-29,-29,-16,102,103,-42,-43,-29,107,-44,]),'PARIZQ':([13,14,17,18,21,23,24,25,27,34,44,60,61,62,63,64,66,75,76,77,78,],[20,21,24,25,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'IGUAL':([16,22,],[23,44,]),'PARDER':([20,28,29,30,31,32,33,35,36,37,39,40,41,42,53,55,56,58,65,81,83,84,85,86,87,88,89,90,91,94,95,96,97,],[26,59,-18,-19,-20,-21,-22,-52,-53,-23,-60,-24,-25,-55,74,-54,79,81,-50,-51,-45,-46,-47,-48,-49,-56,-57,-58,-59,-62,-63,-64,-65,]),'MENOS':([21,23,24,25,27,29,34,35,36,37,44,48,54,55,58,60,61,62,63,64,65,66,68,75,76,77,78,81,83,84,85,86,87,90,94,95,96,97,],[34,34,34,34,34,61,34,-52,-53,-54,34,61,61,-54,61,34,34,34,34,34,-50,34,61,34,34,34,34,-51,-45,-46,-47,-48,-49,61,61,61,61,61,]),'ENTERO':([21,23,24,25,27,34,44,60,61,62,63,64,66,75,76,77,78,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'DECIMAL':([21,23,24,25,27,34,44,60,61,62,63,64,66,75,76,77,78,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'CADENA':([21,23,44,66,],[39,39,39,39,]),'TRUE':([21,23,44,],[40,40,40,]),'FALSE':([21,23,44,],[41,41,41,]),'CHAR':([21,23,44,66,],[42,42,42,42,]),'PTCOMA':([22,35,36,37,39,40,41,42,47,48,49,50,51,52,55,59,65,67,68,69,70,71,72,81,83,84,85,86,87,88,89,90,91,],[45,-52,-53,-23,-60,-24,-25,-55,45,-31,-32,-33,-34,-35,-54,45,-50,45,-37,-38,-39,-40,-41,-51,-45,-46,-47,-48,-49,-56,-57,-58,-59,]),'LLAVIZQ':([26,74,79,104,],[57,93,98,105,]),'MAS':([29,30,33,35,36,37,38,39,42,48,49,52,54,55,58,65,68,69,72,81,83,84,85,86,87,88,89,90,91,94,95,96,97,],[60,-57,-59,-52,-53,-54,66,-60,-55,60,-57,-59,60,-54,60,-50,60,-57,-59,-51,-45,-46,-47,-48,-49,-56,-57,60,-59,60,60,60,60,]),'POR':([29,35,36,37,48,54,55,58,65,68,81,83,84,85,86,87,90,94,95,96,97,],[62,-52,-53,-54,62,62,-54,62,-50,62,-51,62,62,-47,-48,-49,62,62,62,62,62,]),'DIVIDIDO':([29,35,36,37,48,54,55,58,65,68,81,83,84,85,86,87,90,94,95,96,97,],[63,-52,-53,-54,63,63,-54,63,-50,63,-51,63,63,-47,-48,-49,63,63,63,63,63,]),'ELEVADO':([29,35,36,37,48,54,55,58,65,68,81,83,84,85,86,87,90,94,95,96,97,],[64,-52,-53,-54,64,64,-54,64,-50,64,-51,64,64,64,64,-49,64,64,64,64,64,]),'MAYQUE':([35,36,54,55,65,81,83,84,85,86,87,],[-52,-53,75,-54,-50,-51,-45,-46,-47,-48,-49,]),'MENQUE':([35,36,54,55,65,81,83,84,85,86,87,],[-52,-53,76,-54,-50,-51,-45,-46,-47,-48,-49,]),'IGUALQUE':([35,36,54,55,65,81,83,84,85,86,87,],[-52,-53,77,-54,-50,-51,-45,-46,-47,-48,-49,]),'NIGUALQUE':([35,36,54,55,65,81,83,84,85,86,87,],[-52,-53,78,-54,-50,-51,-45,-46,-47,-48,-49,]),'ELSE':([103,],[104,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,57,93,98,105,],[2,80,100,101,106,]),'instruccion':([0,2,57,80,93,98,100,101,105,106,],[3,19,3,19,3,3,19,19,3,19,]),'empty':([0,22,47,57,59,67,93,98,105,],[4,46,46,4,46,46,4,4,4,]),'func_main':([0,2,57,80,93,98,100,101,105,106,],[5,5,5,5,5,5,5,5,5,5,]),'imprimir_instr':([0,2,57,80,93,98,100,101,105,106,],[6,6,6,6,6,6,6,6,6,6,]),'definicion_instr':([0,2,57,80,93,98,100,101,105,106,],[7,7,7,7,7,7,7,7,7,7,]),'asignacion_instr':([0,2,57,80,93,98,100,101,105,106,],[8,8,8,8,8,8,8,8,8,8,]),'def_asig_instr':([0,2,57,80,93,98,100,101,105,106,],[9,9,9,9,9,9,9,9,9,9,]),'mientras_instr':([0,2,57,80,93,98,100,101,105,106,],[10,10,10,10,10,10,10,10,10,10,]),'if_instr':([0,2,57,80,93,98,100,101,105,106,],[11,11,11,11,11,11,11,11,11,11,]),'if_else_instr':([0,2,57,80,93,98,100,101,105,106,],[12,12,12,12,12,12,12,12,12,12,]),'print_expresion_general':([21,],[28,]),'expresion_numerica':([21,23,24,25,27,34,44,60,61,62,63,64,66,75,76,77,78,],[29,48,54,54,58,65,68,83,84,85,86,87,90,94,95,96,97,]),'expresion_cadena':([21,23,44,66,],[30,49,69,89,]),'expresion_id':([21,23,44,],[31,50,70,]),'expresion_boolean':([21,23,44,],[32,51,71,]),'expresion_char':([21,23,44,66,],[33,52,72,91,]),'var_concatenar':([21,23,44,66,],[38,38,38,88,]),'def_instr_prima':([22,47,59,67,],[43,73,82,92,]),'asign_expresion_general':([23,],[47,]),'expresion_logica':([24,25,],[53,56,]),'asign_def_expresion_general':([44,],[67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',154),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',159),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',165),
  ('instrucciones -> empty','instrucciones',1,'p_instrucciones_instruccion','grammar.py',166),
  ('instruccion -> func_main','instruccion',1,'p_instruccion','grammar.py',171),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','grammar.py',172),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','grammar.py',173),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','grammar.py',174),
  ('instruccion -> def_asig_instr','instruccion',1,'p_instruccion','grammar.py',175),
  ('instruccion -> mientras_instr','instruccion',1,'p_instruccion','grammar.py',176),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','grammar.py',177),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','grammar.py',178),
  ('def_funcs_vars -> definicion_instr','def_funcs_vars',1,'p_beforeOfMain','grammar.py',183),
  ('def_funcs_vars -> asignacion_instr','def_funcs_vars',1,'p_beforeOfMain','grammar.py',184),
  ('def_funcs_vars -> empty','def_funcs_vars',1,'p_beforeOfMain','grammar.py',185),
  ('func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER','func_main',6,'p_func_main','grammar.py',190),
  ('imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima','imprimir_instr',5,'p_instruccion_imprimir','grammar.py',195),
  ('print_expresion_general -> expresion_numerica','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',200),
  ('print_expresion_general -> expresion_cadena','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',201),
  ('print_expresion_general -> expresion_id','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',202),
  ('print_expresion_general -> expresion_boolean','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',203),
  ('print_expresion_general -> expresion_char','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',204),
  ('expresion_id -> ID','expresion_id',1,'p_expresionId','grammar.py',209),
  ('expresion_boolean -> TRUE','expresion_boolean',1,'p_expresionBoolean','grammar.py',214),
  ('expresion_boolean -> FALSE','expresion_boolean',1,'p_expresionBoolean','grammar.py',215),
  ('definicion_instr -> VAR ID def_instr_prima','definicion_instr',3,'p_instruccion_definicion','grammar.py',221),
  ('def_instr_prima -> PTCOMA','def_instr_prima',1,'p_instrDef_prima','grammar.py',226),
  ('def_instr_prima -> empty','def_instr_prima',1,'p_instrDef_prima','grammar.py',227),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',232),
  ('asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima','asignacion_instr',4,'p_asignacion_instr','grammar.py',237),
  ('asign_expresion_general -> expresion_numerica','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',242),
  ('asign_expresion_general -> expresion_cadena','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',243),
  ('asign_expresion_general -> expresion_id','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',244),
  ('asign_expresion_general -> expresion_boolean','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',245),
  ('asign_expresion_general -> expresion_char','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',246),
  ('def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima','def_asig_instr',5,'p_definicion_asignacion','grammar.py',251),
  ('asign_def_expresion_general -> expresion_numerica','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',256),
  ('asign_def_expresion_general -> expresion_cadena','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',257),
  ('asign_def_expresion_general -> expresion_id','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',258),
  ('asign_def_expresion_general -> expresion_boolean','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',259),
  ('asign_def_expresion_general -> expresion_char','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',260),
  ('mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','mientras_instr',7,'p_mientras_instr','grammar.py',265),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','grammar.py',270),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','grammar.py',275),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',280),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',281),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',282),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',283),
  ('expresion_numerica -> expresion_numerica ELEVADO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',284),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','grammar.py',303),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','grammar.py',308),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','grammar.py',313),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','grammar.py',314),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','grammar.py',319),
  ('expresion_char -> CHAR','expresion_char',1,'p_expresion_char','grammar.py',324),
  ('expresion_cadena -> var_concatenar MAS var_concatenar','expresion_cadena',3,'p_expresion_concatenacion','grammar.py',329),
  ('var_concatenar -> expresion_cadena','var_concatenar',1,'p_expresion_varConcatenar','grammar.py',334),
  ('var_concatenar -> expresion_numerica','var_concatenar',1,'p_expresion_varConcatenar','grammar.py',335),
  ('var_concatenar -> expresion_char','var_concatenar',1,'p_expresion_varConcatenar','grammar.py',336),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','grammar.py',341),
  ('expresion_cadena -> expresion_numerica','expresion_cadena',1,'p_expresion_cadena_numerico','grammar.py',346),
  ('expresion_logica -> expresion_numerica MAYQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',351),
  ('expresion_logica -> expresion_numerica MENQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',352),
  ('expresion_logica -> expresion_numerica IGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',353),
  ('expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',354),
]
