
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftMASMENOSleftPORDIVIDIDOleftELEVADOrightUMENOSCADENA CONCAT DECIMAL DIVIDIDO ELEVADO ELSE ENTERO FALSE ID IF IGUAL IGUALQUE LLAVDER LLAVIZQ MAIN MAS MAYQUE MENOS MENQUE MIENTRAS NIGUALQUE PARDER PARIZQ POR PRINT PTCOMA TRUE VARinit       : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion\n                         | emptyinstruccion      : func_main\n                        | imprimir_instr\n                        | definicion_instr\n                        | asignacion_instr\n                        | def_asig_instr\n                        | mientras_instr\n                        | if_instr\n                        | if_else_instrdef_funcs_vars   : definicion_instr\n                        | asignacion_instr\n                        | emptyfunc_main  : MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDERimprimir_instr     : PRINT PARIZQ print_expresion_general PARDER def_instr_primaprint_expresion_general  :  expresion_numerica\n                                | expresion_cadena\n                                | expresion_id\n                                | expresion_booleanexpresion_id   : IDexpresion_boolean  : TRUE\n                          | FALSEdefinicion_instr   : VAR ID def_instr_primadef_instr_prima   : PTCOMA\n                        | emptyempty :asignacion_instr   : ID IGUAL asign_expresion_general def_instr_primaasign_expresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | expresion_id\n                            | expresion_booleandef_asig_instr     : VAR ID IGUAL asign_def_expresion_general def_instr_primaasign_def_expresion_general  :  expresion_numerica\n                                    | expresion_cadena\n                                    | expresion_id\n                                    | expresion_booleanmientras_instr     : MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion_numerica MAS expresion_numerica\n                        | expresion_numerica MENOS expresion_numerica\n                        | expresion_numerica POR expresion_numerica\n                        | expresion_numerica DIVIDIDO expresion_numerica\n                        | expresion_numerica ELEVADO expresion_numericaexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n                        | DECIMALexpresion_numerica   : IDexpresion_cadena     : expresion_cadena CONCAT expresion_cadenaexpresion_cadena     : CADENAexpresion_cadena     : expresion_numericaexpresion_logica : expresion_numerica MAYQUE expresion_numerica\n                        | expresion_numerica MENQUE expresion_numerica\n                        | expresion_numerica IGUALQUE expresion_numerica\n                        | expresion_numerica NIGUALQUE expresion_numerica'
    
_lr_action_items = {'MAIN':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,34,35,36,37,38,39,40,42,43,44,45,46,47,48,51,53,55,62,63,64,65,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,91,92,93,94,95,96,98,99,100,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-28,-49,-50,-22,-53,-23,-24,-25,-26,-27,-28,-30,-31,-32,-33,-51,13,-28,-47,-28,-35,-36,-37,-38,-29,13,-48,-17,-42,-43,-44,-45,-46,-52,-54,-34,13,13,-16,13,13,-39,-40,13,13,-41,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,34,35,36,37,38,39,40,42,43,44,45,46,47,48,51,53,55,62,63,64,65,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,91,92,93,94,95,96,98,99,100,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-28,-49,-50,-22,-53,-23,-24,-25,-26,-27,-28,-30,-31,-32,-33,-51,14,-28,-47,-28,-35,-36,-37,-38,-29,14,-48,-17,-42,-43,-44,-45,-46,-52,-54,-34,14,14,-16,14,14,-39,-40,14,14,-41,]),'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,34,35,36,37,38,39,40,42,43,44,45,46,47,48,51,53,55,62,63,64,65,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,91,92,93,94,95,96,98,99,100,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-28,-49,-50,-22,-53,-23,-24,-25,-26,-27,-28,-30,-31,-32,-33,-51,15,-28,-47,-28,-35,-36,-37,-38,-29,15,-48,-17,-42,-43,-44,-45,-46,-52,-54,-34,15,15,-16,15,15,-39,-40,15,15,-41,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,15,19,21,22,23,24,25,27,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,91,92,93,94,95,96,98,99,100,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,22,-2,36,-28,36,51,51,51,51,-49,-50,-22,-53,-23,-24,-25,36,-26,-27,-28,-30,-31,-32,-33,-51,16,-28,51,51,51,51,51,51,-47,-28,-35,-36,-37,-38,-29,51,51,51,51,16,-48,-17,-42,-43,-44,-45,-46,-52,-54,-34,16,16,-16,16,16,-39,-40,16,16,-41,]),'MIENTRAS':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,34,35,36,37,38,39,40,42,43,44,45,46,47,48,51,53,55,62,63,64,65,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,91,92,93,94,95,96,98,99,100,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-28,-49,-50,-22,-53,-23,-24,-25,-26,-27,-28,-30,-31,-32,-33,-51,17,-28,-47,-28,-35,-36,-37,-38,-29,17,-48,-17,-42,-43,-44,-45,-46,-52,-54,-34,17,17,-16,17,17,-39,-40,17,17,-41,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,34,35,36,37,38,39,40,42,43,44,45,46,47,48,51,53,55,62,63,64,65,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,91,92,93,94,95,96,98,99,100,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-28,-49,-50,-22,-53,-23,-24,-25,-26,-27,-28,-30,-31,-32,-33,-51,18,-28,-47,-28,-35,-36,-37,-38,-29,18,-48,-17,-42,-43,-44,-45,-46,-52,-54,-34,18,18,-16,18,18,-39,-40,18,18,-41,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,19,22,34,35,36,37,38,39,40,42,43,44,45,46,47,48,51,55,62,63,64,65,66,67,68,76,77,78,79,80,81,82,83,84,85,92,95,96,100,],[-28,0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-28,-49,-50,-22,-53,-23,-24,-25,-26,-27,-28,-30,-31,-32,-33,-51,-28,-47,-28,-35,-36,-37,-38,-29,-48,-17,-42,-43,-44,-45,-46,-52,-54,-34,-16,-39,-40,-41,]),'LLAVDER':([3,4,5,6,7,8,9,10,11,12,19,22,34,35,36,37,38,39,40,42,43,44,45,46,47,48,51,53,55,62,63,64,65,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,91,92,93,94,95,96,98,99,100,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-28,-49,-50,-22,-53,-23,-24,-25,-26,-27,-28,-30,-31,-32,-33,-51,-28,-28,-47,-28,-35,-36,-37,-38,-29,92,-48,-17,-42,-43,-44,-45,-46,-52,-54,-34,-28,-28,-16,95,96,-39,-40,-28,100,-41,]),'PARIZQ':([13,14,17,18,21,23,24,25,27,33,41,56,57,58,59,60,61,70,71,72,73,],[20,21,24,25,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'IGUAL':([16,22,],[23,41,]),'PARDER':([20,28,29,30,31,32,34,35,36,37,38,39,49,51,52,54,62,76,78,79,80,81,82,83,84,87,88,89,90,],[26,55,-18,-19,-20,-21,-49,-50,-22,-53,-23,-24,69,-51,74,76,-47,-48,-42,-43,-44,-45,-46,-52,-54,-55,-56,-57,-58,]),'MENOS':([21,23,24,25,27,29,33,34,35,36,41,45,50,51,54,56,57,58,59,60,61,62,64,70,71,72,73,76,78,79,80,81,82,84,87,88,89,90,],[33,33,33,33,33,57,33,-49,-50,-51,33,57,57,-51,57,33,33,33,33,33,33,-47,57,33,33,33,33,-48,-42,-43,-44,-45,-46,57,57,57,57,57,]),'ENTERO':([21,23,24,25,27,33,41,56,57,58,59,60,61,70,71,72,73,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'DECIMAL':([21,23,24,25,27,33,41,56,57,58,59,60,61,70,71,72,73,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'CADENA':([21,23,41,61,],[37,37,37,37,]),'TRUE':([21,23,41,],[38,38,38,]),'FALSE':([21,23,41,],[39,39,39,]),'PTCOMA':([22,34,35,36,37,38,39,44,45,46,47,48,51,55,62,63,64,65,66,67,76,78,79,80,81,82,83,84,],[42,-49,-50,-22,-53,-23,-24,42,-30,-31,-32,-33,-51,42,-47,42,-35,-36,-37,-38,-48,-42,-43,-44,-45,-46,-52,-54,]),'LLAVIZQ':([26,69,74,97,],[53,86,91,98,]),'MAS':([29,34,35,36,45,50,51,54,62,64,76,78,79,80,81,82,84,87,88,89,90,],[56,-49,-50,-51,56,56,-51,56,-47,56,-48,-42,-43,-44,-45,-46,56,56,56,56,56,]),'POR':([29,34,35,36,45,50,51,54,62,64,76,78,79,80,81,82,84,87,88,89,90,],[58,-49,-50,-51,58,58,-51,58,-47,58,-48,58,58,-44,-45,-46,58,58,58,58,58,]),'DIVIDIDO':([29,34,35,36,45,50,51,54,62,64,76,78,79,80,81,82,84,87,88,89,90,],[59,-49,-50,-51,59,59,-51,59,-47,59,-48,59,59,-44,-45,-46,59,59,59,59,59,]),'ELEVADO':([29,34,35,36,45,50,51,54,62,64,76,78,79,80,81,82,84,87,88,89,90,],[60,-49,-50,-51,60,60,-51,60,-47,60,-48,60,60,60,60,-46,60,60,60,60,60,]),'CONCAT':([29,30,34,35,36,37,45,46,51,62,64,65,76,78,79,80,81,82,83,84,],[-54,61,-49,-50,-51,-53,-54,61,-51,-47,-54,61,-48,-42,-43,-44,-45,-46,-52,-54,]),'MAYQUE':([34,35,50,51,62,76,78,79,80,81,82,],[-49,-50,70,-51,-47,-48,-42,-43,-44,-45,-46,]),'MENQUE':([34,35,50,51,62,76,78,79,80,81,82,],[-49,-50,71,-51,-47,-48,-42,-43,-44,-45,-46,]),'IGUALQUE':([34,35,50,51,62,76,78,79,80,81,82,],[-49,-50,72,-51,-47,-48,-42,-43,-44,-45,-46,]),'NIGUALQUE':([34,35,50,51,62,76,78,79,80,81,82,],[-49,-50,73,-51,-47,-48,-42,-43,-44,-45,-46,]),'ELSE':([96,],[97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,53,86,91,98,],[2,75,93,94,99,]),'instruccion':([0,2,53,75,86,91,93,94,98,99,],[3,19,3,19,3,3,19,19,3,19,]),'empty':([0,22,44,53,55,63,86,91,98,],[4,43,43,4,43,43,4,4,4,]),'func_main':([0,2,53,75,86,91,93,94,98,99,],[5,5,5,5,5,5,5,5,5,5,]),'imprimir_instr':([0,2,53,75,86,91,93,94,98,99,],[6,6,6,6,6,6,6,6,6,6,]),'definicion_instr':([0,2,53,75,86,91,93,94,98,99,],[7,7,7,7,7,7,7,7,7,7,]),'asignacion_instr':([0,2,53,75,86,91,93,94,98,99,],[8,8,8,8,8,8,8,8,8,8,]),'def_asig_instr':([0,2,53,75,86,91,93,94,98,99,],[9,9,9,9,9,9,9,9,9,9,]),'mientras_instr':([0,2,53,75,86,91,93,94,98,99,],[10,10,10,10,10,10,10,10,10,10,]),'if_instr':([0,2,53,75,86,91,93,94,98,99,],[11,11,11,11,11,11,11,11,11,11,]),'if_else_instr':([0,2,53,75,86,91,93,94,98,99,],[12,12,12,12,12,12,12,12,12,12,]),'print_expresion_general':([21,],[28,]),'expresion_numerica':([21,23,24,25,27,33,41,56,57,58,59,60,61,70,71,72,73,],[29,45,50,50,54,62,64,78,79,80,81,82,84,87,88,89,90,]),'expresion_cadena':([21,23,41,61,],[30,46,65,83,]),'expresion_id':([21,23,41,],[31,47,66,]),'expresion_boolean':([21,23,41,],[32,48,67,]),'def_instr_prima':([22,44,55,63,],[40,68,77,85,]),'asign_expresion_general':([23,],[44,]),'expresion_logica':([24,25,],[49,52,]),'asign_def_expresion_general':([41,],[63,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',143),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',148),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',154),
  ('instrucciones -> empty','instrucciones',1,'p_instrucciones_instruccion','grammar.py',155),
  ('instruccion -> func_main','instruccion',1,'p_instruccion','grammar.py',160),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','grammar.py',161),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','grammar.py',162),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','grammar.py',163),
  ('instruccion -> def_asig_instr','instruccion',1,'p_instruccion','grammar.py',164),
  ('instruccion -> mientras_instr','instruccion',1,'p_instruccion','grammar.py',165),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','grammar.py',166),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','grammar.py',167),
  ('def_funcs_vars -> definicion_instr','def_funcs_vars',1,'p_beforeOfMain','grammar.py',172),
  ('def_funcs_vars -> asignacion_instr','def_funcs_vars',1,'p_beforeOfMain','grammar.py',173),
  ('def_funcs_vars -> empty','def_funcs_vars',1,'p_beforeOfMain','grammar.py',174),
  ('func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER','func_main',6,'p_func_main','grammar.py',179),
  ('imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima','imprimir_instr',5,'p_instruccion_imprimir','grammar.py',184),
  ('print_expresion_general -> expresion_numerica','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',189),
  ('print_expresion_general -> expresion_cadena','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',190),
  ('print_expresion_general -> expresion_id','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',191),
  ('print_expresion_general -> expresion_boolean','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',192),
  ('expresion_id -> ID','expresion_id',1,'p_expresionId','grammar.py',197),
  ('expresion_boolean -> TRUE','expresion_boolean',1,'p_expresionBoolean','grammar.py',202),
  ('expresion_boolean -> FALSE','expresion_boolean',1,'p_expresionBoolean','grammar.py',203),
  ('definicion_instr -> VAR ID def_instr_prima','definicion_instr',3,'p_instruccion_definicion','grammar.py',209),
  ('def_instr_prima -> PTCOMA','def_instr_prima',1,'p_instrDef_prima','grammar.py',214),
  ('def_instr_prima -> empty','def_instr_prima',1,'p_instrDef_prima','grammar.py',215),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',220),
  ('asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima','asignacion_instr',4,'p_asignacion_instr','grammar.py',225),
  ('asign_expresion_general -> expresion_numerica','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',230),
  ('asign_expresion_general -> expresion_cadena','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',231),
  ('asign_expresion_general -> expresion_id','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',232),
  ('asign_expresion_general -> expresion_boolean','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',233),
  ('def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima','def_asig_instr',5,'p_definicion_asignacion','grammar.py',238),
  ('asign_def_expresion_general -> expresion_numerica','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',243),
  ('asign_def_expresion_general -> expresion_cadena','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',244),
  ('asign_def_expresion_general -> expresion_id','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',245),
  ('asign_def_expresion_general -> expresion_boolean','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',246),
  ('mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','mientras_instr',7,'p_mientras_instr','grammar.py',251),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','grammar.py',256),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','grammar.py',261),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',266),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',267),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',268),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',269),
  ('expresion_numerica -> expresion_numerica ELEVADO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',270),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','grammar.py',289),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','grammar.py',294),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','grammar.py',299),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','grammar.py',300),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','grammar.py',305),
  ('expresion_cadena -> expresion_cadena CONCAT expresion_cadena','expresion_cadena',3,'p_expresion_concatenacion','grammar.py',310),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','grammar.py',315),
  ('expresion_cadena -> expresion_numerica','expresion_cadena',1,'p_expresion_cadena_numerico','grammar.py',320),
  ('expresion_logica -> expresion_numerica MAYQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',325),
  ('expresion_logica -> expresion_numerica MENQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',326),
  ('expresion_logica -> expresion_numerica IGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',327),
  ('expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',328),
]
