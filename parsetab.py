
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftMASMENOSleftPORDIVIDIDOrightUMENOSCADENA CONCAT DECIMAL DIVIDIDO ELSE ENTERO ID IF IGUAL IGUALQUE LLAVDER LLAVIZQ MAS MAYQUE MENOS MENQUE MIENTRAS NIGUALQUE PARDER PARIZQ POR PRINT PTCOMA VARinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion instruccion      : imprimir_instr\n                        | definicion_instr\n                        | asignacion_instr\n                        | def_asig_instr\n                        | mientras_instr\n                        | if_instr\n                        | if_else_instrimprimir_instr     : PRINT PARIZQ print_expresion_general PARDER PTCOMAprint_expresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | expresion_idexpresion_id   : IDdefinicion_instr   : VAR ID PTCOMAasignacion_instr   : ID IGUAL asign_expresion_general PTCOMAasign_expresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | expresion_iddef_asig_instr     : VAR ID IGUAL expresion_numerica PTCOMAmientras_instr     : MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion_numerica MAS expresion_numerica\n                        | expresion_numerica MENOS expresion_numerica\n                        | expresion_numerica POR expresion_numerica\n                        | expresion_numerica DIVIDIDO expresion_numericaexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n                        | DECIMALexpresion_numerica   : IDexpresion_cadena     : expresion_cadena CONCAT expresion_cadenaexpresion_cadena     : CADENAexpresion_cadena     : expresion_numericaexpresion_logica : expresion_numerica MAYQUE expresion_numerica\n                        | expresion_numerica MENQUE expresion_numerica\n                        | expresion_numerica IGUALQUE expresion_numerica\n                        | expresion_numerica NIGUALQUE expresion_numerica'
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,8,9,10,16,32,51,59,66,67,72,73,74,75,76,78,79,80,],[11,11,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-21,11,11,11,11,-22,-23,11,11,-24,]),'VAR':([0,2,3,4,5,6,7,8,9,10,16,32,51,59,66,67,72,73,74,75,76,78,79,80,],[12,12,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-21,12,12,12,12,-22,-23,12,12,-24,]),'ID':([0,2,3,4,5,6,7,8,9,10,12,16,17,19,20,21,22,27,32,33,44,45,46,47,48,51,53,54,55,56,59,66,67,72,73,74,75,76,78,79,80,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,18,-2,30,30,40,40,40,40,-16,40,40,40,40,40,40,-17,40,40,40,40,-11,-21,13,13,13,13,-22,-23,13,13,-24,]),'MIENTRAS':([0,2,3,4,5,6,7,8,9,10,16,32,51,59,66,67,72,73,74,75,76,78,79,80,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-21,14,14,14,14,-22,-23,14,14,-24,]),'IF':([0,2,3,4,5,6,7,8,9,10,16,32,51,59,66,67,72,73,74,75,76,78,79,80,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-21,15,15,15,15,-22,-23,15,15,-24,]),'$end':([1,2,3,4,5,6,7,8,9,10,16,32,51,59,66,75,76,80,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-21,-22,-23,-24,]),'LLAVDER':([3,4,5,6,7,8,9,10,16,32,51,59,66,73,74,75,76,79,80,],[-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-21,75,76,-22,-23,80,-24,]),'PARIZQ':([11,14,15,17,19,20,21,22,27,33,44,45,46,47,48,53,54,55,56,],[17,20,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'IGUAL':([13,18,],[19,33,]),'MENOS':([17,19,20,21,22,24,27,28,29,30,33,35,39,40,42,44,45,46,47,48,49,50,53,54,55,56,58,60,61,62,63,65,68,69,70,71,],[27,27,27,27,27,45,27,-31,-32,-33,27,45,45,-33,45,27,27,27,27,27,-29,45,27,27,27,27,-30,-25,-26,-27,-28,45,45,45,45,45,]),'ENTERO':([17,19,20,21,22,27,33,44,45,46,47,48,53,54,55,56,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'DECIMAL':([17,19,20,21,22,27,33,44,45,46,47,48,53,54,55,56,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CADENA':([17,19,48,],[31,31,31,]),'PTCOMA':([18,28,29,30,31,34,35,36,37,40,43,49,50,58,60,61,62,63,64,65,],[32,-31,-32,-15,-35,51,-18,-19,-20,-33,59,-29,66,-30,-25,-26,-27,-28,-34,-36,]),'PARDER':([23,24,25,26,28,29,30,31,38,40,41,42,49,58,60,61,62,63,64,65,68,69,70,71,],[43,-12,-13,-14,-31,-32,-15,-35,52,-33,57,58,-29,-30,-25,-26,-27,-28,-34,-36,-37,-38,-39,-40,]),'MAS':([24,28,29,30,35,39,40,42,49,50,58,60,61,62,63,65,68,69,70,71,],[44,-31,-32,-33,44,44,-33,44,-29,44,-30,-25,-26,-27,-28,44,44,44,44,44,]),'POR':([24,28,29,30,35,39,40,42,49,50,58,60,61,62,63,65,68,69,70,71,],[46,-31,-32,-33,46,46,-33,46,-29,46,-30,46,46,-27,-28,46,46,46,46,46,]),'DIVIDIDO':([24,28,29,30,35,39,40,42,49,50,58,60,61,62,63,65,68,69,70,71,],[47,-31,-32,-33,47,47,-33,47,-29,47,-30,47,47,-27,-28,47,47,47,47,47,]),'CONCAT':([24,25,28,29,30,31,35,36,40,49,58,60,61,62,63,64,65,],[-36,48,-31,-32,-33,-35,-36,48,-33,-29,-30,-25,-26,-27,-28,-34,-36,]),'MAYQUE':([28,29,39,40,49,58,60,61,62,63,],[-31,-32,53,-33,-29,-30,-25,-26,-27,-28,]),'MENQUE':([28,29,39,40,49,58,60,61,62,63,],[-31,-32,54,-33,-29,-30,-25,-26,-27,-28,]),'IGUALQUE':([28,29,39,40,49,58,60,61,62,63,],[-31,-32,55,-33,-29,-30,-25,-26,-27,-28,]),'NIGUALQUE':([28,29,39,40,49,58,60,61,62,63,],[-31,-32,56,-33,-29,-30,-25,-26,-27,-28,]),'LLAVIZQ':([52,57,77,],[67,72,78,]),'ELSE':([76,],[77,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,67,72,78,],[2,73,74,79,]),'instruccion':([0,2,67,72,73,74,78,79,],[3,16,3,3,16,16,3,16,]),'imprimir_instr':([0,2,67,72,73,74,78,79,],[4,4,4,4,4,4,4,4,]),'definicion_instr':([0,2,67,72,73,74,78,79,],[5,5,5,5,5,5,5,5,]),'asignacion_instr':([0,2,67,72,73,74,78,79,],[6,6,6,6,6,6,6,6,]),'def_asig_instr':([0,2,67,72,73,74,78,79,],[7,7,7,7,7,7,7,7,]),'mientras_instr':([0,2,67,72,73,74,78,79,],[8,8,8,8,8,8,8,8,]),'if_instr':([0,2,67,72,73,74,78,79,],[9,9,9,9,9,9,9,9,]),'if_else_instr':([0,2,67,72,73,74,78,79,],[10,10,10,10,10,10,10,10,]),'print_expresion_general':([17,],[23,]),'expresion_numerica':([17,19,20,21,22,27,33,44,45,46,47,48,53,54,55,56,],[24,35,39,39,42,49,50,60,61,62,63,65,68,69,70,71,]),'expresion_cadena':([17,19,48,],[25,36,64,]),'expresion_id':([17,19,],[26,37,]),'asign_expresion_general':([19,],[34,]),'expresion_logica':([20,21,],[38,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',139),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',144),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',150),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','grammar.py',155),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','grammar.py',156),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','grammar.py',157),
  ('instruccion -> def_asig_instr','instruccion',1,'p_instruccion','grammar.py',158),
  ('instruccion -> mientras_instr','instruccion',1,'p_instruccion','grammar.py',159),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','grammar.py',160),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','grammar.py',161),
  ('imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER PTCOMA','imprimir_instr',5,'p_instruccion_imprimir','grammar.py',166),
  ('print_expresion_general -> expresion_numerica','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',171),
  ('print_expresion_general -> expresion_cadena','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',172),
  ('print_expresion_general -> expresion_id','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',173),
  ('expresion_id -> ID','expresion_id',1,'p_expresionId','grammar.py',178),
  ('definicion_instr -> VAR ID PTCOMA','definicion_instr',3,'p_instruccion_definicion','grammar.py',183),
  ('asignacion_instr -> ID IGUAL asign_expresion_general PTCOMA','asignacion_instr',4,'p_asignacion_instr','grammar.py',188),
  ('asign_expresion_general -> expresion_numerica','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',193),
  ('asign_expresion_general -> expresion_cadena','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',194),
  ('asign_expresion_general -> expresion_id','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',195),
  ('def_asig_instr -> VAR ID IGUAL expresion_numerica PTCOMA','def_asig_instr',5,'p_definicion_asignacion','grammar.py',200),
  ('mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','mientras_instr',7,'p_mientras_instr','grammar.py',205),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','grammar.py',210),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','grammar.py',215),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',220),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',221),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',222),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',223),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','grammar.py',235),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','grammar.py',240),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','grammar.py',245),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','grammar.py',246),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','grammar.py',251),
  ('expresion_cadena -> expresion_cadena CONCAT expresion_cadena','expresion_cadena',3,'p_expresion_concatenacion','grammar.py',256),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','grammar.py',261),
  ('expresion_cadena -> expresion_numerica','expresion_cadena',1,'p_expresion_cadena_numerico','grammar.py',266),
  ('expresion_logica -> expresion_numerica MAYQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',271),
  ('expresion_logica -> expresion_numerica MENQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',272),
  ('expresion_logica -> expresion_numerica IGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',273),
  ('expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',274),
]
