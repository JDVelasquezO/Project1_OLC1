
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftMASMENOSleftPORDIVIDIDOrightUMENOSCADENA CONCAT DECIMAL DIVIDIDO ELSE ENTERO ID IF IGUAL IGUALQUE LLAVDER LLAVIZQ MAS MAYQUE MENOS MENQUE MIENTRAS NIGUALQUE PARDER PARIZQ POR PRINT PTCOMA VARinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion instruccion      : imprimir_instr\n                        | definicion_instr\n                        | asignacion_instr\n                        | def_asig_instr\n                        | mientras_instr\n                        | if_instr\n                        | if_else_instrimprimir_instr     : PRINT PARIZQ print_expresion_general PARDER PTCOMAprint_expresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | expresion_idexpresion_id   : IDdefinicion_instr   : VAR ID def_instr_primadef_instr_prima   : PTCOMA\n                        | emptyempty :asignacion_instr   : ID IGUAL asign_expresion_general def_instr_primaasign_expresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | expresion_iddef_asig_instr     : VAR ID IGUAL asign_def_expresion_general def_instr_primaasign_def_expresion_general  :  expresion_numerica\n                                | expresion_cadena\n                                | expresion_idmientras_instr     : MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion_numerica MAS expresion_numerica\n                        | expresion_numerica MENOS expresion_numerica\n                        | expresion_numerica POR expresion_numerica\n                        | expresion_numerica DIVIDIDO expresion_numericaexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n                        | DECIMALexpresion_numerica   : IDexpresion_cadena     : expresion_cadena CONCAT expresion_cadenaexpresion_cadena     : CADENAexpresion_cadena     : expresion_numericaexpresion_logica : expresion_numerica MAYQUE expresion_numerica\n                        | expresion_numerica MENQUE expresion_numerica\n                        | expresion_numerica IGUALQUE expresion_numerica\n                        | expresion_numerica NIGUALQUE expresion_numerica'
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,8,9,10,16,18,28,29,30,31,32,34,35,36,37,38,39,42,51,52,53,54,55,56,63,64,65,66,67,68,69,70,71,72,77,78,79,80,81,83,84,85,],[11,11,-3,-4,-5,-6,-7,-8,-9,-10,-2,-19,-37,-38,-15,-41,-16,-17,-18,-19,-21,-22,-23,-39,-35,-19,-25,-26,-27,-20,-36,-11,-31,-32,-33,-34,-40,-42,-24,11,11,11,11,-28,-29,11,11,-30,]),'VAR':([0,2,3,4,5,6,7,8,9,10,16,18,28,29,30,31,32,34,35,36,37,38,39,42,51,52,53,54,55,56,63,64,65,66,67,68,69,70,71,72,77,78,79,80,81,83,84,85,],[12,12,-3,-4,-5,-6,-7,-8,-9,-10,-2,-19,-37,-38,-15,-41,-16,-17,-18,-19,-21,-22,-23,-39,-35,-19,-25,-26,-27,-20,-36,-11,-31,-32,-33,-34,-40,-42,-24,12,12,12,12,-28,-29,12,12,-30,]),'ID':([0,2,3,4,5,6,7,8,9,10,12,16,17,18,19,20,21,22,27,28,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,63,64,65,66,67,68,69,70,71,72,77,78,79,80,81,83,84,85,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,18,-2,30,-19,30,42,42,42,42,-37,-38,-15,-41,-16,30,-17,-18,-19,-21,-22,-23,-39,42,42,42,42,42,-35,-19,-25,-26,-27,-20,42,42,42,42,-36,-11,-31,-32,-33,-34,-40,-42,-24,13,13,13,13,-28,-29,13,13,-30,]),'MIENTRAS':([0,2,3,4,5,6,7,8,9,10,16,18,28,29,30,31,32,34,35,36,37,38,39,42,51,52,53,54,55,56,63,64,65,66,67,68,69,70,71,72,77,78,79,80,81,83,84,85,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-2,-19,-37,-38,-15,-41,-16,-17,-18,-19,-21,-22,-23,-39,-35,-19,-25,-26,-27,-20,-36,-11,-31,-32,-33,-34,-40,-42,-24,14,14,14,14,-28,-29,14,14,-30,]),'IF':([0,2,3,4,5,6,7,8,9,10,16,18,28,29,30,31,32,34,35,36,37,38,39,42,51,52,53,54,55,56,63,64,65,66,67,68,69,70,71,72,77,78,79,80,81,83,84,85,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-2,-19,-37,-38,-15,-41,-16,-17,-18,-19,-21,-22,-23,-39,-35,-19,-25,-26,-27,-20,-36,-11,-31,-32,-33,-34,-40,-42,-24,15,15,15,15,-28,-29,15,15,-30,]),'$end':([1,2,3,4,5,6,7,8,9,10,16,18,28,29,30,31,32,34,35,36,37,38,39,42,51,52,53,54,55,56,63,64,65,66,67,68,69,70,71,80,81,85,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-2,-19,-37,-38,-15,-41,-16,-17,-18,-19,-21,-22,-23,-39,-35,-19,-25,-26,-27,-20,-36,-11,-31,-32,-33,-34,-40,-42,-24,-28,-29,-30,]),'LLAVDER':([3,4,5,6,7,8,9,10,16,18,28,29,30,31,32,34,35,36,37,38,39,42,51,52,53,54,55,56,63,64,65,66,67,68,69,70,71,78,79,80,81,84,85,],[-3,-4,-5,-6,-7,-8,-9,-10,-2,-19,-37,-38,-15,-41,-16,-17,-18,-19,-21,-22,-23,-39,-35,-19,-25,-26,-27,-20,-36,-11,-31,-32,-33,-34,-40,-42,-24,80,81,-28,-29,85,-30,]),'PARIZQ':([11,14,15,17,19,20,21,22,27,33,46,47,48,49,50,58,59,60,61,],[17,20,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'IGUAL':([13,18,],[19,33,]),'MENOS':([17,19,20,21,22,24,27,28,29,30,33,37,41,42,44,46,47,48,49,50,51,53,58,59,60,61,63,65,66,67,68,70,73,74,75,76,],[27,27,27,27,27,47,27,-37,-38,-39,27,47,47,-39,47,27,27,27,27,27,-35,47,27,27,27,27,-36,-31,-32,-33,-34,47,47,47,47,47,]),'ENTERO':([17,19,20,21,22,27,33,46,47,48,49,50,58,59,60,61,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'DECIMAL':([17,19,20,21,22,27,33,46,47,48,49,50,58,59,60,61,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CADENA':([17,19,33,50,],[31,31,31,31,]),'PTCOMA':([18,28,29,30,31,36,37,38,39,42,45,51,52,53,54,55,63,65,66,67,68,69,70,],[34,-37,-38,-15,-41,34,-21,-22,-23,-39,64,-35,34,-25,-26,-27,-36,-31,-32,-33,-34,-40,-42,]),'PARDER':([23,24,25,26,28,29,30,31,40,42,43,44,51,63,65,66,67,68,69,70,73,74,75,76,],[45,-12,-13,-14,-37,-38,-15,-41,57,-39,62,63,-35,-36,-31,-32,-33,-34,-40,-42,-43,-44,-45,-46,]),'MAS':([24,28,29,30,37,41,42,44,51,53,63,65,66,67,68,70,73,74,75,76,],[46,-37,-38,-39,46,46,-39,46,-35,46,-36,-31,-32,-33,-34,46,46,46,46,46,]),'POR':([24,28,29,30,37,41,42,44,51,53,63,65,66,67,68,70,73,74,75,76,],[48,-37,-38,-39,48,48,-39,48,-35,48,-36,48,48,-33,-34,48,48,48,48,48,]),'DIVIDIDO':([24,28,29,30,37,41,42,44,51,53,63,65,66,67,68,70,73,74,75,76,],[49,-37,-38,-39,49,49,-39,49,-35,49,-36,49,49,-33,-34,49,49,49,49,49,]),'CONCAT':([24,25,28,29,30,31,37,38,42,51,53,54,63,65,66,67,68,69,70,],[-42,50,-37,-38,-39,-41,-42,50,-39,-35,-42,50,-36,-31,-32,-33,-34,-40,-42,]),'MAYQUE':([28,29,41,42,51,63,65,66,67,68,],[-37,-38,58,-39,-35,-36,-31,-32,-33,-34,]),'MENQUE':([28,29,41,42,51,63,65,66,67,68,],[-37,-38,59,-39,-35,-36,-31,-32,-33,-34,]),'IGUALQUE':([28,29,41,42,51,63,65,66,67,68,],[-37,-38,60,-39,-35,-36,-31,-32,-33,-34,]),'NIGUALQUE':([28,29,41,42,51,63,65,66,67,68,],[-37,-38,61,-39,-35,-36,-31,-32,-33,-34,]),'LLAVIZQ':([57,62,82,],[72,77,83,]),'ELSE':([81,],[82,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,72,77,83,],[2,78,79,84,]),'instruccion':([0,2,72,77,78,79,83,84,],[3,16,3,3,16,16,3,16,]),'imprimir_instr':([0,2,72,77,78,79,83,84,],[4,4,4,4,4,4,4,4,]),'definicion_instr':([0,2,72,77,78,79,83,84,],[5,5,5,5,5,5,5,5,]),'asignacion_instr':([0,2,72,77,78,79,83,84,],[6,6,6,6,6,6,6,6,]),'def_asig_instr':([0,2,72,77,78,79,83,84,],[7,7,7,7,7,7,7,7,]),'mientras_instr':([0,2,72,77,78,79,83,84,],[8,8,8,8,8,8,8,8,]),'if_instr':([0,2,72,77,78,79,83,84,],[9,9,9,9,9,9,9,9,]),'if_else_instr':([0,2,72,77,78,79,83,84,],[10,10,10,10,10,10,10,10,]),'print_expresion_general':([17,],[23,]),'expresion_numerica':([17,19,20,21,22,27,33,46,47,48,49,50,58,59,60,61,],[24,37,41,41,44,51,53,65,66,67,68,70,73,74,75,76,]),'expresion_cadena':([17,19,33,50,],[25,38,54,69,]),'expresion_id':([17,19,33,],[26,39,55,]),'def_instr_prima':([18,36,52,],[32,56,71,]),'empty':([18,36,52,],[35,35,35,]),'asign_expresion_general':([19,],[36,]),'expresion_logica':([20,21,],[40,43,]),'asign_def_expresion_general':([33,],[52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',139),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',144),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',150),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','grammar.py',155),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','grammar.py',156),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','grammar.py',157),
  ('instruccion -> def_asig_instr','instruccion',1,'p_instruccion','grammar.py',158),
  ('instruccion -> mientras_instr','instruccion',1,'p_instruccion','grammar.py',159),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','grammar.py',160),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','grammar.py',161),
  ('imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER PTCOMA','imprimir_instr',5,'p_instruccion_imprimir','grammar.py',166),
  ('print_expresion_general -> expresion_numerica','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',171),
  ('print_expresion_general -> expresion_cadena','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',172),
  ('print_expresion_general -> expresion_id','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',173),
  ('expresion_id -> ID','expresion_id',1,'p_expresionId','grammar.py',178),
  ('definicion_instr -> VAR ID def_instr_prima','definicion_instr',3,'p_instruccion_definicion','grammar.py',183),
  ('def_instr_prima -> PTCOMA','def_instr_prima',1,'p_instrDef_prima','grammar.py',188),
  ('def_instr_prima -> empty','def_instr_prima',1,'p_instrDef_prima','grammar.py',189),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',194),
  ('asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima','asignacion_instr',4,'p_asignacion_instr','grammar.py',199),
  ('asign_expresion_general -> expresion_numerica','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',204),
  ('asign_expresion_general -> expresion_cadena','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',205),
  ('asign_expresion_general -> expresion_id','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',206),
  ('def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima','def_asig_instr',5,'p_definicion_asignacion','grammar.py',211),
  ('asign_def_expresion_general -> expresion_numerica','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',216),
  ('asign_def_expresion_general -> expresion_cadena','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',217),
  ('asign_def_expresion_general -> expresion_id','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',218),
  ('mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','mientras_instr',7,'p_mientras_instr','grammar.py',223),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','grammar.py',228),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','grammar.py',233),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',238),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',239),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',240),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',241),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','grammar.py',253),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','grammar.py',258),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','grammar.py',263),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','grammar.py',264),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','grammar.py',269),
  ('expresion_cadena -> expresion_cadena CONCAT expresion_cadena','expresion_cadena',3,'p_expresion_concatenacion','grammar.py',274),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','grammar.py',279),
  ('expresion_cadena -> expresion_numerica','expresion_cadena',1,'p_expresion_cadena_numerico','grammar.py',284),
  ('expresion_logica -> expresion_numerica MAYQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',289),
  ('expresion_logica -> expresion_numerica MENQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',290),
  ('expresion_logica -> expresion_numerica IGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',291),
  ('expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',292),
]
