
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftMASMENOSleftPORDIVIDIDOMODleftELEVADOrightUMENOSCADENA CHAR CONCAT DECIMAL DIVIDIDO ELEVADO ELSE ENTERO FALSE ID IF IGUAL IGUALQUE LLAVDER LLAVIZQ MAIN MAS MAYQUE MENOS MENQUE MIENTRAS MOD NIGUALQUE PARDER PARIZQ POR PRINT PTCOMA TRUE VARinit       : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion\n                         | emptyinstruccion      : func_main\n                        | imprimir_instr\n                        | definicion_instr\n                        | asignacion_instr\n                        | def_asig_instr\n                        | mientras_instr\n                        | if_instr\n                        | if_else_instrfunc_main  : MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDERimprimir_instr     : PRINT PARIZQ print_expresion_general PARDER def_instr_primaprint_expresion_general  :  expresion_numerica\n                                | expresion_cadena\n                                | expresion_id\n                                | expresion_boolean\n                                | expresion_charexpresion_id   : IDexpresion_boolean  : TRUE\n                          | FALSEdefinicion_instr   : VAR ID def_instr_primadef_instr_prima   : PTCOMA\n                        | emptyempty :asignacion_instr   : ID IGUAL asign_expresion_general def_instr_primaasign_expresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | expresion_id\n                            | expresion_boolean\n                            | expresion_chardef_asig_instr     : VAR ID IGUAL asign_def_expresion_general def_instr_primaasign_def_expresion_general  :  expresion_numerica\n                                    | expresion_cadena\n                                    | expresion_id\n                                    | expresion_boolean\n                                    | expresion_charmientras_instr     : MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion_numerica MAS expresion_numerica\n                        | expresion_numerica MENOS expresion_numerica\n                        | expresion_numerica POR expresion_numerica\n                        | expresion_numerica DIVIDIDO expresion_numerica\n                        | expresion_numerica ELEVADO expresion_numerica\n                        | expresion_numerica MOD expresion_numerica\n                        | expresion_numerica MAS expresion_char\n                        | expresion_cadena MAS expresion_cadena\n                        | expresion_cadena MAS expresion_numerica\n                        | expresion_cadena MAS expresion_char\n                        | expresion_numerica MAS expresion_cadena\n                        | expresion_char MAS expresion_char\n                        | expresion_char MAS expresion_cadena\n                        | expresion_char MAS expresion_numericaexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n                        | DECIMALexpresion_numerica   : IDexpresion_char   : CHARexpresion_cadena     : CADENAexpresion_cadena     : expresion_numericaexpresion_logica : expresion_numerica MAYQUE expresion_numerica\n                        | expresion_numerica MENQUE expresion_numerica\n                        | expresion_numerica IGUALQUE expresion_numerica\n                        | expresion_numerica NIGUALQUE expresion_numerica'
    
_lr_action_items = {'MAIN':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,56,58,60,69,70,71,72,73,74,75,76,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,107,108,109,110,111,113,114,115,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-26,-58,-59,-20,-62,-21,-22,-61,-23,-24,-25,-26,-28,-29,-30,-31,-32,-60,13,-26,-56,-26,-34,-35,-36,-37,-38,-27,13,-57,-14,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,-33,13,13,-13,13,13,-39,-40,13,13,-41,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,56,58,60,69,70,71,72,73,74,75,76,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,107,108,109,110,111,113,114,115,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-26,-58,-59,-20,-62,-21,-22,-61,-23,-24,-25,-26,-28,-29,-30,-31,-32,-60,14,-26,-56,-26,-34,-35,-36,-37,-38,-27,14,-57,-14,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,-33,14,14,-13,14,14,-39,-40,14,14,-41,]),'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,56,58,60,69,70,71,72,73,74,75,76,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,107,108,109,110,111,113,114,115,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-26,-58,-59,-20,-62,-21,-22,-61,-23,-24,-25,-26,-28,-29,-30,-31,-32,-60,15,-26,-56,-26,-34,-35,-36,-37,-38,-27,15,-57,-14,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,-33,15,15,-13,15,15,-39,-40,15,15,-41,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,15,19,21,22,23,24,25,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,56,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,107,108,109,110,111,113,114,115,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,22,-2,37,-26,37,56,56,56,56,-58,-59,-20,-62,-21,-22,-61,-23,37,-24,-25,-26,-28,-29,-30,-31,-32,-60,16,-26,56,56,56,56,56,56,56,56,-56,-26,-34,-35,-36,-37,-38,-27,56,56,56,56,16,-57,-14,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,-33,16,16,-13,16,16,-39,-40,16,16,-41,]),'MIENTRAS':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,56,58,60,69,70,71,72,73,74,75,76,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,107,108,109,110,111,113,114,115,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-26,-58,-59,-20,-62,-21,-22,-61,-23,-24,-25,-26,-28,-29,-30,-31,-32,-60,17,-26,-56,-26,-34,-35,-36,-37,-38,-27,17,-57,-14,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,-33,17,17,-13,17,17,-39,-40,17,17,-41,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,56,58,60,69,70,71,72,73,74,75,76,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,107,108,109,110,111,113,114,115,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-26,-58,-59,-20,-62,-21,-22,-61,-23,-24,-25,-26,-28,-29,-30,-31,-32,-60,18,-26,-56,-26,-34,-35,-36,-37,-38,-27,18,-57,-14,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,-33,18,18,-13,18,18,-39,-40,18,18,-41,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,56,60,69,70,71,72,73,74,75,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,110,111,115,],[-26,0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-26,-58,-59,-20,-62,-21,-22,-61,-23,-24,-25,-26,-28,-29,-30,-31,-32,-60,-26,-56,-26,-34,-35,-36,-37,-38,-27,-57,-14,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,-33,-13,-39,-40,-41,]),'LLAVDER':([3,4,5,6,7,8,9,10,11,12,19,22,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,56,58,60,69,70,71,72,73,74,75,76,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,107,108,109,110,111,113,114,115,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-26,-58,-59,-20,-62,-21,-22,-61,-23,-24,-25,-26,-28,-29,-30,-31,-32,-60,-26,-26,-56,-26,-34,-35,-36,-37,-38,-27,107,-57,-14,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,-33,-26,-26,-13,110,111,-39,-40,-26,115,-41,]),'PARIZQ':([13,14,17,18,21,23,24,25,27,34,43,61,62,63,64,65,66,67,68,78,79,80,81,],[20,21,24,25,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'IGUAL':([16,22,],[23,43,]),'PARDER':([20,28,29,30,31,32,33,35,36,37,38,39,40,41,52,56,57,59,69,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,105,],[26,60,-15,-16,-17,-18,-19,-58,-59,-20,-62,-21,-22,-61,77,-60,82,84,-56,-57,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,-64,-65,-66,-67,]),'MENOS':([21,23,24,25,27,29,34,35,36,37,38,41,43,47,53,56,59,61,62,63,64,65,66,67,68,69,71,78,79,80,81,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,105,],[34,34,34,34,34,62,34,-58,-59,-60,-62,-61,34,62,62,-60,62,34,34,34,34,34,34,34,34,-56,62,34,34,34,34,-57,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,62,62,62,62,]),'ENTERO':([21,23,24,25,27,34,43,61,62,63,64,65,66,67,68,78,79,80,81,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'DECIMAL':([21,23,24,25,27,34,43,61,62,63,64,65,66,67,68,78,79,80,81,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'CADENA':([21,23,24,25,27,34,43,61,62,63,64,65,66,67,68,78,79,80,81,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'TRUE':([21,23,43,],[39,39,39,]),'FALSE':([21,23,43,],[40,40,40,]),'CHAR':([21,23,24,25,27,34,43,61,62,63,64,65,66,67,68,78,79,80,81,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'PTCOMA':([22,35,36,37,38,39,40,41,46,47,48,49,50,51,56,60,69,70,71,72,73,74,75,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[44,-58,-59,-20,-62,-21,-22,-61,44,-28,-29,-30,-31,-32,-60,44,-56,44,-34,-35,-36,-37,-38,-57,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,]),'LLAVIZQ':([26,77,82,112,],[58,101,106,113,]),'MAS':([29,30,33,35,36,37,38,41,47,48,51,53,54,55,56,59,69,71,72,75,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,105,],[61,67,68,-58,-59,-60,-62,-61,61,67,68,61,68,67,-60,61,-56,61,67,68,-57,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,61,61,61,61,]),'POR':([29,35,36,37,38,41,47,53,56,59,69,71,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,105,],[63,-58,-59,-60,-62,-61,63,63,-60,63,-56,63,-57,63,-48,-52,63,-44,-45,-46,-47,-49,63,-51,-53,-54,63,63,63,63,63,]),'DIVIDIDO':([29,35,36,37,38,41,47,53,56,59,69,71,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,105,],[64,-58,-59,-60,-62,-61,64,64,-60,64,-56,64,-57,64,-48,-52,64,-44,-45,-46,-47,-49,64,-51,-53,-54,64,64,64,64,64,]),'ELEVADO':([29,35,36,37,38,41,47,53,56,59,69,71,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,105,],[65,-58,-59,-60,-62,-61,65,65,-60,65,-56,65,-57,65,-48,-52,65,65,65,-46,65,-49,65,-51,-53,-54,65,65,65,65,65,]),'MOD':([29,35,36,37,38,41,47,53,56,59,69,71,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,105,],[66,-58,-59,-60,-62,-61,66,66,-60,66,-56,66,-57,66,-48,-52,66,-44,-45,-46,-47,-49,66,-51,-53,-54,66,66,66,66,66,]),'MAYQUE':([35,36,38,41,53,56,69,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[-58,-59,-62,-61,78,-60,-56,-57,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,]),'MENQUE':([35,36,38,41,53,56,69,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[-58,-59,-62,-61,79,-60,-56,-57,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,]),'IGUALQUE':([35,36,38,41,53,56,69,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[-58,-59,-62,-61,80,-60,-56,-57,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,]),'NIGUALQUE':([35,36,38,41,53,56,69,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[-58,-59,-62,-61,81,-60,-56,-57,-42,-48,-52,-43,-44,-45,-46,-47,-49,-50,-51,-53,-54,-55,]),'ELSE':([111,],[112,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,58,101,106,113,],[2,83,108,109,114,]),'instruccion':([0,2,58,83,101,106,108,109,113,114,],[3,19,3,19,3,3,19,19,3,19,]),'empty':([0,22,46,58,60,70,101,106,113,],[4,45,45,4,45,45,4,4,4,]),'func_main':([0,2,58,83,101,106,108,109,113,114,],[5,5,5,5,5,5,5,5,5,5,]),'imprimir_instr':([0,2,58,83,101,106,108,109,113,114,],[6,6,6,6,6,6,6,6,6,6,]),'definicion_instr':([0,2,58,83,101,106,108,109,113,114,],[7,7,7,7,7,7,7,7,7,7,]),'asignacion_instr':([0,2,58,83,101,106,108,109,113,114,],[8,8,8,8,8,8,8,8,8,8,]),'def_asig_instr':([0,2,58,83,101,106,108,109,113,114,],[9,9,9,9,9,9,9,9,9,9,]),'mientras_instr':([0,2,58,83,101,106,108,109,113,114,],[10,10,10,10,10,10,10,10,10,10,]),'if_instr':([0,2,58,83,101,106,108,109,113,114,],[11,11,11,11,11,11,11,11,11,11,]),'if_else_instr':([0,2,58,83,101,106,108,109,113,114,],[12,12,12,12,12,12,12,12,12,12,]),'print_expresion_general':([21,],[28,]),'expresion_numerica':([21,23,24,25,27,34,43,61,62,63,64,65,66,67,68,78,79,80,81,],[29,47,53,53,59,69,71,86,89,90,91,92,93,95,99,102,103,104,105,]),'expresion_cadena':([21,23,24,25,27,34,43,61,62,63,64,65,66,67,68,78,79,80,81,],[30,48,55,55,55,55,72,88,55,55,55,55,55,94,98,55,55,55,55,]),'expresion_id':([21,23,43,],[31,49,73,]),'expresion_boolean':([21,23,43,],[32,50,74,]),'expresion_char':([21,23,24,25,27,34,43,61,62,63,64,65,66,67,68,78,79,80,81,],[33,51,54,54,54,54,75,87,54,54,54,54,54,96,97,54,54,54,54,]),'def_instr_prima':([22,46,60,70,],[42,76,85,100,]),'asign_expresion_general':([23,],[46,]),'expresion_logica':([24,25,],[52,57,]),'asign_def_expresion_general':([43,],[70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',156),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',161),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',167),
  ('instrucciones -> empty','instrucciones',1,'p_instrucciones_instruccion','grammar.py',168),
  ('instruccion -> func_main','instruccion',1,'p_instruccion','grammar.py',173),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','grammar.py',174),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','grammar.py',175),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','grammar.py',176),
  ('instruccion -> def_asig_instr','instruccion',1,'p_instruccion','grammar.py',177),
  ('instruccion -> mientras_instr','instruccion',1,'p_instruccion','grammar.py',178),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','grammar.py',179),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','grammar.py',180),
  ('func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER','func_main',6,'p_func_main','grammar.py',192),
  ('imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima','imprimir_instr',5,'p_instruccion_imprimir','grammar.py',197),
  ('print_expresion_general -> expresion_numerica','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',202),
  ('print_expresion_general -> expresion_cadena','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',203),
  ('print_expresion_general -> expresion_id','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',204),
  ('print_expresion_general -> expresion_boolean','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',205),
  ('print_expresion_general -> expresion_char','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',206),
  ('expresion_id -> ID','expresion_id',1,'p_expresionId','grammar.py',211),
  ('expresion_boolean -> TRUE','expresion_boolean',1,'p_expresionBoolean','grammar.py',216),
  ('expresion_boolean -> FALSE','expresion_boolean',1,'p_expresionBoolean','grammar.py',217),
  ('definicion_instr -> VAR ID def_instr_prima','definicion_instr',3,'p_instruccion_definicion','grammar.py',223),
  ('def_instr_prima -> PTCOMA','def_instr_prima',1,'p_instrDef_prima','grammar.py',228),
  ('def_instr_prima -> empty','def_instr_prima',1,'p_instrDef_prima','grammar.py',229),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',234),
  ('asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima','asignacion_instr',4,'p_asignacion_instr','grammar.py',239),
  ('asign_expresion_general -> expresion_numerica','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',244),
  ('asign_expresion_general -> expresion_cadena','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',245),
  ('asign_expresion_general -> expresion_id','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',246),
  ('asign_expresion_general -> expresion_boolean','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',247),
  ('asign_expresion_general -> expresion_char','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',248),
  ('def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima','def_asig_instr',5,'p_definicion_asignacion','grammar.py',253),
  ('asign_def_expresion_general -> expresion_numerica','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',258),
  ('asign_def_expresion_general -> expresion_cadena','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',259),
  ('asign_def_expresion_general -> expresion_id','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',260),
  ('asign_def_expresion_general -> expresion_boolean','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',261),
  ('asign_def_expresion_general -> expresion_char','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',262),
  ('mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','mientras_instr',7,'p_mientras_instr','grammar.py',267),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','grammar.py',272),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','grammar.py',277),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',282),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',283),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',284),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',285),
  ('expresion_numerica -> expresion_numerica ELEVADO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',286),
  ('expresion_numerica -> expresion_numerica MOD expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',287),
  ('expresion_numerica -> expresion_numerica MAS expresion_char','expresion_numerica',3,'p_expresion_binaria','grammar.py',288),
  ('expresion_numerica -> expresion_cadena MAS expresion_cadena','expresion_numerica',3,'p_expresion_binaria','grammar.py',289),
  ('expresion_numerica -> expresion_cadena MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',290),
  ('expresion_numerica -> expresion_cadena MAS expresion_char','expresion_numerica',3,'p_expresion_binaria','grammar.py',291),
  ('expresion_numerica -> expresion_numerica MAS expresion_cadena','expresion_numerica',3,'p_expresion_binaria','grammar.py',292),
  ('expresion_numerica -> expresion_char MAS expresion_char','expresion_numerica',3,'p_expresion_binaria','grammar.py',293),
  ('expresion_numerica -> expresion_char MAS expresion_cadena','expresion_numerica',3,'p_expresion_binaria','grammar.py',294),
  ('expresion_numerica -> expresion_char MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',295),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','grammar.py',316),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','grammar.py',321),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','grammar.py',326),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','grammar.py',327),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','grammar.py',332),
  ('expresion_char -> CHAR','expresion_char',1,'p_expresion_char','grammar.py',337),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','grammar.py',353),
  ('expresion_cadena -> expresion_numerica','expresion_cadena',1,'p_expresion_cadena_numerico','grammar.py',358),
  ('expresion_logica -> expresion_numerica MAYQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',363),
  ('expresion_logica -> expresion_numerica MENQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',364),
  ('expresion_logica -> expresion_numerica IGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',365),
  ('expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',366),
]
