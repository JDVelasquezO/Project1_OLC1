
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftMASMENOSleftPORDIVIDIDOrightUMENOSCADENA CONCAT DECIMAL DIVIDIDO ELSE ENTERO ID IF IGUAL IGUALQUE IMPRIMIR LLAVDER LLAVIZQ MAS MAYQUE MENOS MENQUE MIENTRAS NIGUALQUE PARDER PARIZQ POR PTCOMA VARinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion instruccion      : imprimir_instr\n                        | definicion_instr\n                        | asignacion_instr\n                        | mientras_instr\n                        | if_instr\n                        | if_else_instrimprimir_instr     : IMPRIMIR PARIZQ expresion_general PARDER PTCOMAexpresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | IDdefinicion_instr   : VAR ID PTCOMAasignacion_instr   : ID IGUAL expresion_numerica PTCOMAmientras_instr     : MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion_numerica MAS expresion_numerica\n                        | expresion_numerica MENOS expresion_numerica\n                        | expresion_numerica POR expresion_numerica\n                        | expresion_numerica DIVIDIDO expresion_numericaexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n                        | DECIMALexpresion_numerica   : IDexpresion_cadena     : expresion_cadena CONCAT expresion_cadenaexpresion_cadena     : CADENAexpresion_cadena     : expresion_numericaexpresion_logica : expresion_numerica MAYQUE expresion_numerica\n                        | expresion_numerica MENQUE expresion_numerica\n                        | expresion_numerica IGUALQUE expresion_numerica\n                        | expresion_numerica NIGUALQUE expresion_numerica'
    
_lr_action_items = {'IMPRIMIR':([0,2,3,4,5,6,7,8,9,15,30,44,52,59,64,65,66,67,68,70,71,72,],[10,10,-3,-4,-5,-6,-7,-8,-9,-2,-14,-15,-10,10,10,10,10,-16,-17,10,10,-18,]),'VAR':([0,2,3,4,5,6,7,8,9,15,30,44,52,59,64,65,66,67,68,70,71,72,],[11,11,-3,-4,-5,-6,-7,-8,-9,-2,-14,-15,-10,11,11,11,11,-16,-17,11,11,-18,]),'ID':([0,2,3,4,5,6,7,8,9,11,15,16,18,19,20,21,26,30,38,39,40,41,42,44,46,47,48,49,52,59,64,65,66,67,68,70,71,72,],[12,12,-3,-4,-5,-6,-7,-8,-9,17,-2,25,31,31,31,31,31,-14,31,31,31,31,31,-15,31,31,31,31,-10,12,12,12,12,-16,-17,12,12,-18,]),'MIENTRAS':([0,2,3,4,5,6,7,8,9,15,30,44,52,59,64,65,66,67,68,70,71,72,],[13,13,-3,-4,-5,-6,-7,-8,-9,-2,-14,-15,-10,13,13,13,13,-16,-17,13,13,-18,]),'IF':([0,2,3,4,5,6,7,8,9,15,30,44,52,59,64,65,66,67,68,70,71,72,],[14,14,-3,-4,-5,-6,-7,-8,-9,-2,-14,-15,-10,14,14,14,14,-16,-17,14,14,-18,]),'$end':([1,2,3,4,5,6,7,8,9,15,30,44,52,67,68,72,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-2,-14,-15,-10,-16,-17,-18,]),'LLAVDER':([3,4,5,6,7,8,9,15,30,44,52,65,66,67,68,71,72,],[-3,-4,-5,-6,-7,-8,-9,-2,-14,-15,-10,67,68,-16,-17,72,-18,]),'PARIZQ':([10,13,14,16,18,19,20,21,26,38,39,40,41,42,46,47,48,49,],[16,19,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'IGUAL':([12,],[18,]),'MENOS':([16,18,19,20,21,23,25,26,27,28,31,32,34,36,38,39,40,41,42,43,46,47,48,49,51,53,54,55,56,58,60,61,62,63,],[26,26,26,26,26,39,-27,26,-25,-26,-27,39,39,39,26,26,26,26,26,-23,26,26,26,26,-24,-19,-20,-21,-22,39,39,39,39,39,]),'ENTERO':([16,18,19,20,21,26,38,39,40,41,42,46,47,48,49,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'DECIMAL':([16,18,19,20,21,26,38,39,40,41,42,46,47,48,49,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'CADENA':([16,42,],[29,29,]),'PTCOMA':([17,27,28,31,32,37,43,51,53,54,55,56,],[30,-25,-26,-27,44,52,-23,-24,-19,-20,-21,-22,]),'PARDER':([22,23,24,25,27,28,29,31,33,35,36,43,51,53,54,55,56,57,58,60,61,62,63,],[37,-11,-12,-13,-25,-26,-29,-27,45,50,51,-23,-24,-19,-20,-21,-22,-28,-30,-31,-32,-33,-34,]),'MAS':([23,25,27,28,31,32,34,36,43,51,53,54,55,56,58,60,61,62,63,],[38,-27,-25,-26,-27,38,38,38,-23,-24,-19,-20,-21,-22,38,38,38,38,38,]),'POR':([23,25,27,28,31,32,34,36,43,51,53,54,55,56,58,60,61,62,63,],[40,-27,-25,-26,-27,40,40,40,-23,-24,40,40,-21,-22,40,40,40,40,40,]),'DIVIDIDO':([23,25,27,28,31,32,34,36,43,51,53,54,55,56,58,60,61,62,63,],[41,-27,-25,-26,-27,41,41,41,-23,-24,41,41,-21,-22,41,41,41,41,41,]),'CONCAT':([23,24,25,27,28,29,31,43,51,53,54,55,56,57,58,],[-30,42,-27,-25,-26,-29,-27,-23,-24,-19,-20,-21,-22,-28,-30,]),'MAYQUE':([27,28,31,34,43,51,53,54,55,56,],[-25,-26,-27,46,-23,-24,-19,-20,-21,-22,]),'MENQUE':([27,28,31,34,43,51,53,54,55,56,],[-25,-26,-27,47,-23,-24,-19,-20,-21,-22,]),'IGUALQUE':([27,28,31,34,43,51,53,54,55,56,],[-25,-26,-27,48,-23,-24,-19,-20,-21,-22,]),'NIGUALQUE':([27,28,31,34,43,51,53,54,55,56,],[-25,-26,-27,49,-23,-24,-19,-20,-21,-22,]),'LLAVIZQ':([45,50,69,],[59,64,70,]),'ELSE':([68,],[69,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,59,64,70,],[2,65,66,71,]),'instruccion':([0,2,59,64,65,66,70,71,],[3,15,3,3,15,15,3,15,]),'imprimir_instr':([0,2,59,64,65,66,70,71,],[4,4,4,4,4,4,4,4,]),'definicion_instr':([0,2,59,64,65,66,70,71,],[5,5,5,5,5,5,5,5,]),'asignacion_instr':([0,2,59,64,65,66,70,71,],[6,6,6,6,6,6,6,6,]),'mientras_instr':([0,2,59,64,65,66,70,71,],[7,7,7,7,7,7,7,7,]),'if_instr':([0,2,59,64,65,66,70,71,],[8,8,8,8,8,8,8,8,]),'if_else_instr':([0,2,59,64,65,66,70,71,],[9,9,9,9,9,9,9,9,]),'expresion_general':([16,],[22,]),'expresion_numerica':([16,18,19,20,21,26,38,39,40,41,42,46,47,48,49,],[23,32,34,34,36,43,53,54,55,56,58,60,61,62,63,]),'expresion_cadena':([16,42,],[24,57,]),'expresion_logica':([19,20,],[33,35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',139),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',144),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',150),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','grammar.py',155),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','grammar.py',156),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','grammar.py',157),
  ('instruccion -> mientras_instr','instruccion',1,'p_instruccion','grammar.py',158),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','grammar.py',159),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','grammar.py',160),
  ('imprimir_instr -> IMPRIMIR PARIZQ expresion_general PARDER PTCOMA','imprimir_instr',5,'p_instruccion_imprimir','grammar.py',165),
  ('expresion_general -> expresion_numerica','expresion_general',1,'p_expresionGeneralImprimir','grammar.py',170),
  ('expresion_general -> expresion_cadena','expresion_general',1,'p_expresionGeneralImprimir','grammar.py',171),
  ('expresion_general -> ID','expresion_general',1,'p_expresionGeneralImprimir','grammar.py',172),
  ('definicion_instr -> VAR ID PTCOMA','definicion_instr',3,'p_instruccion_definicion','grammar.py',177),
  ('asignacion_instr -> ID IGUAL expresion_numerica PTCOMA','asignacion_instr',4,'p_asignacion_instr','grammar.py',182),
  ('mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','mientras_instr',7,'p_mientras_instr','grammar.py',188),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','grammar.py',193),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','grammar.py',198),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',203),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',204),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',205),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',206),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','grammar.py',218),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','grammar.py',223),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','grammar.py',228),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','grammar.py',229),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','grammar.py',234),
  ('expresion_cadena -> expresion_cadena CONCAT expresion_cadena','expresion_cadena',3,'p_expresion_concatenacion','grammar.py',239),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','grammar.py',244),
  ('expresion_cadena -> expresion_numerica','expresion_cadena',1,'p_expresion_cadena_numerico','grammar.py',249),
  ('expresion_logica -> expresion_numerica MAYQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',254),
  ('expresion_logica -> expresion_numerica MENQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',255),
  ('expresion_logica -> expresion_numerica IGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',256),
  ('expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',257),
]
