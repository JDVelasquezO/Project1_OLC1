
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftMASMENOSleftPORDIVIDIDOrightUMENOSCADENA CONCAT DECIMAL DIVIDIDO ELSE ENTERO ID IF IGUAL IGUALQUE LLAVDER LLAVIZQ MAS MAYQUE MENOS MENQUE MIENTRAS NIGUALQUE PARDER PARIZQ POR PRINT PTCOMA VARinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion instruccion      : imprimir_instr\n                        | definicion_instr\n                        | asignacion_instr\n                        | def_asig_instr\n                        | mientras_instr\n                        | if_instr\n                        | if_else_instrimprimir_instr     : PRINT PARIZQ print_expresion_general PARDER PTCOMAprint_expresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | expresion_idexpresion_id   : IDdefinicion_instr   : VAR ID PTCOMAasignacion_instr   : ID IGUAL asign_expresion_general PTCOMAasign_expresion_general  :  expresion_numerica\n                            | expresion_cadena\n                            | expresion_iddef_asig_instr     : VAR ID IGUAL asign_def_expresion_general PTCOMAasign_def_expresion_general  :  expresion_numerica\n                                | expresion_cadena\n                                | expresion_idmientras_instr     : MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion_numerica MAS expresion_numerica\n                        | expresion_numerica MENOS expresion_numerica\n                        | expresion_numerica POR expresion_numerica\n                        | expresion_numerica DIVIDIDO expresion_numericaexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n                        | DECIMALexpresion_numerica   : IDexpresion_cadena     : expresion_cadena CONCAT expresion_cadenaexpresion_cadena     : CADENAexpresion_cadena     : expresion_numericaexpresion_logica : expresion_numerica MAYQUE expresion_numerica\n                        | expresion_numerica MENQUE expresion_numerica\n                        | expresion_numerica IGUALQUE expresion_numerica\n                        | expresion_numerica NIGUALQUE expresion_numerica'
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,8,9,10,16,32,54,62,69,70,75,76,77,78,79,81,82,83,],[11,11,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-21,11,11,11,11,-25,-26,11,11,-27,]),'VAR':([0,2,3,4,5,6,7,8,9,10,16,32,54,62,69,70,75,76,77,78,79,81,82,83,],[12,12,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-21,12,12,12,12,-25,-26,12,12,-27,]),'ID':([0,2,3,4,5,6,7,8,9,10,12,16,17,19,20,21,22,27,32,33,44,45,46,47,48,54,56,57,58,59,62,69,70,75,76,77,78,79,81,82,83,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,18,-2,30,30,40,40,40,40,-16,30,40,40,40,40,40,-17,40,40,40,40,-11,-21,13,13,13,13,-25,-26,13,13,-27,]),'MIENTRAS':([0,2,3,4,5,6,7,8,9,10,16,32,54,62,69,70,75,76,77,78,79,81,82,83,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-21,14,14,14,14,-25,-26,14,14,-27,]),'IF':([0,2,3,4,5,6,7,8,9,10,16,32,54,62,69,70,75,76,77,78,79,81,82,83,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-21,15,15,15,15,-25,-26,15,15,-27,]),'$end':([1,2,3,4,5,6,7,8,9,10,16,32,54,62,69,78,79,83,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-21,-25,-26,-27,]),'LLAVDER':([3,4,5,6,7,8,9,10,16,32,54,62,69,76,77,78,79,82,83,],[-3,-4,-5,-6,-7,-8,-9,-10,-2,-16,-17,-11,-21,78,79,-25,-26,83,-27,]),'PARIZQ':([11,14,15,17,19,20,21,22,27,33,44,45,46,47,48,56,57,58,59,],[17,20,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'IGUAL':([13,18,],[19,33,]),'MENOS':([17,19,20,21,22,24,27,28,29,30,33,35,39,40,42,44,45,46,47,48,49,51,56,57,58,59,61,63,64,65,66,68,71,72,73,74,],[27,27,27,27,27,45,27,-34,-35,-36,27,45,45,-36,45,27,27,27,27,27,-32,45,27,27,27,27,-33,-28,-29,-30,-31,45,45,45,45,45,]),'ENTERO':([17,19,20,21,22,27,33,44,45,46,47,48,56,57,58,59,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'DECIMAL':([17,19,20,21,22,27,33,44,45,46,47,48,56,57,58,59,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'CADENA':([17,19,33,48,],[31,31,31,31,]),'PTCOMA':([18,28,29,30,31,34,35,36,37,40,43,49,50,51,52,53,61,63,64,65,66,67,68,],[32,-34,-35,-15,-38,54,-18,-19,-20,-36,62,-32,69,-22,-23,-24,-33,-28,-29,-30,-31,-37,-39,]),'PARDER':([23,24,25,26,28,29,30,31,38,40,41,42,49,61,63,64,65,66,67,68,71,72,73,74,],[43,-12,-13,-14,-34,-35,-15,-38,55,-36,60,61,-32,-33,-28,-29,-30,-31,-37,-39,-40,-41,-42,-43,]),'MAS':([24,28,29,30,35,39,40,42,49,51,61,63,64,65,66,68,71,72,73,74,],[44,-34,-35,-36,44,44,-36,44,-32,44,-33,-28,-29,-30,-31,44,44,44,44,44,]),'POR':([24,28,29,30,35,39,40,42,49,51,61,63,64,65,66,68,71,72,73,74,],[46,-34,-35,-36,46,46,-36,46,-32,46,-33,46,46,-30,-31,46,46,46,46,46,]),'DIVIDIDO':([24,28,29,30,35,39,40,42,49,51,61,63,64,65,66,68,71,72,73,74,],[47,-34,-35,-36,47,47,-36,47,-32,47,-33,47,47,-30,-31,47,47,47,47,47,]),'CONCAT':([24,25,28,29,30,31,35,36,40,49,51,52,61,63,64,65,66,67,68,],[-39,48,-34,-35,-36,-38,-39,48,-36,-32,-39,48,-33,-28,-29,-30,-31,-37,-39,]),'MAYQUE':([28,29,39,40,49,61,63,64,65,66,],[-34,-35,56,-36,-32,-33,-28,-29,-30,-31,]),'MENQUE':([28,29,39,40,49,61,63,64,65,66,],[-34,-35,57,-36,-32,-33,-28,-29,-30,-31,]),'IGUALQUE':([28,29,39,40,49,61,63,64,65,66,],[-34,-35,58,-36,-32,-33,-28,-29,-30,-31,]),'NIGUALQUE':([28,29,39,40,49,61,63,64,65,66,],[-34,-35,59,-36,-32,-33,-28,-29,-30,-31,]),'LLAVIZQ':([55,60,80,],[70,75,81,]),'ELSE':([79,],[80,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,70,75,81,],[2,76,77,82,]),'instruccion':([0,2,70,75,76,77,81,82,],[3,16,3,3,16,16,3,16,]),'imprimir_instr':([0,2,70,75,76,77,81,82,],[4,4,4,4,4,4,4,4,]),'definicion_instr':([0,2,70,75,76,77,81,82,],[5,5,5,5,5,5,5,5,]),'asignacion_instr':([0,2,70,75,76,77,81,82,],[6,6,6,6,6,6,6,6,]),'def_asig_instr':([0,2,70,75,76,77,81,82,],[7,7,7,7,7,7,7,7,]),'mientras_instr':([0,2,70,75,76,77,81,82,],[8,8,8,8,8,8,8,8,]),'if_instr':([0,2,70,75,76,77,81,82,],[9,9,9,9,9,9,9,9,]),'if_else_instr':([0,2,70,75,76,77,81,82,],[10,10,10,10,10,10,10,10,]),'print_expresion_general':([17,],[23,]),'expresion_numerica':([17,19,20,21,22,27,33,44,45,46,47,48,56,57,58,59,],[24,35,39,39,42,49,51,63,64,65,66,68,71,72,73,74,]),'expresion_cadena':([17,19,33,48,],[25,36,52,67,]),'expresion_id':([17,19,33,],[26,37,53,]),'asign_expresion_general':([19,],[34,]),'expresion_logica':([20,21,],[38,41,]),'asign_def_expresion_general':([33,],[50,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',139),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',144),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',150),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','grammar.py',155),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','grammar.py',156),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','grammar.py',157),
  ('instruccion -> def_asig_instr','instruccion',1,'p_instruccion','grammar.py',158),
  ('instruccion -> mientras_instr','instruccion',1,'p_instruccion','grammar.py',159),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','grammar.py',160),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','grammar.py',161),
  ('imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER PTCOMA','imprimir_instr',5,'p_instruccion_imprimir','grammar.py',166),
  ('print_expresion_general -> expresion_numerica','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',171),
  ('print_expresion_general -> expresion_cadena','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',172),
  ('print_expresion_general -> expresion_id','print_expresion_general',1,'p_expresionGeneralImprimir','grammar.py',173),
  ('expresion_id -> ID','expresion_id',1,'p_expresionId','grammar.py',178),
  ('definicion_instr -> VAR ID PTCOMA','definicion_instr',3,'p_instruccion_definicion','grammar.py',183),
  ('asignacion_instr -> ID IGUAL asign_expresion_general PTCOMA','asignacion_instr',4,'p_asignacion_instr','grammar.py',188),
  ('asign_expresion_general -> expresion_numerica','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',193),
  ('asign_expresion_general -> expresion_cadena','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',194),
  ('asign_expresion_general -> expresion_id','asign_expresion_general',1,'p_expresionGeneralAsignar','grammar.py',195),
  ('def_asig_instr -> VAR ID IGUAL asign_def_expresion_general PTCOMA','def_asig_instr',5,'p_definicion_asignacion','grammar.py',200),
  ('asign_def_expresion_general -> expresion_numerica','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',205),
  ('asign_def_expresion_general -> expresion_cadena','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',206),
  ('asign_def_expresion_general -> expresion_id','asign_def_expresion_general',1,'p_expresionGeneralDefAsign','grammar.py',207),
  ('mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','mientras_instr',7,'p_mientras_instr','grammar.py',212),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','grammar.py',217),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','grammar.py',222),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',227),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',228),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',229),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','grammar.py',230),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','grammar.py',242),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','grammar.py',247),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','grammar.py',252),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','grammar.py',253),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','grammar.py',258),
  ('expresion_cadena -> expresion_cadena CONCAT expresion_cadena','expresion_cadena',3,'p_expresion_concatenacion','grammar.py',263),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','grammar.py',268),
  ('expresion_cadena -> expresion_numerica','expresion_cadena',1,'p_expresion_cadena_numerico','grammar.py',273),
  ('expresion_logica -> expresion_numerica MAYQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',278),
  ('expresion_logica -> expresion_numerica MENQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',279),
  ('expresion_logica -> expresion_numerica IGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',280),
  ('expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','grammar.py',281),
]
