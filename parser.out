Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instrucciones -> empty
Rule 5     instruccion -> func_main
Rule 6     instruccion -> imprimir_instr
Rule 7     instruccion -> definicion_instr
Rule 8     instruccion -> asignacion_instr
Rule 9     instruccion -> def_asig_instr
Rule 10    instruccion -> while_instr
Rule 11    instruccion -> if_instr
Rule 12    instruccion -> switch_instr
Rule 13    instruccion -> for_instr
Rule 14    instruccion -> expresion
Rule 15    instruccion -> break_instr
Rule 16    def_instr_prima -> PTCOMA
Rule 17    def_instr_prima -> empty
Rule 18    empty -> <empty>
Rule 19    func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
Rule 20    imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima
Rule 21    definicion_instr -> VAR ID def_instr_prima
Rule 22    asignacion_instr -> ID IGUAL expresion def_instr_prima
Rule 23    def_asig_instr -> VAR ID IGUAL expresion def_instr_prima
Rule 24    if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
Rule 25    if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
Rule 26    if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
Rule 27    while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
Rule 28    break_instr -> BREAK
Rule 29    switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
Rule 30    switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
Rule 31    switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
Rule 32    cases -> cases case_instr
Rule 33    cases -> case_instr
Rule 34    case_instr -> CASE expresion DOSPUNTOS instrucciones def_instr_prima
Rule 35    default_instr -> DEFAULT DOSPUNTOS instrucciones def_instr_prima
Rule 36    for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
Rule 37    def_asign_for -> ID
Rule 38    def_asign_for -> asignacion_instr
Rule 39    def_asign_for -> def_asig_instr
Rule 40    expresion -> NULL
Rule 41    expresion -> expresion INCREMENT def_instr_prima
Rule 42    expresion -> expresion DECREMENT def_instr_prima
Rule 43    expresion -> expresion MAS expresion
Rule 44    expresion -> expresion MENOS expresion
Rule 45    expresion -> expresion POR expresion
Rule 46    expresion -> expresion DIVIDIDO expresion
Rule 47    expresion -> expresion ELEVADO expresion
Rule 48    expresion -> expresion MOD expresion
Rule 49    expresion -> expresion AND expresion
Rule 50    expresion -> expresion OR expresion
Rule 51    expresion -> expresion MAYQUE expresion
Rule 52    expresion -> expresion MENQUE expresion
Rule 53    expresion -> expresion MAYIGUALQUE expresion
Rule 54    expresion -> expresion MENIGUALQUE expresion
Rule 55    expresion -> expresion IGUALQUE expresion
Rule 56    expresion -> expresion NIGUALQUE expresion
Rule 57    expresion -> MENOS expresion
Rule 58    expresion -> NOT expresion
Rule 59    expresion -> PARIZQ expresion PARDER
Rule 60    expresion -> ID
Rule 61    expresion -> ENTERO
Rule 62    expresion -> DECIMAL
Rule 63    expresion -> CADENA
Rule 64    expresion -> CHARACTER
Rule 65    expresion -> TRUE
Rule 66    expresion -> FALSE
Rule 67    expresion_data_type -> INT
Rule 68    expresion_data_type -> DOUBLE
Rule 69    expresion_data_type -> STRING
Rule 70    expresion_data_type -> CHAR
Rule 71    expresion -> PARIZQ expresion_data_type PARDER expresion

Terminals, with rules where they appear

AND                  : 49
BREAK                : 28
CADENA               : 63
CASE                 : 34
CHAR                 : 70
CHARACTER            : 64
DECIMAL              : 62
DECREMENT            : 42
DEFAULT              : 35
DIVIDIDO             : 46
DOSPUNTOS            : 34 35
DOUBLE               : 68
ELEVADO              : 47
ELSE                 : 25 26
ENTERO               : 61
FALSE                : 66
FOR                  : 36
ID                   : 21 22 23 37 60
IF                   : 24 25 26
IGUAL                : 22 23
IGUALQUE             : 55
INCREMENT            : 41
INT                  : 67
LLAVDER              : 19 24 25 25 26 27 29 30 31 36
LLAVIZQ              : 19 24 25 25 26 27 29 30 31 36
MAIN                 : 19
MAS                  : 43
MAYIGUALQUE          : 53
MAYQUE               : 51
MENIGUALQUE          : 54
MENOS                : 44 57
MENQUE               : 52
MOD                  : 48
NIGUALQUE            : 56
NOT                  : 58
NULL                 : 40
OR                   : 50
PARDER               : 19 20 24 25 26 27 29 30 31 36 59 71
PARIZQ               : 19 20 24 25 26 27 29 30 31 36 59 71
POR                  : 45
PRINT                : 20
PTCOMA               : 16
STRING               : 69
SWITCH               : 29 30 31
TRUE                 : 65
VAR                  : 21 23
WHILE                : 27
error                : 

Nonterminals, with rules where they appear

asignacion_instr     : 8 38
break_instr          : 15
case_instr           : 32 33
cases                : 29 31 32
def_asig_instr       : 9 39
def_asign_for        : 36
def_instr_prima      : 20 21 22 23 34 35 36 36 41 42
default_instr        : 30 31
definicion_instr     : 7
empty                : 4 17
expresion            : 14 20 22 23 24 25 26 27 29 30 31 34 36 36 41 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 58 59 71
expresion_data_type  : 71
for_instr            : 13
func_main            : 5
if_instr             : 11 26
imprimir_instr       : 6
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 19 24 25 25 26 27 34 35 36
switch_instr         : 12
while_instr          : 10

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (18) empty -> .
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    $end            reduce using rule 18 (empty -> .)
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

  ! MAIN            [ reduce using rule 18 (empty -> .) ]
  ! PRINT           [ reduce using rule 18 (empty -> .) ]
  ! VAR             [ reduce using rule 18 (empty -> .) ]
  ! ID              [ reduce using rule 18 (empty -> .) ]
  ! WHILE           [ reduce using rule 18 (empty -> .) ]
  ! IF              [ reduce using rule 18 (empty -> .) ]
  ! SWITCH          [ reduce using rule 18 (empty -> .) ]
  ! FOR             [ reduce using rule 18 (empty -> .) ]
  ! NULL            [ reduce using rule 18 (empty -> .) ]
  ! MENOS           [ reduce using rule 18 (empty -> .) ]
  ! NOT             [ reduce using rule 18 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 18 (empty -> .) ]
  ! ENTERO          [ reduce using rule 18 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 18 (empty -> .) ]
  ! CADENA          [ reduce using rule 18 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 18 (empty -> .) ]
  ! TRUE            [ reduce using rule 18 (empty -> .) ]
  ! FALSE           [ reduce using rule 18 (empty -> .) ]
  ! BREAK           [ reduce using rule 18 (empty -> .) ]

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    expresion                      shift and go to state 14
    break_instr                    shift and go to state 15

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

    $end            reduce using rule 1 (init -> instrucciones .)
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

    instruccion                    shift and go to state 35
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    expresion                      shift and go to state 14
    break_instr                    shift and go to state 15

state 3

    (3) instrucciones -> instruccion .

    MAIN            reduce using rule 3 (instrucciones -> instruccion .)
    PRINT           reduce using rule 3 (instrucciones -> instruccion .)
    VAR             reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    SWITCH          reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    NULL            reduce using rule 3 (instrucciones -> instruccion .)
    MENOS           reduce using rule 3 (instrucciones -> instruccion .)
    NOT             reduce using rule 3 (instrucciones -> instruccion .)
    PARIZQ          reduce using rule 3 (instrucciones -> instruccion .)
    ENTERO          reduce using rule 3 (instrucciones -> instruccion .)
    DECIMAL         reduce using rule 3 (instrucciones -> instruccion .)
    CADENA          reduce using rule 3 (instrucciones -> instruccion .)
    CHARACTER       reduce using rule 3 (instrucciones -> instruccion .)
    TRUE            reduce using rule 3 (instrucciones -> instruccion .)
    FALSE           reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    LLAVDER         reduce using rule 3 (instrucciones -> instruccion .)
    PTCOMA          reduce using rule 3 (instrucciones -> instruccion .)
    DEFAULT         reduce using rule 3 (instrucciones -> instruccion .)
    CASE            reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instrucciones -> empty .

    MAIN            reduce using rule 4 (instrucciones -> empty .)
    PRINT           reduce using rule 4 (instrucciones -> empty .)
    VAR             reduce using rule 4 (instrucciones -> empty .)
    ID              reduce using rule 4 (instrucciones -> empty .)
    WHILE           reduce using rule 4 (instrucciones -> empty .)
    IF              reduce using rule 4 (instrucciones -> empty .)
    SWITCH          reduce using rule 4 (instrucciones -> empty .)
    FOR             reduce using rule 4 (instrucciones -> empty .)
    NULL            reduce using rule 4 (instrucciones -> empty .)
    MENOS           reduce using rule 4 (instrucciones -> empty .)
    NOT             reduce using rule 4 (instrucciones -> empty .)
    PARIZQ          reduce using rule 4 (instrucciones -> empty .)
    ENTERO          reduce using rule 4 (instrucciones -> empty .)
    DECIMAL         reduce using rule 4 (instrucciones -> empty .)
    CADENA          reduce using rule 4 (instrucciones -> empty .)
    CHARACTER       reduce using rule 4 (instrucciones -> empty .)
    TRUE            reduce using rule 4 (instrucciones -> empty .)
    FALSE           reduce using rule 4 (instrucciones -> empty .)
    BREAK           reduce using rule 4 (instrucciones -> empty .)
    $end            reduce using rule 4 (instrucciones -> empty .)
    LLAVDER         reduce using rule 4 (instrucciones -> empty .)
    PTCOMA          reduce using rule 4 (instrucciones -> empty .)
    DEFAULT         reduce using rule 4 (instrucciones -> empty .)
    CASE            reduce using rule 4 (instrucciones -> empty .)


state 5

    (5) instruccion -> func_main .

    MAIN            reduce using rule 5 (instruccion -> func_main .)
    PRINT           reduce using rule 5 (instruccion -> func_main .)
    VAR             reduce using rule 5 (instruccion -> func_main .)
    ID              reduce using rule 5 (instruccion -> func_main .)
    WHILE           reduce using rule 5 (instruccion -> func_main .)
    IF              reduce using rule 5 (instruccion -> func_main .)
    SWITCH          reduce using rule 5 (instruccion -> func_main .)
    FOR             reduce using rule 5 (instruccion -> func_main .)
    NULL            reduce using rule 5 (instruccion -> func_main .)
    MENOS           reduce using rule 5 (instruccion -> func_main .)
    NOT             reduce using rule 5 (instruccion -> func_main .)
    PARIZQ          reduce using rule 5 (instruccion -> func_main .)
    ENTERO          reduce using rule 5 (instruccion -> func_main .)
    DECIMAL         reduce using rule 5 (instruccion -> func_main .)
    CADENA          reduce using rule 5 (instruccion -> func_main .)
    CHARACTER       reduce using rule 5 (instruccion -> func_main .)
    TRUE            reduce using rule 5 (instruccion -> func_main .)
    FALSE           reduce using rule 5 (instruccion -> func_main .)
    BREAK           reduce using rule 5 (instruccion -> func_main .)
    $end            reduce using rule 5 (instruccion -> func_main .)
    LLAVDER         reduce using rule 5 (instruccion -> func_main .)
    PTCOMA          reduce using rule 5 (instruccion -> func_main .)
    DEFAULT         reduce using rule 5 (instruccion -> func_main .)
    CASE            reduce using rule 5 (instruccion -> func_main .)


state 6

    (6) instruccion -> imprimir_instr .

    MAIN            reduce using rule 6 (instruccion -> imprimir_instr .)
    PRINT           reduce using rule 6 (instruccion -> imprimir_instr .)
    VAR             reduce using rule 6 (instruccion -> imprimir_instr .)
    ID              reduce using rule 6 (instruccion -> imprimir_instr .)
    WHILE           reduce using rule 6 (instruccion -> imprimir_instr .)
    IF              reduce using rule 6 (instruccion -> imprimir_instr .)
    SWITCH          reduce using rule 6 (instruccion -> imprimir_instr .)
    FOR             reduce using rule 6 (instruccion -> imprimir_instr .)
    NULL            reduce using rule 6 (instruccion -> imprimir_instr .)
    MENOS           reduce using rule 6 (instruccion -> imprimir_instr .)
    NOT             reduce using rule 6 (instruccion -> imprimir_instr .)
    PARIZQ          reduce using rule 6 (instruccion -> imprimir_instr .)
    ENTERO          reduce using rule 6 (instruccion -> imprimir_instr .)
    DECIMAL         reduce using rule 6 (instruccion -> imprimir_instr .)
    CADENA          reduce using rule 6 (instruccion -> imprimir_instr .)
    CHARACTER       reduce using rule 6 (instruccion -> imprimir_instr .)
    TRUE            reduce using rule 6 (instruccion -> imprimir_instr .)
    FALSE           reduce using rule 6 (instruccion -> imprimir_instr .)
    BREAK           reduce using rule 6 (instruccion -> imprimir_instr .)
    $end            reduce using rule 6 (instruccion -> imprimir_instr .)
    LLAVDER         reduce using rule 6 (instruccion -> imprimir_instr .)
    PTCOMA          reduce using rule 6 (instruccion -> imprimir_instr .)
    DEFAULT         reduce using rule 6 (instruccion -> imprimir_instr .)
    CASE            reduce using rule 6 (instruccion -> imprimir_instr .)


state 7

    (7) instruccion -> definicion_instr .

    MAIN            reduce using rule 7 (instruccion -> definicion_instr .)
    PRINT           reduce using rule 7 (instruccion -> definicion_instr .)
    VAR             reduce using rule 7 (instruccion -> definicion_instr .)
    ID              reduce using rule 7 (instruccion -> definicion_instr .)
    WHILE           reduce using rule 7 (instruccion -> definicion_instr .)
    IF              reduce using rule 7 (instruccion -> definicion_instr .)
    SWITCH          reduce using rule 7 (instruccion -> definicion_instr .)
    FOR             reduce using rule 7 (instruccion -> definicion_instr .)
    NULL            reduce using rule 7 (instruccion -> definicion_instr .)
    MENOS           reduce using rule 7 (instruccion -> definicion_instr .)
    NOT             reduce using rule 7 (instruccion -> definicion_instr .)
    PARIZQ          reduce using rule 7 (instruccion -> definicion_instr .)
    ENTERO          reduce using rule 7 (instruccion -> definicion_instr .)
    DECIMAL         reduce using rule 7 (instruccion -> definicion_instr .)
    CADENA          reduce using rule 7 (instruccion -> definicion_instr .)
    CHARACTER       reduce using rule 7 (instruccion -> definicion_instr .)
    TRUE            reduce using rule 7 (instruccion -> definicion_instr .)
    FALSE           reduce using rule 7 (instruccion -> definicion_instr .)
    BREAK           reduce using rule 7 (instruccion -> definicion_instr .)
    $end            reduce using rule 7 (instruccion -> definicion_instr .)
    LLAVDER         reduce using rule 7 (instruccion -> definicion_instr .)
    PTCOMA          reduce using rule 7 (instruccion -> definicion_instr .)
    DEFAULT         reduce using rule 7 (instruccion -> definicion_instr .)
    CASE            reduce using rule 7 (instruccion -> definicion_instr .)


state 8

    (8) instruccion -> asignacion_instr .

    MAIN            reduce using rule 8 (instruccion -> asignacion_instr .)
    PRINT           reduce using rule 8 (instruccion -> asignacion_instr .)
    VAR             reduce using rule 8 (instruccion -> asignacion_instr .)
    ID              reduce using rule 8 (instruccion -> asignacion_instr .)
    WHILE           reduce using rule 8 (instruccion -> asignacion_instr .)
    IF              reduce using rule 8 (instruccion -> asignacion_instr .)
    SWITCH          reduce using rule 8 (instruccion -> asignacion_instr .)
    FOR             reduce using rule 8 (instruccion -> asignacion_instr .)
    NULL            reduce using rule 8 (instruccion -> asignacion_instr .)
    MENOS           reduce using rule 8 (instruccion -> asignacion_instr .)
    NOT             reduce using rule 8 (instruccion -> asignacion_instr .)
    PARIZQ          reduce using rule 8 (instruccion -> asignacion_instr .)
    ENTERO          reduce using rule 8 (instruccion -> asignacion_instr .)
    DECIMAL         reduce using rule 8 (instruccion -> asignacion_instr .)
    CADENA          reduce using rule 8 (instruccion -> asignacion_instr .)
    CHARACTER       reduce using rule 8 (instruccion -> asignacion_instr .)
    TRUE            reduce using rule 8 (instruccion -> asignacion_instr .)
    FALSE           reduce using rule 8 (instruccion -> asignacion_instr .)
    BREAK           reduce using rule 8 (instruccion -> asignacion_instr .)
    $end            reduce using rule 8 (instruccion -> asignacion_instr .)
    LLAVDER         reduce using rule 8 (instruccion -> asignacion_instr .)
    PTCOMA          reduce using rule 8 (instruccion -> asignacion_instr .)
    DEFAULT         reduce using rule 8 (instruccion -> asignacion_instr .)
    CASE            reduce using rule 8 (instruccion -> asignacion_instr .)


state 9

    (9) instruccion -> def_asig_instr .

    MAIN            reduce using rule 9 (instruccion -> def_asig_instr .)
    PRINT           reduce using rule 9 (instruccion -> def_asig_instr .)
    VAR             reduce using rule 9 (instruccion -> def_asig_instr .)
    ID              reduce using rule 9 (instruccion -> def_asig_instr .)
    WHILE           reduce using rule 9 (instruccion -> def_asig_instr .)
    IF              reduce using rule 9 (instruccion -> def_asig_instr .)
    SWITCH          reduce using rule 9 (instruccion -> def_asig_instr .)
    FOR             reduce using rule 9 (instruccion -> def_asig_instr .)
    NULL            reduce using rule 9 (instruccion -> def_asig_instr .)
    MENOS           reduce using rule 9 (instruccion -> def_asig_instr .)
    NOT             reduce using rule 9 (instruccion -> def_asig_instr .)
    PARIZQ          reduce using rule 9 (instruccion -> def_asig_instr .)
    ENTERO          reduce using rule 9 (instruccion -> def_asig_instr .)
    DECIMAL         reduce using rule 9 (instruccion -> def_asig_instr .)
    CADENA          reduce using rule 9 (instruccion -> def_asig_instr .)
    CHARACTER       reduce using rule 9 (instruccion -> def_asig_instr .)
    TRUE            reduce using rule 9 (instruccion -> def_asig_instr .)
    FALSE           reduce using rule 9 (instruccion -> def_asig_instr .)
    BREAK           reduce using rule 9 (instruccion -> def_asig_instr .)
    $end            reduce using rule 9 (instruccion -> def_asig_instr .)
    LLAVDER         reduce using rule 9 (instruccion -> def_asig_instr .)
    PTCOMA          reduce using rule 9 (instruccion -> def_asig_instr .)
    DEFAULT         reduce using rule 9 (instruccion -> def_asig_instr .)
    CASE            reduce using rule 9 (instruccion -> def_asig_instr .)


state 10

    (10) instruccion -> while_instr .

    MAIN            reduce using rule 10 (instruccion -> while_instr .)
    PRINT           reduce using rule 10 (instruccion -> while_instr .)
    VAR             reduce using rule 10 (instruccion -> while_instr .)
    ID              reduce using rule 10 (instruccion -> while_instr .)
    WHILE           reduce using rule 10 (instruccion -> while_instr .)
    IF              reduce using rule 10 (instruccion -> while_instr .)
    SWITCH          reduce using rule 10 (instruccion -> while_instr .)
    FOR             reduce using rule 10 (instruccion -> while_instr .)
    NULL            reduce using rule 10 (instruccion -> while_instr .)
    MENOS           reduce using rule 10 (instruccion -> while_instr .)
    NOT             reduce using rule 10 (instruccion -> while_instr .)
    PARIZQ          reduce using rule 10 (instruccion -> while_instr .)
    ENTERO          reduce using rule 10 (instruccion -> while_instr .)
    DECIMAL         reduce using rule 10 (instruccion -> while_instr .)
    CADENA          reduce using rule 10 (instruccion -> while_instr .)
    CHARACTER       reduce using rule 10 (instruccion -> while_instr .)
    TRUE            reduce using rule 10 (instruccion -> while_instr .)
    FALSE           reduce using rule 10 (instruccion -> while_instr .)
    BREAK           reduce using rule 10 (instruccion -> while_instr .)
    $end            reduce using rule 10 (instruccion -> while_instr .)
    LLAVDER         reduce using rule 10 (instruccion -> while_instr .)
    PTCOMA          reduce using rule 10 (instruccion -> while_instr .)
    DEFAULT         reduce using rule 10 (instruccion -> while_instr .)
    CASE            reduce using rule 10 (instruccion -> while_instr .)


state 11

    (11) instruccion -> if_instr .

    MAIN            reduce using rule 11 (instruccion -> if_instr .)
    PRINT           reduce using rule 11 (instruccion -> if_instr .)
    VAR             reduce using rule 11 (instruccion -> if_instr .)
    ID              reduce using rule 11 (instruccion -> if_instr .)
    WHILE           reduce using rule 11 (instruccion -> if_instr .)
    IF              reduce using rule 11 (instruccion -> if_instr .)
    SWITCH          reduce using rule 11 (instruccion -> if_instr .)
    FOR             reduce using rule 11 (instruccion -> if_instr .)
    NULL            reduce using rule 11 (instruccion -> if_instr .)
    MENOS           reduce using rule 11 (instruccion -> if_instr .)
    NOT             reduce using rule 11 (instruccion -> if_instr .)
    PARIZQ          reduce using rule 11 (instruccion -> if_instr .)
    ENTERO          reduce using rule 11 (instruccion -> if_instr .)
    DECIMAL         reduce using rule 11 (instruccion -> if_instr .)
    CADENA          reduce using rule 11 (instruccion -> if_instr .)
    CHARACTER       reduce using rule 11 (instruccion -> if_instr .)
    TRUE            reduce using rule 11 (instruccion -> if_instr .)
    FALSE           reduce using rule 11 (instruccion -> if_instr .)
    BREAK           reduce using rule 11 (instruccion -> if_instr .)
    $end            reduce using rule 11 (instruccion -> if_instr .)
    LLAVDER         reduce using rule 11 (instruccion -> if_instr .)
    PTCOMA          reduce using rule 11 (instruccion -> if_instr .)
    DEFAULT         reduce using rule 11 (instruccion -> if_instr .)
    CASE            reduce using rule 11 (instruccion -> if_instr .)


state 12

    (12) instruccion -> switch_instr .

    MAIN            reduce using rule 12 (instruccion -> switch_instr .)
    PRINT           reduce using rule 12 (instruccion -> switch_instr .)
    VAR             reduce using rule 12 (instruccion -> switch_instr .)
    ID              reduce using rule 12 (instruccion -> switch_instr .)
    WHILE           reduce using rule 12 (instruccion -> switch_instr .)
    IF              reduce using rule 12 (instruccion -> switch_instr .)
    SWITCH          reduce using rule 12 (instruccion -> switch_instr .)
    FOR             reduce using rule 12 (instruccion -> switch_instr .)
    NULL            reduce using rule 12 (instruccion -> switch_instr .)
    MENOS           reduce using rule 12 (instruccion -> switch_instr .)
    NOT             reduce using rule 12 (instruccion -> switch_instr .)
    PARIZQ          reduce using rule 12 (instruccion -> switch_instr .)
    ENTERO          reduce using rule 12 (instruccion -> switch_instr .)
    DECIMAL         reduce using rule 12 (instruccion -> switch_instr .)
    CADENA          reduce using rule 12 (instruccion -> switch_instr .)
    CHARACTER       reduce using rule 12 (instruccion -> switch_instr .)
    TRUE            reduce using rule 12 (instruccion -> switch_instr .)
    FALSE           reduce using rule 12 (instruccion -> switch_instr .)
    BREAK           reduce using rule 12 (instruccion -> switch_instr .)
    $end            reduce using rule 12 (instruccion -> switch_instr .)
    LLAVDER         reduce using rule 12 (instruccion -> switch_instr .)
    PTCOMA          reduce using rule 12 (instruccion -> switch_instr .)
    DEFAULT         reduce using rule 12 (instruccion -> switch_instr .)
    CASE            reduce using rule 12 (instruccion -> switch_instr .)


state 13

    (13) instruccion -> for_instr .

    MAIN            reduce using rule 13 (instruccion -> for_instr .)
    PRINT           reduce using rule 13 (instruccion -> for_instr .)
    VAR             reduce using rule 13 (instruccion -> for_instr .)
    ID              reduce using rule 13 (instruccion -> for_instr .)
    WHILE           reduce using rule 13 (instruccion -> for_instr .)
    IF              reduce using rule 13 (instruccion -> for_instr .)
    SWITCH          reduce using rule 13 (instruccion -> for_instr .)
    FOR             reduce using rule 13 (instruccion -> for_instr .)
    NULL            reduce using rule 13 (instruccion -> for_instr .)
    MENOS           reduce using rule 13 (instruccion -> for_instr .)
    NOT             reduce using rule 13 (instruccion -> for_instr .)
    PARIZQ          reduce using rule 13 (instruccion -> for_instr .)
    ENTERO          reduce using rule 13 (instruccion -> for_instr .)
    DECIMAL         reduce using rule 13 (instruccion -> for_instr .)
    CADENA          reduce using rule 13 (instruccion -> for_instr .)
    CHARACTER       reduce using rule 13 (instruccion -> for_instr .)
    TRUE            reduce using rule 13 (instruccion -> for_instr .)
    FALSE           reduce using rule 13 (instruccion -> for_instr .)
    BREAK           reduce using rule 13 (instruccion -> for_instr .)
    $end            reduce using rule 13 (instruccion -> for_instr .)
    LLAVDER         reduce using rule 13 (instruccion -> for_instr .)
    PTCOMA          reduce using rule 13 (instruccion -> for_instr .)
    DEFAULT         reduce using rule 13 (instruccion -> for_instr .)
    CASE            reduce using rule 13 (instruccion -> for_instr .)


state 14

    (14) instruccion -> expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

  ! shift/reduce conflict for MENOS resolved as shift
    MAIN            reduce using rule 14 (instruccion -> expresion .)
    PRINT           reduce using rule 14 (instruccion -> expresion .)
    VAR             reduce using rule 14 (instruccion -> expresion .)
    ID              reduce using rule 14 (instruccion -> expresion .)
    WHILE           reduce using rule 14 (instruccion -> expresion .)
    IF              reduce using rule 14 (instruccion -> expresion .)
    SWITCH          reduce using rule 14 (instruccion -> expresion .)
    FOR             reduce using rule 14 (instruccion -> expresion .)
    NULL            reduce using rule 14 (instruccion -> expresion .)
    NOT             reduce using rule 14 (instruccion -> expresion .)
    PARIZQ          reduce using rule 14 (instruccion -> expresion .)
    ENTERO          reduce using rule 14 (instruccion -> expresion .)
    DECIMAL         reduce using rule 14 (instruccion -> expresion .)
    CADENA          reduce using rule 14 (instruccion -> expresion .)
    CHARACTER       reduce using rule 14 (instruccion -> expresion .)
    TRUE            reduce using rule 14 (instruccion -> expresion .)
    FALSE           reduce using rule 14 (instruccion -> expresion .)
    BREAK           reduce using rule 14 (instruccion -> expresion .)
    $end            reduce using rule 14 (instruccion -> expresion .)
    LLAVDER         reduce using rule 14 (instruccion -> expresion .)
    PTCOMA          reduce using rule 14 (instruccion -> expresion .)
    DEFAULT         reduce using rule 14 (instruccion -> expresion .)
    CASE            reduce using rule 14 (instruccion -> expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51

  ! MENOS           [ reduce using rule 14 (instruccion -> expresion .) ]


state 15

    (15) instruccion -> break_instr .

    MAIN            reduce using rule 15 (instruccion -> break_instr .)
    PRINT           reduce using rule 15 (instruccion -> break_instr .)
    VAR             reduce using rule 15 (instruccion -> break_instr .)
    ID              reduce using rule 15 (instruccion -> break_instr .)
    WHILE           reduce using rule 15 (instruccion -> break_instr .)
    IF              reduce using rule 15 (instruccion -> break_instr .)
    SWITCH          reduce using rule 15 (instruccion -> break_instr .)
    FOR             reduce using rule 15 (instruccion -> break_instr .)
    NULL            reduce using rule 15 (instruccion -> break_instr .)
    MENOS           reduce using rule 15 (instruccion -> break_instr .)
    NOT             reduce using rule 15 (instruccion -> break_instr .)
    PARIZQ          reduce using rule 15 (instruccion -> break_instr .)
    ENTERO          reduce using rule 15 (instruccion -> break_instr .)
    DECIMAL         reduce using rule 15 (instruccion -> break_instr .)
    CADENA          reduce using rule 15 (instruccion -> break_instr .)
    CHARACTER       reduce using rule 15 (instruccion -> break_instr .)
    TRUE            reduce using rule 15 (instruccion -> break_instr .)
    FALSE           reduce using rule 15 (instruccion -> break_instr .)
    BREAK           reduce using rule 15 (instruccion -> break_instr .)
    $end            reduce using rule 15 (instruccion -> break_instr .)
    LLAVDER         reduce using rule 15 (instruccion -> break_instr .)
    PTCOMA          reduce using rule 15 (instruccion -> break_instr .)
    DEFAULT         reduce using rule 15 (instruccion -> break_instr .)
    CASE            reduce using rule 15 (instruccion -> break_instr .)


state 16

    (19) func_main -> MAIN . PARIZQ PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 52


state 17

    (59) expresion -> PARIZQ . expresion PARDER
    (71) expresion -> PARIZQ . expresion_data_type PARDER expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (67) expresion_data_type -> . INT
    (68) expresion_data_type -> . DOUBLE
    (69) expresion_data_type -> . STRING
    (70) expresion_data_type -> . CHAR

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    INT             shift and go to state 56
    DOUBLE          shift and go to state 57
    STRING          shift and go to state 58
    CHAR            shift and go to state 59

    expresion                      shift and go to state 53
    expresion_data_type            shift and go to state 54

state 18

    (20) imprimir_instr -> PRINT . PARIZQ expresion PARDER def_instr_prima

    PARIZQ          shift and go to state 60


state 19

    (21) definicion_instr -> VAR . ID def_instr_prima
    (23) def_asig_instr -> VAR . ID IGUAL expresion def_instr_prima

    ID              shift and go to state 61


state 20

    (22) asignacion_instr -> ID . IGUAL expresion def_instr_prima
    (60) expresion -> ID .

    IGUAL           shift and go to state 62
    INCREMENT       reduce using rule 60 (expresion -> ID .)
    DECREMENT       reduce using rule 60 (expresion -> ID .)
    MAS             reduce using rule 60 (expresion -> ID .)
    MENOS           reduce using rule 60 (expresion -> ID .)
    POR             reduce using rule 60 (expresion -> ID .)
    DIVIDIDO        reduce using rule 60 (expresion -> ID .)
    ELEVADO         reduce using rule 60 (expresion -> ID .)
    MOD             reduce using rule 60 (expresion -> ID .)
    AND             reduce using rule 60 (expresion -> ID .)
    OR              reduce using rule 60 (expresion -> ID .)
    MAYQUE          reduce using rule 60 (expresion -> ID .)
    MENQUE          reduce using rule 60 (expresion -> ID .)
    MAYIGUALQUE     reduce using rule 60 (expresion -> ID .)
    MENIGUALQUE     reduce using rule 60 (expresion -> ID .)
    IGUALQUE        reduce using rule 60 (expresion -> ID .)
    NIGUALQUE       reduce using rule 60 (expresion -> ID .)
    MAIN            reduce using rule 60 (expresion -> ID .)
    PRINT           reduce using rule 60 (expresion -> ID .)
    VAR             reduce using rule 60 (expresion -> ID .)
    ID              reduce using rule 60 (expresion -> ID .)
    WHILE           reduce using rule 60 (expresion -> ID .)
    IF              reduce using rule 60 (expresion -> ID .)
    SWITCH          reduce using rule 60 (expresion -> ID .)
    FOR             reduce using rule 60 (expresion -> ID .)
    NULL            reduce using rule 60 (expresion -> ID .)
    NOT             reduce using rule 60 (expresion -> ID .)
    PARIZQ          reduce using rule 60 (expresion -> ID .)
    ENTERO          reduce using rule 60 (expresion -> ID .)
    DECIMAL         reduce using rule 60 (expresion -> ID .)
    CADENA          reduce using rule 60 (expresion -> ID .)
    CHARACTER       reduce using rule 60 (expresion -> ID .)
    TRUE            reduce using rule 60 (expresion -> ID .)
    FALSE           reduce using rule 60 (expresion -> ID .)
    BREAK           reduce using rule 60 (expresion -> ID .)
    $end            reduce using rule 60 (expresion -> ID .)
    LLAVDER         reduce using rule 60 (expresion -> ID .)
    PTCOMA          reduce using rule 60 (expresion -> ID .)
    DEFAULT         reduce using rule 60 (expresion -> ID .)
    CASE            reduce using rule 60 (expresion -> ID .)


state 21

    (27) while_instr -> WHILE . PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 63


state 22

    (24) if_instr -> IF . PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> IF . PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> IF . PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr

    PARIZQ          shift and go to state 64


state 23

    (29) switch_instr -> SWITCH . PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> SWITCH . PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> SWITCH . PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER

    PARIZQ          shift and go to state 65


state 24

    (36) for_instr -> FOR . PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 66


state 25

    (40) expresion -> NULL .

    INCREMENT       reduce using rule 40 (expresion -> NULL .)
    DECREMENT       reduce using rule 40 (expresion -> NULL .)
    MAS             reduce using rule 40 (expresion -> NULL .)
    MENOS           reduce using rule 40 (expresion -> NULL .)
    POR             reduce using rule 40 (expresion -> NULL .)
    DIVIDIDO        reduce using rule 40 (expresion -> NULL .)
    ELEVADO         reduce using rule 40 (expresion -> NULL .)
    MOD             reduce using rule 40 (expresion -> NULL .)
    AND             reduce using rule 40 (expresion -> NULL .)
    OR              reduce using rule 40 (expresion -> NULL .)
    MAYQUE          reduce using rule 40 (expresion -> NULL .)
    MENQUE          reduce using rule 40 (expresion -> NULL .)
    MAYIGUALQUE     reduce using rule 40 (expresion -> NULL .)
    MENIGUALQUE     reduce using rule 40 (expresion -> NULL .)
    IGUALQUE        reduce using rule 40 (expresion -> NULL .)
    NIGUALQUE       reduce using rule 40 (expresion -> NULL .)
    MAIN            reduce using rule 40 (expresion -> NULL .)
    PRINT           reduce using rule 40 (expresion -> NULL .)
    VAR             reduce using rule 40 (expresion -> NULL .)
    ID              reduce using rule 40 (expresion -> NULL .)
    WHILE           reduce using rule 40 (expresion -> NULL .)
    IF              reduce using rule 40 (expresion -> NULL .)
    SWITCH          reduce using rule 40 (expresion -> NULL .)
    FOR             reduce using rule 40 (expresion -> NULL .)
    NULL            reduce using rule 40 (expresion -> NULL .)
    NOT             reduce using rule 40 (expresion -> NULL .)
    PARIZQ          reduce using rule 40 (expresion -> NULL .)
    ENTERO          reduce using rule 40 (expresion -> NULL .)
    DECIMAL         reduce using rule 40 (expresion -> NULL .)
    CADENA          reduce using rule 40 (expresion -> NULL .)
    CHARACTER       reduce using rule 40 (expresion -> NULL .)
    TRUE            reduce using rule 40 (expresion -> NULL .)
    FALSE           reduce using rule 40 (expresion -> NULL .)
    BREAK           reduce using rule 40 (expresion -> NULL .)
    $end            reduce using rule 40 (expresion -> NULL .)
    PARDER          reduce using rule 40 (expresion -> NULL .)
    PTCOMA          reduce using rule 40 (expresion -> NULL .)
    LLAVDER         reduce using rule 40 (expresion -> NULL .)
    DEFAULT         reduce using rule 40 (expresion -> NULL .)
    CASE            reduce using rule 40 (expresion -> NULL .)
    DOSPUNTOS       reduce using rule 40 (expresion -> NULL .)


state 26

    (57) expresion -> MENOS . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 67

state 27

    (58) expresion -> NOT . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 68

state 28

    (61) expresion -> ENTERO .

    INCREMENT       reduce using rule 61 (expresion -> ENTERO .)
    DECREMENT       reduce using rule 61 (expresion -> ENTERO .)
    MAS             reduce using rule 61 (expresion -> ENTERO .)
    MENOS           reduce using rule 61 (expresion -> ENTERO .)
    POR             reduce using rule 61 (expresion -> ENTERO .)
    DIVIDIDO        reduce using rule 61 (expresion -> ENTERO .)
    ELEVADO         reduce using rule 61 (expresion -> ENTERO .)
    MOD             reduce using rule 61 (expresion -> ENTERO .)
    AND             reduce using rule 61 (expresion -> ENTERO .)
    OR              reduce using rule 61 (expresion -> ENTERO .)
    MAYQUE          reduce using rule 61 (expresion -> ENTERO .)
    MENQUE          reduce using rule 61 (expresion -> ENTERO .)
    MAYIGUALQUE     reduce using rule 61 (expresion -> ENTERO .)
    MENIGUALQUE     reduce using rule 61 (expresion -> ENTERO .)
    IGUALQUE        reduce using rule 61 (expresion -> ENTERO .)
    NIGUALQUE       reduce using rule 61 (expresion -> ENTERO .)
    MAIN            reduce using rule 61 (expresion -> ENTERO .)
    PRINT           reduce using rule 61 (expresion -> ENTERO .)
    VAR             reduce using rule 61 (expresion -> ENTERO .)
    ID              reduce using rule 61 (expresion -> ENTERO .)
    WHILE           reduce using rule 61 (expresion -> ENTERO .)
    IF              reduce using rule 61 (expresion -> ENTERO .)
    SWITCH          reduce using rule 61 (expresion -> ENTERO .)
    FOR             reduce using rule 61 (expresion -> ENTERO .)
    NULL            reduce using rule 61 (expresion -> ENTERO .)
    NOT             reduce using rule 61 (expresion -> ENTERO .)
    PARIZQ          reduce using rule 61 (expresion -> ENTERO .)
    ENTERO          reduce using rule 61 (expresion -> ENTERO .)
    DECIMAL         reduce using rule 61 (expresion -> ENTERO .)
    CADENA          reduce using rule 61 (expresion -> ENTERO .)
    CHARACTER       reduce using rule 61 (expresion -> ENTERO .)
    TRUE            reduce using rule 61 (expresion -> ENTERO .)
    FALSE           reduce using rule 61 (expresion -> ENTERO .)
    BREAK           reduce using rule 61 (expresion -> ENTERO .)
    $end            reduce using rule 61 (expresion -> ENTERO .)
    PARDER          reduce using rule 61 (expresion -> ENTERO .)
    PTCOMA          reduce using rule 61 (expresion -> ENTERO .)
    LLAVDER         reduce using rule 61 (expresion -> ENTERO .)
    DEFAULT         reduce using rule 61 (expresion -> ENTERO .)
    CASE            reduce using rule 61 (expresion -> ENTERO .)
    DOSPUNTOS       reduce using rule 61 (expresion -> ENTERO .)


state 29

    (62) expresion -> DECIMAL .

    INCREMENT       reduce using rule 62 (expresion -> DECIMAL .)
    DECREMENT       reduce using rule 62 (expresion -> DECIMAL .)
    MAS             reduce using rule 62 (expresion -> DECIMAL .)
    MENOS           reduce using rule 62 (expresion -> DECIMAL .)
    POR             reduce using rule 62 (expresion -> DECIMAL .)
    DIVIDIDO        reduce using rule 62 (expresion -> DECIMAL .)
    ELEVADO         reduce using rule 62 (expresion -> DECIMAL .)
    MOD             reduce using rule 62 (expresion -> DECIMAL .)
    AND             reduce using rule 62 (expresion -> DECIMAL .)
    OR              reduce using rule 62 (expresion -> DECIMAL .)
    MAYQUE          reduce using rule 62 (expresion -> DECIMAL .)
    MENQUE          reduce using rule 62 (expresion -> DECIMAL .)
    MAYIGUALQUE     reduce using rule 62 (expresion -> DECIMAL .)
    MENIGUALQUE     reduce using rule 62 (expresion -> DECIMAL .)
    IGUALQUE        reduce using rule 62 (expresion -> DECIMAL .)
    NIGUALQUE       reduce using rule 62 (expresion -> DECIMAL .)
    MAIN            reduce using rule 62 (expresion -> DECIMAL .)
    PRINT           reduce using rule 62 (expresion -> DECIMAL .)
    VAR             reduce using rule 62 (expresion -> DECIMAL .)
    ID              reduce using rule 62 (expresion -> DECIMAL .)
    WHILE           reduce using rule 62 (expresion -> DECIMAL .)
    IF              reduce using rule 62 (expresion -> DECIMAL .)
    SWITCH          reduce using rule 62 (expresion -> DECIMAL .)
    FOR             reduce using rule 62 (expresion -> DECIMAL .)
    NULL            reduce using rule 62 (expresion -> DECIMAL .)
    NOT             reduce using rule 62 (expresion -> DECIMAL .)
    PARIZQ          reduce using rule 62 (expresion -> DECIMAL .)
    ENTERO          reduce using rule 62 (expresion -> DECIMAL .)
    DECIMAL         reduce using rule 62 (expresion -> DECIMAL .)
    CADENA          reduce using rule 62 (expresion -> DECIMAL .)
    CHARACTER       reduce using rule 62 (expresion -> DECIMAL .)
    TRUE            reduce using rule 62 (expresion -> DECIMAL .)
    FALSE           reduce using rule 62 (expresion -> DECIMAL .)
    BREAK           reduce using rule 62 (expresion -> DECIMAL .)
    $end            reduce using rule 62 (expresion -> DECIMAL .)
    PARDER          reduce using rule 62 (expresion -> DECIMAL .)
    PTCOMA          reduce using rule 62 (expresion -> DECIMAL .)
    LLAVDER         reduce using rule 62 (expresion -> DECIMAL .)
    DEFAULT         reduce using rule 62 (expresion -> DECIMAL .)
    CASE            reduce using rule 62 (expresion -> DECIMAL .)
    DOSPUNTOS       reduce using rule 62 (expresion -> DECIMAL .)


state 30

    (63) expresion -> CADENA .

    INCREMENT       reduce using rule 63 (expresion -> CADENA .)
    DECREMENT       reduce using rule 63 (expresion -> CADENA .)
    MAS             reduce using rule 63 (expresion -> CADENA .)
    MENOS           reduce using rule 63 (expresion -> CADENA .)
    POR             reduce using rule 63 (expresion -> CADENA .)
    DIVIDIDO        reduce using rule 63 (expresion -> CADENA .)
    ELEVADO         reduce using rule 63 (expresion -> CADENA .)
    MOD             reduce using rule 63 (expresion -> CADENA .)
    AND             reduce using rule 63 (expresion -> CADENA .)
    OR              reduce using rule 63 (expresion -> CADENA .)
    MAYQUE          reduce using rule 63 (expresion -> CADENA .)
    MENQUE          reduce using rule 63 (expresion -> CADENA .)
    MAYIGUALQUE     reduce using rule 63 (expresion -> CADENA .)
    MENIGUALQUE     reduce using rule 63 (expresion -> CADENA .)
    IGUALQUE        reduce using rule 63 (expresion -> CADENA .)
    NIGUALQUE       reduce using rule 63 (expresion -> CADENA .)
    MAIN            reduce using rule 63 (expresion -> CADENA .)
    PRINT           reduce using rule 63 (expresion -> CADENA .)
    VAR             reduce using rule 63 (expresion -> CADENA .)
    ID              reduce using rule 63 (expresion -> CADENA .)
    WHILE           reduce using rule 63 (expresion -> CADENA .)
    IF              reduce using rule 63 (expresion -> CADENA .)
    SWITCH          reduce using rule 63 (expresion -> CADENA .)
    FOR             reduce using rule 63 (expresion -> CADENA .)
    NULL            reduce using rule 63 (expresion -> CADENA .)
    NOT             reduce using rule 63 (expresion -> CADENA .)
    PARIZQ          reduce using rule 63 (expresion -> CADENA .)
    ENTERO          reduce using rule 63 (expresion -> CADENA .)
    DECIMAL         reduce using rule 63 (expresion -> CADENA .)
    CADENA          reduce using rule 63 (expresion -> CADENA .)
    CHARACTER       reduce using rule 63 (expresion -> CADENA .)
    TRUE            reduce using rule 63 (expresion -> CADENA .)
    FALSE           reduce using rule 63 (expresion -> CADENA .)
    BREAK           reduce using rule 63 (expresion -> CADENA .)
    $end            reduce using rule 63 (expresion -> CADENA .)
    PARDER          reduce using rule 63 (expresion -> CADENA .)
    PTCOMA          reduce using rule 63 (expresion -> CADENA .)
    LLAVDER         reduce using rule 63 (expresion -> CADENA .)
    DEFAULT         reduce using rule 63 (expresion -> CADENA .)
    CASE            reduce using rule 63 (expresion -> CADENA .)
    DOSPUNTOS       reduce using rule 63 (expresion -> CADENA .)


state 31

    (64) expresion -> CHARACTER .

    INCREMENT       reduce using rule 64 (expresion -> CHARACTER .)
    DECREMENT       reduce using rule 64 (expresion -> CHARACTER .)
    MAS             reduce using rule 64 (expresion -> CHARACTER .)
    MENOS           reduce using rule 64 (expresion -> CHARACTER .)
    POR             reduce using rule 64 (expresion -> CHARACTER .)
    DIVIDIDO        reduce using rule 64 (expresion -> CHARACTER .)
    ELEVADO         reduce using rule 64 (expresion -> CHARACTER .)
    MOD             reduce using rule 64 (expresion -> CHARACTER .)
    AND             reduce using rule 64 (expresion -> CHARACTER .)
    OR              reduce using rule 64 (expresion -> CHARACTER .)
    MAYQUE          reduce using rule 64 (expresion -> CHARACTER .)
    MENQUE          reduce using rule 64 (expresion -> CHARACTER .)
    MAYIGUALQUE     reduce using rule 64 (expresion -> CHARACTER .)
    MENIGUALQUE     reduce using rule 64 (expresion -> CHARACTER .)
    IGUALQUE        reduce using rule 64 (expresion -> CHARACTER .)
    NIGUALQUE       reduce using rule 64 (expresion -> CHARACTER .)
    MAIN            reduce using rule 64 (expresion -> CHARACTER .)
    PRINT           reduce using rule 64 (expresion -> CHARACTER .)
    VAR             reduce using rule 64 (expresion -> CHARACTER .)
    ID              reduce using rule 64 (expresion -> CHARACTER .)
    WHILE           reduce using rule 64 (expresion -> CHARACTER .)
    IF              reduce using rule 64 (expresion -> CHARACTER .)
    SWITCH          reduce using rule 64 (expresion -> CHARACTER .)
    FOR             reduce using rule 64 (expresion -> CHARACTER .)
    NULL            reduce using rule 64 (expresion -> CHARACTER .)
    NOT             reduce using rule 64 (expresion -> CHARACTER .)
    PARIZQ          reduce using rule 64 (expresion -> CHARACTER .)
    ENTERO          reduce using rule 64 (expresion -> CHARACTER .)
    DECIMAL         reduce using rule 64 (expresion -> CHARACTER .)
    CADENA          reduce using rule 64 (expresion -> CHARACTER .)
    CHARACTER       reduce using rule 64 (expresion -> CHARACTER .)
    TRUE            reduce using rule 64 (expresion -> CHARACTER .)
    FALSE           reduce using rule 64 (expresion -> CHARACTER .)
    BREAK           reduce using rule 64 (expresion -> CHARACTER .)
    $end            reduce using rule 64 (expresion -> CHARACTER .)
    PARDER          reduce using rule 64 (expresion -> CHARACTER .)
    PTCOMA          reduce using rule 64 (expresion -> CHARACTER .)
    LLAVDER         reduce using rule 64 (expresion -> CHARACTER .)
    DEFAULT         reduce using rule 64 (expresion -> CHARACTER .)
    CASE            reduce using rule 64 (expresion -> CHARACTER .)
    DOSPUNTOS       reduce using rule 64 (expresion -> CHARACTER .)


state 32

    (65) expresion -> TRUE .

    INCREMENT       reduce using rule 65 (expresion -> TRUE .)
    DECREMENT       reduce using rule 65 (expresion -> TRUE .)
    MAS             reduce using rule 65 (expresion -> TRUE .)
    MENOS           reduce using rule 65 (expresion -> TRUE .)
    POR             reduce using rule 65 (expresion -> TRUE .)
    DIVIDIDO        reduce using rule 65 (expresion -> TRUE .)
    ELEVADO         reduce using rule 65 (expresion -> TRUE .)
    MOD             reduce using rule 65 (expresion -> TRUE .)
    AND             reduce using rule 65 (expresion -> TRUE .)
    OR              reduce using rule 65 (expresion -> TRUE .)
    MAYQUE          reduce using rule 65 (expresion -> TRUE .)
    MENQUE          reduce using rule 65 (expresion -> TRUE .)
    MAYIGUALQUE     reduce using rule 65 (expresion -> TRUE .)
    MENIGUALQUE     reduce using rule 65 (expresion -> TRUE .)
    IGUALQUE        reduce using rule 65 (expresion -> TRUE .)
    NIGUALQUE       reduce using rule 65 (expresion -> TRUE .)
    MAIN            reduce using rule 65 (expresion -> TRUE .)
    PRINT           reduce using rule 65 (expresion -> TRUE .)
    VAR             reduce using rule 65 (expresion -> TRUE .)
    ID              reduce using rule 65 (expresion -> TRUE .)
    WHILE           reduce using rule 65 (expresion -> TRUE .)
    IF              reduce using rule 65 (expresion -> TRUE .)
    SWITCH          reduce using rule 65 (expresion -> TRUE .)
    FOR             reduce using rule 65 (expresion -> TRUE .)
    NULL            reduce using rule 65 (expresion -> TRUE .)
    NOT             reduce using rule 65 (expresion -> TRUE .)
    PARIZQ          reduce using rule 65 (expresion -> TRUE .)
    ENTERO          reduce using rule 65 (expresion -> TRUE .)
    DECIMAL         reduce using rule 65 (expresion -> TRUE .)
    CADENA          reduce using rule 65 (expresion -> TRUE .)
    CHARACTER       reduce using rule 65 (expresion -> TRUE .)
    TRUE            reduce using rule 65 (expresion -> TRUE .)
    FALSE           reduce using rule 65 (expresion -> TRUE .)
    BREAK           reduce using rule 65 (expresion -> TRUE .)
    $end            reduce using rule 65 (expresion -> TRUE .)
    PARDER          reduce using rule 65 (expresion -> TRUE .)
    PTCOMA          reduce using rule 65 (expresion -> TRUE .)
    LLAVDER         reduce using rule 65 (expresion -> TRUE .)
    DEFAULT         reduce using rule 65 (expresion -> TRUE .)
    CASE            reduce using rule 65 (expresion -> TRUE .)
    DOSPUNTOS       reduce using rule 65 (expresion -> TRUE .)


state 33

    (66) expresion -> FALSE .

    INCREMENT       reduce using rule 66 (expresion -> FALSE .)
    DECREMENT       reduce using rule 66 (expresion -> FALSE .)
    MAS             reduce using rule 66 (expresion -> FALSE .)
    MENOS           reduce using rule 66 (expresion -> FALSE .)
    POR             reduce using rule 66 (expresion -> FALSE .)
    DIVIDIDO        reduce using rule 66 (expresion -> FALSE .)
    ELEVADO         reduce using rule 66 (expresion -> FALSE .)
    MOD             reduce using rule 66 (expresion -> FALSE .)
    AND             reduce using rule 66 (expresion -> FALSE .)
    OR              reduce using rule 66 (expresion -> FALSE .)
    MAYQUE          reduce using rule 66 (expresion -> FALSE .)
    MENQUE          reduce using rule 66 (expresion -> FALSE .)
    MAYIGUALQUE     reduce using rule 66 (expresion -> FALSE .)
    MENIGUALQUE     reduce using rule 66 (expresion -> FALSE .)
    IGUALQUE        reduce using rule 66 (expresion -> FALSE .)
    NIGUALQUE       reduce using rule 66 (expresion -> FALSE .)
    MAIN            reduce using rule 66 (expresion -> FALSE .)
    PRINT           reduce using rule 66 (expresion -> FALSE .)
    VAR             reduce using rule 66 (expresion -> FALSE .)
    ID              reduce using rule 66 (expresion -> FALSE .)
    WHILE           reduce using rule 66 (expresion -> FALSE .)
    IF              reduce using rule 66 (expresion -> FALSE .)
    SWITCH          reduce using rule 66 (expresion -> FALSE .)
    FOR             reduce using rule 66 (expresion -> FALSE .)
    NULL            reduce using rule 66 (expresion -> FALSE .)
    NOT             reduce using rule 66 (expresion -> FALSE .)
    PARIZQ          reduce using rule 66 (expresion -> FALSE .)
    ENTERO          reduce using rule 66 (expresion -> FALSE .)
    DECIMAL         reduce using rule 66 (expresion -> FALSE .)
    CADENA          reduce using rule 66 (expresion -> FALSE .)
    CHARACTER       reduce using rule 66 (expresion -> FALSE .)
    TRUE            reduce using rule 66 (expresion -> FALSE .)
    FALSE           reduce using rule 66 (expresion -> FALSE .)
    BREAK           reduce using rule 66 (expresion -> FALSE .)
    $end            reduce using rule 66 (expresion -> FALSE .)
    PARDER          reduce using rule 66 (expresion -> FALSE .)
    PTCOMA          reduce using rule 66 (expresion -> FALSE .)
    LLAVDER         reduce using rule 66 (expresion -> FALSE .)
    DEFAULT         reduce using rule 66 (expresion -> FALSE .)
    CASE            reduce using rule 66 (expresion -> FALSE .)
    DOSPUNTOS       reduce using rule 66 (expresion -> FALSE .)


state 34

    (28) break_instr -> BREAK .

    MAIN            reduce using rule 28 (break_instr -> BREAK .)
    PRINT           reduce using rule 28 (break_instr -> BREAK .)
    VAR             reduce using rule 28 (break_instr -> BREAK .)
    ID              reduce using rule 28 (break_instr -> BREAK .)
    WHILE           reduce using rule 28 (break_instr -> BREAK .)
    IF              reduce using rule 28 (break_instr -> BREAK .)
    SWITCH          reduce using rule 28 (break_instr -> BREAK .)
    FOR             reduce using rule 28 (break_instr -> BREAK .)
    NULL            reduce using rule 28 (break_instr -> BREAK .)
    MENOS           reduce using rule 28 (break_instr -> BREAK .)
    NOT             reduce using rule 28 (break_instr -> BREAK .)
    PARIZQ          reduce using rule 28 (break_instr -> BREAK .)
    ENTERO          reduce using rule 28 (break_instr -> BREAK .)
    DECIMAL         reduce using rule 28 (break_instr -> BREAK .)
    CADENA          reduce using rule 28 (break_instr -> BREAK .)
    CHARACTER       reduce using rule 28 (break_instr -> BREAK .)
    TRUE            reduce using rule 28 (break_instr -> BREAK .)
    FALSE           reduce using rule 28 (break_instr -> BREAK .)
    BREAK           reduce using rule 28 (break_instr -> BREAK .)
    $end            reduce using rule 28 (break_instr -> BREAK .)
    LLAVDER         reduce using rule 28 (break_instr -> BREAK .)
    PTCOMA          reduce using rule 28 (break_instr -> BREAK .)
    DEFAULT         reduce using rule 28 (break_instr -> BREAK .)
    CASE            reduce using rule 28 (break_instr -> BREAK .)


state 35

    (2) instrucciones -> instrucciones instruccion .

    MAIN            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PRINT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    VAR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    SWITCH          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    NULL            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    MENOS           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    NOT             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PARIZQ          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ENTERO          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    DECIMAL         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CADENA          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CHARACTER       reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    TRUE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FALSE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LLAVDER         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PTCOMA          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    DEFAULT         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CASE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 36

    (41) expresion -> expresion INCREMENT . def_instr_prima
    (16) def_instr_prima -> . PTCOMA
    (17) def_instr_prima -> . empty
    (18) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
    PTCOMA          shift and go to state 70
    INCREMENT       reduce using rule 18 (empty -> .)
    DECREMENT       reduce using rule 18 (empty -> .)
    MAS             reduce using rule 18 (empty -> .)
    MENOS           reduce using rule 18 (empty -> .)
    POR             reduce using rule 18 (empty -> .)
    DIVIDIDO        reduce using rule 18 (empty -> .)
    ELEVADO         reduce using rule 18 (empty -> .)
    MOD             reduce using rule 18 (empty -> .)
    AND             reduce using rule 18 (empty -> .)
    OR              reduce using rule 18 (empty -> .)
    MAYQUE          reduce using rule 18 (empty -> .)
    MENQUE          reduce using rule 18 (empty -> .)
    MAYIGUALQUE     reduce using rule 18 (empty -> .)
    MENIGUALQUE     reduce using rule 18 (empty -> .)
    IGUALQUE        reduce using rule 18 (empty -> .)
    NIGUALQUE       reduce using rule 18 (empty -> .)
    MAIN            reduce using rule 18 (empty -> .)
    PRINT           reduce using rule 18 (empty -> .)
    VAR             reduce using rule 18 (empty -> .)
    ID              reduce using rule 18 (empty -> .)
    WHILE           reduce using rule 18 (empty -> .)
    IF              reduce using rule 18 (empty -> .)
    SWITCH          reduce using rule 18 (empty -> .)
    FOR             reduce using rule 18 (empty -> .)
    NULL            reduce using rule 18 (empty -> .)
    NOT             reduce using rule 18 (empty -> .)
    PARIZQ          reduce using rule 18 (empty -> .)
    ENTERO          reduce using rule 18 (empty -> .)
    DECIMAL         reduce using rule 18 (empty -> .)
    CADENA          reduce using rule 18 (empty -> .)
    CHARACTER       reduce using rule 18 (empty -> .)
    TRUE            reduce using rule 18 (empty -> .)
    FALSE           reduce using rule 18 (empty -> .)
    BREAK           reduce using rule 18 (empty -> .)
    $end            reduce using rule 18 (empty -> .)
    PARDER          reduce using rule 18 (empty -> .)
    LLAVDER         reduce using rule 18 (empty -> .)
    DEFAULT         reduce using rule 18 (empty -> .)
    CASE            reduce using rule 18 (empty -> .)
    DOSPUNTOS       reduce using rule 18 (empty -> .)

  ! PTCOMA          [ reduce using rule 18 (empty -> .) ]

    def_instr_prima                shift and go to state 69
    empty                          shift and go to state 71

state 37

    (42) expresion -> expresion DECREMENT . def_instr_prima
    (16) def_instr_prima -> . PTCOMA
    (17) def_instr_prima -> . empty
    (18) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
    PTCOMA          shift and go to state 70
    INCREMENT       reduce using rule 18 (empty -> .)
    DECREMENT       reduce using rule 18 (empty -> .)
    MAS             reduce using rule 18 (empty -> .)
    MENOS           reduce using rule 18 (empty -> .)
    POR             reduce using rule 18 (empty -> .)
    DIVIDIDO        reduce using rule 18 (empty -> .)
    ELEVADO         reduce using rule 18 (empty -> .)
    MOD             reduce using rule 18 (empty -> .)
    AND             reduce using rule 18 (empty -> .)
    OR              reduce using rule 18 (empty -> .)
    MAYQUE          reduce using rule 18 (empty -> .)
    MENQUE          reduce using rule 18 (empty -> .)
    MAYIGUALQUE     reduce using rule 18 (empty -> .)
    MENIGUALQUE     reduce using rule 18 (empty -> .)
    IGUALQUE        reduce using rule 18 (empty -> .)
    NIGUALQUE       reduce using rule 18 (empty -> .)
    MAIN            reduce using rule 18 (empty -> .)
    PRINT           reduce using rule 18 (empty -> .)
    VAR             reduce using rule 18 (empty -> .)
    ID              reduce using rule 18 (empty -> .)
    WHILE           reduce using rule 18 (empty -> .)
    IF              reduce using rule 18 (empty -> .)
    SWITCH          reduce using rule 18 (empty -> .)
    FOR             reduce using rule 18 (empty -> .)
    NULL            reduce using rule 18 (empty -> .)
    NOT             reduce using rule 18 (empty -> .)
    PARIZQ          reduce using rule 18 (empty -> .)
    ENTERO          reduce using rule 18 (empty -> .)
    DECIMAL         reduce using rule 18 (empty -> .)
    CADENA          reduce using rule 18 (empty -> .)
    CHARACTER       reduce using rule 18 (empty -> .)
    TRUE            reduce using rule 18 (empty -> .)
    FALSE           reduce using rule 18 (empty -> .)
    BREAK           reduce using rule 18 (empty -> .)
    $end            reduce using rule 18 (empty -> .)
    PARDER          reduce using rule 18 (empty -> .)
    LLAVDER         reduce using rule 18 (empty -> .)
    DEFAULT         reduce using rule 18 (empty -> .)
    CASE            reduce using rule 18 (empty -> .)
    DOSPUNTOS       reduce using rule 18 (empty -> .)

  ! PTCOMA          [ reduce using rule 18 (empty -> .) ]

    def_instr_prima                shift and go to state 72
    empty                          shift and go to state 71

state 38

    (43) expresion -> expresion MAS . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 73

state 39

    (44) expresion -> expresion MENOS . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 74

state 40

    (45) expresion -> expresion POR . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 75

state 41

    (46) expresion -> expresion DIVIDIDO . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 76

state 42

    (47) expresion -> expresion ELEVADO . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 77

state 43

    (48) expresion -> expresion MOD . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 78

state 44

    (49) expresion -> expresion AND . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 79

state 45

    (50) expresion -> expresion OR . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 80

state 46

    (51) expresion -> expresion MAYQUE . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 81

state 47

    (52) expresion -> expresion MENQUE . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 82

state 48

    (53) expresion -> expresion MAYIGUALQUE . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 83

state 49

    (54) expresion -> expresion MENIGUALQUE . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 84

state 50

    (55) expresion -> expresion IGUALQUE . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 85

state 51

    (56) expresion -> expresion NIGUALQUE . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 86

state 52

    (19) func_main -> MAIN PARIZQ . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 87


state 53

    (59) expresion -> PARIZQ expresion . PARDER
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    PARDER          shift and go to state 88
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51


state 54

    (71) expresion -> PARIZQ expresion_data_type . PARDER expresion

    PARDER          shift and go to state 89


state 55

    (60) expresion -> ID .

    PARDER          reduce using rule 60 (expresion -> ID .)
    INCREMENT       reduce using rule 60 (expresion -> ID .)
    DECREMENT       reduce using rule 60 (expresion -> ID .)
    MAS             reduce using rule 60 (expresion -> ID .)
    MENOS           reduce using rule 60 (expresion -> ID .)
    POR             reduce using rule 60 (expresion -> ID .)
    DIVIDIDO        reduce using rule 60 (expresion -> ID .)
    ELEVADO         reduce using rule 60 (expresion -> ID .)
    MOD             reduce using rule 60 (expresion -> ID .)
    AND             reduce using rule 60 (expresion -> ID .)
    OR              reduce using rule 60 (expresion -> ID .)
    MAYQUE          reduce using rule 60 (expresion -> ID .)
    MENQUE          reduce using rule 60 (expresion -> ID .)
    MAYIGUALQUE     reduce using rule 60 (expresion -> ID .)
    MENIGUALQUE     reduce using rule 60 (expresion -> ID .)
    IGUALQUE        reduce using rule 60 (expresion -> ID .)
    NIGUALQUE       reduce using rule 60 (expresion -> ID .)
    MAIN            reduce using rule 60 (expresion -> ID .)
    PRINT           reduce using rule 60 (expresion -> ID .)
    VAR             reduce using rule 60 (expresion -> ID .)
    ID              reduce using rule 60 (expresion -> ID .)
    WHILE           reduce using rule 60 (expresion -> ID .)
    IF              reduce using rule 60 (expresion -> ID .)
    SWITCH          reduce using rule 60 (expresion -> ID .)
    FOR             reduce using rule 60 (expresion -> ID .)
    NULL            reduce using rule 60 (expresion -> ID .)
    NOT             reduce using rule 60 (expresion -> ID .)
    PARIZQ          reduce using rule 60 (expresion -> ID .)
    ENTERO          reduce using rule 60 (expresion -> ID .)
    DECIMAL         reduce using rule 60 (expresion -> ID .)
    CADENA          reduce using rule 60 (expresion -> ID .)
    CHARACTER       reduce using rule 60 (expresion -> ID .)
    TRUE            reduce using rule 60 (expresion -> ID .)
    FALSE           reduce using rule 60 (expresion -> ID .)
    BREAK           reduce using rule 60 (expresion -> ID .)
    $end            reduce using rule 60 (expresion -> ID .)
    PTCOMA          reduce using rule 60 (expresion -> ID .)
    LLAVDER         reduce using rule 60 (expresion -> ID .)
    DEFAULT         reduce using rule 60 (expresion -> ID .)
    CASE            reduce using rule 60 (expresion -> ID .)
    DOSPUNTOS       reduce using rule 60 (expresion -> ID .)


state 56

    (67) expresion_data_type -> INT .

    PARDER          reduce using rule 67 (expresion_data_type -> INT .)


state 57

    (68) expresion_data_type -> DOUBLE .

    PARDER          reduce using rule 68 (expresion_data_type -> DOUBLE .)


state 58

    (69) expresion_data_type -> STRING .

    PARDER          reduce using rule 69 (expresion_data_type -> STRING .)


state 59

    (70) expresion_data_type -> CHAR .

    PARDER          reduce using rule 70 (expresion_data_type -> CHAR .)


state 60

    (20) imprimir_instr -> PRINT PARIZQ . expresion PARDER def_instr_prima
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 90

state 61

    (21) definicion_instr -> VAR ID . def_instr_prima
    (23) def_asig_instr -> VAR ID . IGUAL expresion def_instr_prima
    (16) def_instr_prima -> . PTCOMA
    (17) def_instr_prima -> . empty
    (18) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
    IGUAL           shift and go to state 92
    PTCOMA          shift and go to state 70
    MAIN            reduce using rule 18 (empty -> .)
    PRINT           reduce using rule 18 (empty -> .)
    VAR             reduce using rule 18 (empty -> .)
    ID              reduce using rule 18 (empty -> .)
    WHILE           reduce using rule 18 (empty -> .)
    IF              reduce using rule 18 (empty -> .)
    SWITCH          reduce using rule 18 (empty -> .)
    FOR             reduce using rule 18 (empty -> .)
    NULL            reduce using rule 18 (empty -> .)
    MENOS           reduce using rule 18 (empty -> .)
    NOT             reduce using rule 18 (empty -> .)
    PARIZQ          reduce using rule 18 (empty -> .)
    ENTERO          reduce using rule 18 (empty -> .)
    DECIMAL         reduce using rule 18 (empty -> .)
    CADENA          reduce using rule 18 (empty -> .)
    CHARACTER       reduce using rule 18 (empty -> .)
    TRUE            reduce using rule 18 (empty -> .)
    FALSE           reduce using rule 18 (empty -> .)
    BREAK           reduce using rule 18 (empty -> .)
    $end            reduce using rule 18 (empty -> .)
    LLAVDER         reduce using rule 18 (empty -> .)
    DEFAULT         reduce using rule 18 (empty -> .)
    CASE            reduce using rule 18 (empty -> .)

  ! PTCOMA          [ reduce using rule 18 (empty -> .) ]

    def_instr_prima                shift and go to state 91
    empty                          shift and go to state 71

state 62

    (22) asignacion_instr -> ID IGUAL . expresion def_instr_prima
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 93

state 63

    (27) while_instr -> WHILE PARIZQ . expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 94

state 64

    (24) if_instr -> IF PARIZQ . expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> IF PARIZQ . expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> IF PARIZQ . expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 95

state 65

    (29) switch_instr -> SWITCH PARIZQ . expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> SWITCH PARIZQ . expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> SWITCH PARIZQ . expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 96

state 66

    (36) for_instr -> FOR PARIZQ . def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (37) def_asign_for -> . ID
    (38) def_asign_for -> . asignacion_instr
    (39) def_asign_for -> . def_asig_instr
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima

    ID              shift and go to state 98
    VAR             shift and go to state 101

    def_asign_for                  shift and go to state 97
    asignacion_instr               shift and go to state 99
    def_asig_instr                 shift and go to state 100

state 67

    (57) expresion -> MENOS expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 57 (expresion -> MENOS expresion .)
    MENOS           reduce using rule 57 (expresion -> MENOS expresion .)
    POR             reduce using rule 57 (expresion -> MENOS expresion .)
    DIVIDIDO        reduce using rule 57 (expresion -> MENOS expresion .)
    ELEVADO         reduce using rule 57 (expresion -> MENOS expresion .)
    MOD             reduce using rule 57 (expresion -> MENOS expresion .)
    AND             reduce using rule 57 (expresion -> MENOS expresion .)
    OR              reduce using rule 57 (expresion -> MENOS expresion .)
    MAYQUE          reduce using rule 57 (expresion -> MENOS expresion .)
    MENQUE          reduce using rule 57 (expresion -> MENOS expresion .)
    MAYIGUALQUE     reduce using rule 57 (expresion -> MENOS expresion .)
    MENIGUALQUE     reduce using rule 57 (expresion -> MENOS expresion .)
    IGUALQUE        reduce using rule 57 (expresion -> MENOS expresion .)
    NIGUALQUE       reduce using rule 57 (expresion -> MENOS expresion .)
    MAIN            reduce using rule 57 (expresion -> MENOS expresion .)
    PRINT           reduce using rule 57 (expresion -> MENOS expresion .)
    VAR             reduce using rule 57 (expresion -> MENOS expresion .)
    ID              reduce using rule 57 (expresion -> MENOS expresion .)
    WHILE           reduce using rule 57 (expresion -> MENOS expresion .)
    IF              reduce using rule 57 (expresion -> MENOS expresion .)
    SWITCH          reduce using rule 57 (expresion -> MENOS expresion .)
    FOR             reduce using rule 57 (expresion -> MENOS expresion .)
    NULL            reduce using rule 57 (expresion -> MENOS expresion .)
    NOT             reduce using rule 57 (expresion -> MENOS expresion .)
    PARIZQ          reduce using rule 57 (expresion -> MENOS expresion .)
    ENTERO          reduce using rule 57 (expresion -> MENOS expresion .)
    DECIMAL         reduce using rule 57 (expresion -> MENOS expresion .)
    CADENA          reduce using rule 57 (expresion -> MENOS expresion .)
    CHARACTER       reduce using rule 57 (expresion -> MENOS expresion .)
    TRUE            reduce using rule 57 (expresion -> MENOS expresion .)
    FALSE           reduce using rule 57 (expresion -> MENOS expresion .)
    BREAK           reduce using rule 57 (expresion -> MENOS expresion .)
    $end            reduce using rule 57 (expresion -> MENOS expresion .)
    PARDER          reduce using rule 57 (expresion -> MENOS expresion .)
    PTCOMA          reduce using rule 57 (expresion -> MENOS expresion .)
    LLAVDER         reduce using rule 57 (expresion -> MENOS expresion .)
    DEFAULT         reduce using rule 57 (expresion -> MENOS expresion .)
    CASE            reduce using rule 57 (expresion -> MENOS expresion .)
    DOSPUNTOS       reduce using rule 57 (expresion -> MENOS expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37

  ! INCREMENT       [ reduce using rule 57 (expresion -> MENOS expresion .) ]
  ! DECREMENT       [ reduce using rule 57 (expresion -> MENOS expresion .) ]
  ! MAS             [ shift and go to state 38 ]
  ! MENOS           [ shift and go to state 39 ]
  ! POR             [ shift and go to state 40 ]
  ! DIVIDIDO        [ shift and go to state 41 ]
  ! ELEVADO         [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! MAYQUE          [ shift and go to state 46 ]
  ! MENQUE          [ shift and go to state 47 ]
  ! MAYIGUALQUE     [ shift and go to state 48 ]
  ! MENIGUALQUE     [ shift and go to state 49 ]
  ! IGUALQUE        [ shift and go to state 50 ]
  ! NIGUALQUE       [ shift and go to state 51 ]


state 68

    (58) expresion -> NOT expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 58 (expresion -> NOT expresion .)
    OR              reduce using rule 58 (expresion -> NOT expresion .)
    MAIN            reduce using rule 58 (expresion -> NOT expresion .)
    PRINT           reduce using rule 58 (expresion -> NOT expresion .)
    VAR             reduce using rule 58 (expresion -> NOT expresion .)
    ID              reduce using rule 58 (expresion -> NOT expresion .)
    WHILE           reduce using rule 58 (expresion -> NOT expresion .)
    IF              reduce using rule 58 (expresion -> NOT expresion .)
    SWITCH          reduce using rule 58 (expresion -> NOT expresion .)
    FOR             reduce using rule 58 (expresion -> NOT expresion .)
    NULL            reduce using rule 58 (expresion -> NOT expresion .)
    NOT             reduce using rule 58 (expresion -> NOT expresion .)
    PARIZQ          reduce using rule 58 (expresion -> NOT expresion .)
    ENTERO          reduce using rule 58 (expresion -> NOT expresion .)
    DECIMAL         reduce using rule 58 (expresion -> NOT expresion .)
    CADENA          reduce using rule 58 (expresion -> NOT expresion .)
    CHARACTER       reduce using rule 58 (expresion -> NOT expresion .)
    TRUE            reduce using rule 58 (expresion -> NOT expresion .)
    FALSE           reduce using rule 58 (expresion -> NOT expresion .)
    BREAK           reduce using rule 58 (expresion -> NOT expresion .)
    $end            reduce using rule 58 (expresion -> NOT expresion .)
    PARDER          reduce using rule 58 (expresion -> NOT expresion .)
    PTCOMA          reduce using rule 58 (expresion -> NOT expresion .)
    LLAVDER         reduce using rule 58 (expresion -> NOT expresion .)
    DEFAULT         reduce using rule 58 (expresion -> NOT expresion .)
    CASE            reduce using rule 58 (expresion -> NOT expresion .)
    DOSPUNTOS       reduce using rule 58 (expresion -> NOT expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51

  ! INCREMENT       [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! DECREMENT       [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! MAS             [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! MENOS           [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! POR             [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! DIVIDIDO        [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! ELEVADO         [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! MOD             [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! MAYQUE          [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! MENQUE          [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! MAYIGUALQUE     [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! MENIGUALQUE     [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! IGUALQUE        [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! NIGUALQUE       [ reduce using rule 58 (expresion -> NOT expresion .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 69

    (41) expresion -> expresion INCREMENT def_instr_prima .

    INCREMENT       reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    DECREMENT       reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    MAS             reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    MENOS           reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    POR             reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    DIVIDIDO        reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    ELEVADO         reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    MOD             reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    AND             reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    OR              reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    MAYQUE          reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    MENQUE          reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    MAYIGUALQUE     reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    MENIGUALQUE     reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    IGUALQUE        reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    NIGUALQUE       reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    MAIN            reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    PRINT           reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    VAR             reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    ID              reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    WHILE           reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    IF              reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    SWITCH          reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    FOR             reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    NULL            reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    NOT             reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    PARIZQ          reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    ENTERO          reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    DECIMAL         reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    CADENA          reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    CHARACTER       reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    TRUE            reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    FALSE           reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    BREAK           reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    $end            reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    PARDER          reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    PTCOMA          reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    LLAVDER         reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    DEFAULT         reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    CASE            reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)
    DOSPUNTOS       reduce using rule 41 (expresion -> expresion INCREMENT def_instr_prima .)


state 70

    (16) def_instr_prima -> PTCOMA .

    INCREMENT       reduce using rule 16 (def_instr_prima -> PTCOMA .)
    DECREMENT       reduce using rule 16 (def_instr_prima -> PTCOMA .)
    MAS             reduce using rule 16 (def_instr_prima -> PTCOMA .)
    MENOS           reduce using rule 16 (def_instr_prima -> PTCOMA .)
    POR             reduce using rule 16 (def_instr_prima -> PTCOMA .)
    DIVIDIDO        reduce using rule 16 (def_instr_prima -> PTCOMA .)
    ELEVADO         reduce using rule 16 (def_instr_prima -> PTCOMA .)
    MOD             reduce using rule 16 (def_instr_prima -> PTCOMA .)
    AND             reduce using rule 16 (def_instr_prima -> PTCOMA .)
    OR              reduce using rule 16 (def_instr_prima -> PTCOMA .)
    MAYQUE          reduce using rule 16 (def_instr_prima -> PTCOMA .)
    MENQUE          reduce using rule 16 (def_instr_prima -> PTCOMA .)
    MAYIGUALQUE     reduce using rule 16 (def_instr_prima -> PTCOMA .)
    MENIGUALQUE     reduce using rule 16 (def_instr_prima -> PTCOMA .)
    IGUALQUE        reduce using rule 16 (def_instr_prima -> PTCOMA .)
    NIGUALQUE       reduce using rule 16 (def_instr_prima -> PTCOMA .)
    MAIN            reduce using rule 16 (def_instr_prima -> PTCOMA .)
    PRINT           reduce using rule 16 (def_instr_prima -> PTCOMA .)
    VAR             reduce using rule 16 (def_instr_prima -> PTCOMA .)
    ID              reduce using rule 16 (def_instr_prima -> PTCOMA .)
    WHILE           reduce using rule 16 (def_instr_prima -> PTCOMA .)
    IF              reduce using rule 16 (def_instr_prima -> PTCOMA .)
    SWITCH          reduce using rule 16 (def_instr_prima -> PTCOMA .)
    FOR             reduce using rule 16 (def_instr_prima -> PTCOMA .)
    NULL            reduce using rule 16 (def_instr_prima -> PTCOMA .)
    NOT             reduce using rule 16 (def_instr_prima -> PTCOMA .)
    PARIZQ          reduce using rule 16 (def_instr_prima -> PTCOMA .)
    ENTERO          reduce using rule 16 (def_instr_prima -> PTCOMA .)
    DECIMAL         reduce using rule 16 (def_instr_prima -> PTCOMA .)
    CADENA          reduce using rule 16 (def_instr_prima -> PTCOMA .)
    CHARACTER       reduce using rule 16 (def_instr_prima -> PTCOMA .)
    TRUE            reduce using rule 16 (def_instr_prima -> PTCOMA .)
    FALSE           reduce using rule 16 (def_instr_prima -> PTCOMA .)
    BREAK           reduce using rule 16 (def_instr_prima -> PTCOMA .)
    $end            reduce using rule 16 (def_instr_prima -> PTCOMA .)
    PARDER          reduce using rule 16 (def_instr_prima -> PTCOMA .)
    PTCOMA          reduce using rule 16 (def_instr_prima -> PTCOMA .)
    LLAVDER         reduce using rule 16 (def_instr_prima -> PTCOMA .)
    DEFAULT         reduce using rule 16 (def_instr_prima -> PTCOMA .)
    CASE            reduce using rule 16 (def_instr_prima -> PTCOMA .)
    DOSPUNTOS       reduce using rule 16 (def_instr_prima -> PTCOMA .)


state 71

    (17) def_instr_prima -> empty .

    INCREMENT       reduce using rule 17 (def_instr_prima -> empty .)
    DECREMENT       reduce using rule 17 (def_instr_prima -> empty .)
    MAS             reduce using rule 17 (def_instr_prima -> empty .)
    MENOS           reduce using rule 17 (def_instr_prima -> empty .)
    POR             reduce using rule 17 (def_instr_prima -> empty .)
    DIVIDIDO        reduce using rule 17 (def_instr_prima -> empty .)
    ELEVADO         reduce using rule 17 (def_instr_prima -> empty .)
    MOD             reduce using rule 17 (def_instr_prima -> empty .)
    AND             reduce using rule 17 (def_instr_prima -> empty .)
    OR              reduce using rule 17 (def_instr_prima -> empty .)
    MAYQUE          reduce using rule 17 (def_instr_prima -> empty .)
    MENQUE          reduce using rule 17 (def_instr_prima -> empty .)
    MAYIGUALQUE     reduce using rule 17 (def_instr_prima -> empty .)
    MENIGUALQUE     reduce using rule 17 (def_instr_prima -> empty .)
    IGUALQUE        reduce using rule 17 (def_instr_prima -> empty .)
    NIGUALQUE       reduce using rule 17 (def_instr_prima -> empty .)
    MAIN            reduce using rule 17 (def_instr_prima -> empty .)
    PRINT           reduce using rule 17 (def_instr_prima -> empty .)
    VAR             reduce using rule 17 (def_instr_prima -> empty .)
    ID              reduce using rule 17 (def_instr_prima -> empty .)
    WHILE           reduce using rule 17 (def_instr_prima -> empty .)
    IF              reduce using rule 17 (def_instr_prima -> empty .)
    SWITCH          reduce using rule 17 (def_instr_prima -> empty .)
    FOR             reduce using rule 17 (def_instr_prima -> empty .)
    NULL            reduce using rule 17 (def_instr_prima -> empty .)
    NOT             reduce using rule 17 (def_instr_prima -> empty .)
    PARIZQ          reduce using rule 17 (def_instr_prima -> empty .)
    ENTERO          reduce using rule 17 (def_instr_prima -> empty .)
    DECIMAL         reduce using rule 17 (def_instr_prima -> empty .)
    CADENA          reduce using rule 17 (def_instr_prima -> empty .)
    CHARACTER       reduce using rule 17 (def_instr_prima -> empty .)
    TRUE            reduce using rule 17 (def_instr_prima -> empty .)
    FALSE           reduce using rule 17 (def_instr_prima -> empty .)
    BREAK           reduce using rule 17 (def_instr_prima -> empty .)
    $end            reduce using rule 17 (def_instr_prima -> empty .)
    PARDER          reduce using rule 17 (def_instr_prima -> empty .)
    PTCOMA          reduce using rule 17 (def_instr_prima -> empty .)
    LLAVDER         reduce using rule 17 (def_instr_prima -> empty .)
    DEFAULT         reduce using rule 17 (def_instr_prima -> empty .)
    CASE            reduce using rule 17 (def_instr_prima -> empty .)
    DOSPUNTOS       reduce using rule 17 (def_instr_prima -> empty .)


state 72

    (42) expresion -> expresion DECREMENT def_instr_prima .

    INCREMENT       reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    DECREMENT       reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    MAS             reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    MENOS           reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    POR             reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    DIVIDIDO        reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    ELEVADO         reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    MOD             reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    AND             reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    OR              reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    MAYQUE          reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    MENQUE          reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    MAYIGUALQUE     reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    MENIGUALQUE     reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    IGUALQUE        reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    NIGUALQUE       reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    MAIN            reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    PRINT           reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    VAR             reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    ID              reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    WHILE           reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    IF              reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    SWITCH          reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    FOR             reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    NULL            reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    NOT             reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    PARIZQ          reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    ENTERO          reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    DECIMAL         reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    CADENA          reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    CHARACTER       reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    TRUE            reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    FALSE           reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    BREAK           reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    $end            reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    PARDER          reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    PTCOMA          reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    LLAVDER         reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    DEFAULT         reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    CASE            reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)
    DOSPUNTOS       reduce using rule 42 (expresion -> expresion DECREMENT def_instr_prima .)


state 73

    (43) expresion -> expresion MAS expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 43 (expresion -> expresion MAS expresion .)
    MENOS           reduce using rule 43 (expresion -> expresion MAS expresion .)
    AND             reduce using rule 43 (expresion -> expresion MAS expresion .)
    OR              reduce using rule 43 (expresion -> expresion MAS expresion .)
    MAYQUE          reduce using rule 43 (expresion -> expresion MAS expresion .)
    MENQUE          reduce using rule 43 (expresion -> expresion MAS expresion .)
    MAYIGUALQUE     reduce using rule 43 (expresion -> expresion MAS expresion .)
    MENIGUALQUE     reduce using rule 43 (expresion -> expresion MAS expresion .)
    IGUALQUE        reduce using rule 43 (expresion -> expresion MAS expresion .)
    NIGUALQUE       reduce using rule 43 (expresion -> expresion MAS expresion .)
    MAIN            reduce using rule 43 (expresion -> expresion MAS expresion .)
    PRINT           reduce using rule 43 (expresion -> expresion MAS expresion .)
    VAR             reduce using rule 43 (expresion -> expresion MAS expresion .)
    ID              reduce using rule 43 (expresion -> expresion MAS expresion .)
    WHILE           reduce using rule 43 (expresion -> expresion MAS expresion .)
    IF              reduce using rule 43 (expresion -> expresion MAS expresion .)
    SWITCH          reduce using rule 43 (expresion -> expresion MAS expresion .)
    FOR             reduce using rule 43 (expresion -> expresion MAS expresion .)
    NULL            reduce using rule 43 (expresion -> expresion MAS expresion .)
    NOT             reduce using rule 43 (expresion -> expresion MAS expresion .)
    PARIZQ          reduce using rule 43 (expresion -> expresion MAS expresion .)
    ENTERO          reduce using rule 43 (expresion -> expresion MAS expresion .)
    DECIMAL         reduce using rule 43 (expresion -> expresion MAS expresion .)
    CADENA          reduce using rule 43 (expresion -> expresion MAS expresion .)
    CHARACTER       reduce using rule 43 (expresion -> expresion MAS expresion .)
    TRUE            reduce using rule 43 (expresion -> expresion MAS expresion .)
    FALSE           reduce using rule 43 (expresion -> expresion MAS expresion .)
    BREAK           reduce using rule 43 (expresion -> expresion MAS expresion .)
    $end            reduce using rule 43 (expresion -> expresion MAS expresion .)
    PARDER          reduce using rule 43 (expresion -> expresion MAS expresion .)
    PTCOMA          reduce using rule 43 (expresion -> expresion MAS expresion .)
    LLAVDER         reduce using rule 43 (expresion -> expresion MAS expresion .)
    DEFAULT         reduce using rule 43 (expresion -> expresion MAS expresion .)
    CASE            reduce using rule 43 (expresion -> expresion MAS expresion .)
    DOSPUNTOS       reduce using rule 43 (expresion -> expresion MAS expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43

  ! INCREMENT       [ reduce using rule 43 (expresion -> expresion MAS expresion .) ]
  ! DECREMENT       [ reduce using rule 43 (expresion -> expresion MAS expresion .) ]
  ! POR             [ reduce using rule 43 (expresion -> expresion MAS expresion .) ]
  ! DIVIDIDO        [ reduce using rule 43 (expresion -> expresion MAS expresion .) ]
  ! ELEVADO         [ reduce using rule 43 (expresion -> expresion MAS expresion .) ]
  ! MOD             [ reduce using rule 43 (expresion -> expresion MAS expresion .) ]
  ! MAS             [ shift and go to state 38 ]
  ! MENOS           [ shift and go to state 39 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! MAYQUE          [ shift and go to state 46 ]
  ! MENQUE          [ shift and go to state 47 ]
  ! MAYIGUALQUE     [ shift and go to state 48 ]
  ! MENIGUALQUE     [ shift and go to state 49 ]
  ! IGUALQUE        [ shift and go to state 50 ]
  ! NIGUALQUE       [ shift and go to state 51 ]


state 74

    (44) expresion -> expresion MENOS expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 44 (expresion -> expresion MENOS expresion .)
    MENOS           reduce using rule 44 (expresion -> expresion MENOS expresion .)
    AND             reduce using rule 44 (expresion -> expresion MENOS expresion .)
    OR              reduce using rule 44 (expresion -> expresion MENOS expresion .)
    MAYQUE          reduce using rule 44 (expresion -> expresion MENOS expresion .)
    MENQUE          reduce using rule 44 (expresion -> expresion MENOS expresion .)
    MAYIGUALQUE     reduce using rule 44 (expresion -> expresion MENOS expresion .)
    MENIGUALQUE     reduce using rule 44 (expresion -> expresion MENOS expresion .)
    IGUALQUE        reduce using rule 44 (expresion -> expresion MENOS expresion .)
    NIGUALQUE       reduce using rule 44 (expresion -> expresion MENOS expresion .)
    MAIN            reduce using rule 44 (expresion -> expresion MENOS expresion .)
    PRINT           reduce using rule 44 (expresion -> expresion MENOS expresion .)
    VAR             reduce using rule 44 (expresion -> expresion MENOS expresion .)
    ID              reduce using rule 44 (expresion -> expresion MENOS expresion .)
    WHILE           reduce using rule 44 (expresion -> expresion MENOS expresion .)
    IF              reduce using rule 44 (expresion -> expresion MENOS expresion .)
    SWITCH          reduce using rule 44 (expresion -> expresion MENOS expresion .)
    FOR             reduce using rule 44 (expresion -> expresion MENOS expresion .)
    NULL            reduce using rule 44 (expresion -> expresion MENOS expresion .)
    NOT             reduce using rule 44 (expresion -> expresion MENOS expresion .)
    PARIZQ          reduce using rule 44 (expresion -> expresion MENOS expresion .)
    ENTERO          reduce using rule 44 (expresion -> expresion MENOS expresion .)
    DECIMAL         reduce using rule 44 (expresion -> expresion MENOS expresion .)
    CADENA          reduce using rule 44 (expresion -> expresion MENOS expresion .)
    CHARACTER       reduce using rule 44 (expresion -> expresion MENOS expresion .)
    TRUE            reduce using rule 44 (expresion -> expresion MENOS expresion .)
    FALSE           reduce using rule 44 (expresion -> expresion MENOS expresion .)
    BREAK           reduce using rule 44 (expresion -> expresion MENOS expresion .)
    $end            reduce using rule 44 (expresion -> expresion MENOS expresion .)
    PARDER          reduce using rule 44 (expresion -> expresion MENOS expresion .)
    PTCOMA          reduce using rule 44 (expresion -> expresion MENOS expresion .)
    LLAVDER         reduce using rule 44 (expresion -> expresion MENOS expresion .)
    DEFAULT         reduce using rule 44 (expresion -> expresion MENOS expresion .)
    CASE            reduce using rule 44 (expresion -> expresion MENOS expresion .)
    DOSPUNTOS       reduce using rule 44 (expresion -> expresion MENOS expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43

  ! INCREMENT       [ reduce using rule 44 (expresion -> expresion MENOS expresion .) ]
  ! DECREMENT       [ reduce using rule 44 (expresion -> expresion MENOS expresion .) ]
  ! POR             [ reduce using rule 44 (expresion -> expresion MENOS expresion .) ]
  ! DIVIDIDO        [ reduce using rule 44 (expresion -> expresion MENOS expresion .) ]
  ! ELEVADO         [ reduce using rule 44 (expresion -> expresion MENOS expresion .) ]
  ! MOD             [ reduce using rule 44 (expresion -> expresion MENOS expresion .) ]
  ! MAS             [ shift and go to state 38 ]
  ! MENOS           [ shift and go to state 39 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! MAYQUE          [ shift and go to state 46 ]
  ! MENQUE          [ shift and go to state 47 ]
  ! MAYIGUALQUE     [ shift and go to state 48 ]
  ! MENIGUALQUE     [ shift and go to state 49 ]
  ! IGUALQUE        [ shift and go to state 50 ]
  ! NIGUALQUE       [ shift and go to state 51 ]


state 75

    (45) expresion -> expresion POR expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 45 (expresion -> expresion POR expresion .)
    MENOS           reduce using rule 45 (expresion -> expresion POR expresion .)
    POR             reduce using rule 45 (expresion -> expresion POR expresion .)
    DIVIDIDO        reduce using rule 45 (expresion -> expresion POR expresion .)
    MOD             reduce using rule 45 (expresion -> expresion POR expresion .)
    AND             reduce using rule 45 (expresion -> expresion POR expresion .)
    OR              reduce using rule 45 (expresion -> expresion POR expresion .)
    MAYQUE          reduce using rule 45 (expresion -> expresion POR expresion .)
    MENQUE          reduce using rule 45 (expresion -> expresion POR expresion .)
    MAYIGUALQUE     reduce using rule 45 (expresion -> expresion POR expresion .)
    MENIGUALQUE     reduce using rule 45 (expresion -> expresion POR expresion .)
    IGUALQUE        reduce using rule 45 (expresion -> expresion POR expresion .)
    NIGUALQUE       reduce using rule 45 (expresion -> expresion POR expresion .)
    MAIN            reduce using rule 45 (expresion -> expresion POR expresion .)
    PRINT           reduce using rule 45 (expresion -> expresion POR expresion .)
    VAR             reduce using rule 45 (expresion -> expresion POR expresion .)
    ID              reduce using rule 45 (expresion -> expresion POR expresion .)
    WHILE           reduce using rule 45 (expresion -> expresion POR expresion .)
    IF              reduce using rule 45 (expresion -> expresion POR expresion .)
    SWITCH          reduce using rule 45 (expresion -> expresion POR expresion .)
    FOR             reduce using rule 45 (expresion -> expresion POR expresion .)
    NULL            reduce using rule 45 (expresion -> expresion POR expresion .)
    NOT             reduce using rule 45 (expresion -> expresion POR expresion .)
    PARIZQ          reduce using rule 45 (expresion -> expresion POR expresion .)
    ENTERO          reduce using rule 45 (expresion -> expresion POR expresion .)
    DECIMAL         reduce using rule 45 (expresion -> expresion POR expresion .)
    CADENA          reduce using rule 45 (expresion -> expresion POR expresion .)
    CHARACTER       reduce using rule 45 (expresion -> expresion POR expresion .)
    TRUE            reduce using rule 45 (expresion -> expresion POR expresion .)
    FALSE           reduce using rule 45 (expresion -> expresion POR expresion .)
    BREAK           reduce using rule 45 (expresion -> expresion POR expresion .)
    $end            reduce using rule 45 (expresion -> expresion POR expresion .)
    PARDER          reduce using rule 45 (expresion -> expresion POR expresion .)
    PTCOMA          reduce using rule 45 (expresion -> expresion POR expresion .)
    LLAVDER         reduce using rule 45 (expresion -> expresion POR expresion .)
    DEFAULT         reduce using rule 45 (expresion -> expresion POR expresion .)
    CASE            reduce using rule 45 (expresion -> expresion POR expresion .)
    DOSPUNTOS       reduce using rule 45 (expresion -> expresion POR expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    ELEVADO         shift and go to state 42

  ! INCREMENT       [ reduce using rule 45 (expresion -> expresion POR expresion .) ]
  ! DECREMENT       [ reduce using rule 45 (expresion -> expresion POR expresion .) ]
  ! ELEVADO         [ reduce using rule 45 (expresion -> expresion POR expresion .) ]
  ! MAS             [ shift and go to state 38 ]
  ! MENOS           [ shift and go to state 39 ]
  ! POR             [ shift and go to state 40 ]
  ! DIVIDIDO        [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! MAYQUE          [ shift and go to state 46 ]
  ! MENQUE          [ shift and go to state 47 ]
  ! MAYIGUALQUE     [ shift and go to state 48 ]
  ! MENIGUALQUE     [ shift and go to state 49 ]
  ! IGUALQUE        [ shift and go to state 50 ]
  ! NIGUALQUE       [ shift and go to state 51 ]


state 76

    (46) expresion -> expresion DIVIDIDO expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    MENOS           reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    POR             reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    DIVIDIDO        reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    MOD             reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    AND             reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    OR              reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    MAYQUE          reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    MENQUE          reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    MAYIGUALQUE     reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    MENIGUALQUE     reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    IGUALQUE        reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    NIGUALQUE       reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    MAIN            reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    PRINT           reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    VAR             reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    ID              reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    WHILE           reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    IF              reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    SWITCH          reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    FOR             reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    NULL            reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    NOT             reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    PARIZQ          reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    ENTERO          reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    DECIMAL         reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    CADENA          reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    CHARACTER       reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    TRUE            reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    FALSE           reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    BREAK           reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    $end            reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    PARDER          reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    PTCOMA          reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    LLAVDER         reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    DEFAULT         reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    CASE            reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    DOSPUNTOS       reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    ELEVADO         shift and go to state 42

  ! INCREMENT       [ reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .) ]
  ! DECREMENT       [ reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .) ]
  ! ELEVADO         [ reduce using rule 46 (expresion -> expresion DIVIDIDO expresion .) ]
  ! MAS             [ shift and go to state 38 ]
  ! MENOS           [ shift and go to state 39 ]
  ! POR             [ shift and go to state 40 ]
  ! DIVIDIDO        [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! MAYQUE          [ shift and go to state 46 ]
  ! MENQUE          [ shift and go to state 47 ]
  ! MAYIGUALQUE     [ shift and go to state 48 ]
  ! MENIGUALQUE     [ shift and go to state 49 ]
  ! IGUALQUE        [ shift and go to state 50 ]
  ! NIGUALQUE       [ shift and go to state 51 ]


state 77

    (47) expresion -> expresion ELEVADO expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    MENOS           reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    POR             reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    DIVIDIDO        reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    ELEVADO         reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    MOD             reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    AND             reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    OR              reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    MAYQUE          reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    MENQUE          reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    MAYIGUALQUE     reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    MENIGUALQUE     reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    IGUALQUE        reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    NIGUALQUE       reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    MAIN            reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    PRINT           reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    VAR             reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    ID              reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    WHILE           reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    IF              reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    SWITCH          reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    FOR             reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    NULL            reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    NOT             reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    PARIZQ          reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    ENTERO          reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    DECIMAL         reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    CADENA          reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    CHARACTER       reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    TRUE            reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    FALSE           reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    BREAK           reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    $end            reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    PARDER          reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    PTCOMA          reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    LLAVDER         reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    DEFAULT         reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    CASE            reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    DOSPUNTOS       reduce using rule 47 (expresion -> expresion ELEVADO expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37

  ! INCREMENT       [ reduce using rule 47 (expresion -> expresion ELEVADO expresion .) ]
  ! DECREMENT       [ reduce using rule 47 (expresion -> expresion ELEVADO expresion .) ]
  ! MAS             [ shift and go to state 38 ]
  ! MENOS           [ shift and go to state 39 ]
  ! POR             [ shift and go to state 40 ]
  ! DIVIDIDO        [ shift and go to state 41 ]
  ! ELEVADO         [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! MAYQUE          [ shift and go to state 46 ]
  ! MENQUE          [ shift and go to state 47 ]
  ! MAYIGUALQUE     [ shift and go to state 48 ]
  ! MENIGUALQUE     [ shift and go to state 49 ]
  ! IGUALQUE        [ shift and go to state 50 ]
  ! NIGUALQUE       [ shift and go to state 51 ]


state 78

    (48) expresion -> expresion MOD expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 48 (expresion -> expresion MOD expresion .)
    MENOS           reduce using rule 48 (expresion -> expresion MOD expresion .)
    POR             reduce using rule 48 (expresion -> expresion MOD expresion .)
    DIVIDIDO        reduce using rule 48 (expresion -> expresion MOD expresion .)
    MOD             reduce using rule 48 (expresion -> expresion MOD expresion .)
    AND             reduce using rule 48 (expresion -> expresion MOD expresion .)
    OR              reduce using rule 48 (expresion -> expresion MOD expresion .)
    MAYQUE          reduce using rule 48 (expresion -> expresion MOD expresion .)
    MENQUE          reduce using rule 48 (expresion -> expresion MOD expresion .)
    MAYIGUALQUE     reduce using rule 48 (expresion -> expresion MOD expresion .)
    MENIGUALQUE     reduce using rule 48 (expresion -> expresion MOD expresion .)
    IGUALQUE        reduce using rule 48 (expresion -> expresion MOD expresion .)
    NIGUALQUE       reduce using rule 48 (expresion -> expresion MOD expresion .)
    MAIN            reduce using rule 48 (expresion -> expresion MOD expresion .)
    PRINT           reduce using rule 48 (expresion -> expresion MOD expresion .)
    VAR             reduce using rule 48 (expresion -> expresion MOD expresion .)
    ID              reduce using rule 48 (expresion -> expresion MOD expresion .)
    WHILE           reduce using rule 48 (expresion -> expresion MOD expresion .)
    IF              reduce using rule 48 (expresion -> expresion MOD expresion .)
    SWITCH          reduce using rule 48 (expresion -> expresion MOD expresion .)
    FOR             reduce using rule 48 (expresion -> expresion MOD expresion .)
    NULL            reduce using rule 48 (expresion -> expresion MOD expresion .)
    NOT             reduce using rule 48 (expresion -> expresion MOD expresion .)
    PARIZQ          reduce using rule 48 (expresion -> expresion MOD expresion .)
    ENTERO          reduce using rule 48 (expresion -> expresion MOD expresion .)
    DECIMAL         reduce using rule 48 (expresion -> expresion MOD expresion .)
    CADENA          reduce using rule 48 (expresion -> expresion MOD expresion .)
    CHARACTER       reduce using rule 48 (expresion -> expresion MOD expresion .)
    TRUE            reduce using rule 48 (expresion -> expresion MOD expresion .)
    FALSE           reduce using rule 48 (expresion -> expresion MOD expresion .)
    BREAK           reduce using rule 48 (expresion -> expresion MOD expresion .)
    $end            reduce using rule 48 (expresion -> expresion MOD expresion .)
    PARDER          reduce using rule 48 (expresion -> expresion MOD expresion .)
    PTCOMA          reduce using rule 48 (expresion -> expresion MOD expresion .)
    LLAVDER         reduce using rule 48 (expresion -> expresion MOD expresion .)
    DEFAULT         reduce using rule 48 (expresion -> expresion MOD expresion .)
    CASE            reduce using rule 48 (expresion -> expresion MOD expresion .)
    DOSPUNTOS       reduce using rule 48 (expresion -> expresion MOD expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    ELEVADO         shift and go to state 42

  ! INCREMENT       [ reduce using rule 48 (expresion -> expresion MOD expresion .) ]
  ! DECREMENT       [ reduce using rule 48 (expresion -> expresion MOD expresion .) ]
  ! ELEVADO         [ reduce using rule 48 (expresion -> expresion MOD expresion .) ]
  ! MAS             [ shift and go to state 38 ]
  ! MENOS           [ shift and go to state 39 ]
  ! POR             [ shift and go to state 40 ]
  ! DIVIDIDO        [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! MAYQUE          [ shift and go to state 46 ]
  ! MENQUE          [ shift and go to state 47 ]
  ! MAYIGUALQUE     [ shift and go to state 48 ]
  ! MENIGUALQUE     [ shift and go to state 49 ]
  ! IGUALQUE        [ shift and go to state 50 ]
  ! NIGUALQUE       [ shift and go to state 51 ]


state 79

    (49) expresion -> expresion AND expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 49 (expresion -> expresion AND expresion .)
    OR              reduce using rule 49 (expresion -> expresion AND expresion .)
    MAIN            reduce using rule 49 (expresion -> expresion AND expresion .)
    PRINT           reduce using rule 49 (expresion -> expresion AND expresion .)
    VAR             reduce using rule 49 (expresion -> expresion AND expresion .)
    ID              reduce using rule 49 (expresion -> expresion AND expresion .)
    WHILE           reduce using rule 49 (expresion -> expresion AND expresion .)
    IF              reduce using rule 49 (expresion -> expresion AND expresion .)
    SWITCH          reduce using rule 49 (expresion -> expresion AND expresion .)
    FOR             reduce using rule 49 (expresion -> expresion AND expresion .)
    NULL            reduce using rule 49 (expresion -> expresion AND expresion .)
    NOT             reduce using rule 49 (expresion -> expresion AND expresion .)
    PARIZQ          reduce using rule 49 (expresion -> expresion AND expresion .)
    ENTERO          reduce using rule 49 (expresion -> expresion AND expresion .)
    DECIMAL         reduce using rule 49 (expresion -> expresion AND expresion .)
    CADENA          reduce using rule 49 (expresion -> expresion AND expresion .)
    CHARACTER       reduce using rule 49 (expresion -> expresion AND expresion .)
    TRUE            reduce using rule 49 (expresion -> expresion AND expresion .)
    FALSE           reduce using rule 49 (expresion -> expresion AND expresion .)
    BREAK           reduce using rule 49 (expresion -> expresion AND expresion .)
    $end            reduce using rule 49 (expresion -> expresion AND expresion .)
    PARDER          reduce using rule 49 (expresion -> expresion AND expresion .)
    PTCOMA          reduce using rule 49 (expresion -> expresion AND expresion .)
    LLAVDER         reduce using rule 49 (expresion -> expresion AND expresion .)
    DEFAULT         reduce using rule 49 (expresion -> expresion AND expresion .)
    CASE            reduce using rule 49 (expresion -> expresion AND expresion .)
    DOSPUNTOS       reduce using rule 49 (expresion -> expresion AND expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51

  ! INCREMENT       [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! DECREMENT       [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! MAS             [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! MENOS           [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! POR             [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! DIVIDIDO        [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! ELEVADO         [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! MOD             [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! MAYQUE          [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! MENQUE          [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! MAYIGUALQUE     [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! MENIGUALQUE     [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! IGUALQUE        [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! NIGUALQUE       [ reduce using rule 49 (expresion -> expresion AND expresion .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 80

    (50) expresion -> expresion OR expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 50 (expresion -> expresion OR expresion .)
    OR              reduce using rule 50 (expresion -> expresion OR expresion .)
    MAIN            reduce using rule 50 (expresion -> expresion OR expresion .)
    PRINT           reduce using rule 50 (expresion -> expresion OR expresion .)
    VAR             reduce using rule 50 (expresion -> expresion OR expresion .)
    ID              reduce using rule 50 (expresion -> expresion OR expresion .)
    WHILE           reduce using rule 50 (expresion -> expresion OR expresion .)
    IF              reduce using rule 50 (expresion -> expresion OR expresion .)
    SWITCH          reduce using rule 50 (expresion -> expresion OR expresion .)
    FOR             reduce using rule 50 (expresion -> expresion OR expresion .)
    NULL            reduce using rule 50 (expresion -> expresion OR expresion .)
    NOT             reduce using rule 50 (expresion -> expresion OR expresion .)
    PARIZQ          reduce using rule 50 (expresion -> expresion OR expresion .)
    ENTERO          reduce using rule 50 (expresion -> expresion OR expresion .)
    DECIMAL         reduce using rule 50 (expresion -> expresion OR expresion .)
    CADENA          reduce using rule 50 (expresion -> expresion OR expresion .)
    CHARACTER       reduce using rule 50 (expresion -> expresion OR expresion .)
    TRUE            reduce using rule 50 (expresion -> expresion OR expresion .)
    FALSE           reduce using rule 50 (expresion -> expresion OR expresion .)
    BREAK           reduce using rule 50 (expresion -> expresion OR expresion .)
    $end            reduce using rule 50 (expresion -> expresion OR expresion .)
    PARDER          reduce using rule 50 (expresion -> expresion OR expresion .)
    PTCOMA          reduce using rule 50 (expresion -> expresion OR expresion .)
    LLAVDER         reduce using rule 50 (expresion -> expresion OR expresion .)
    DEFAULT         reduce using rule 50 (expresion -> expresion OR expresion .)
    CASE            reduce using rule 50 (expresion -> expresion OR expresion .)
    DOSPUNTOS       reduce using rule 50 (expresion -> expresion OR expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51

  ! INCREMENT       [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! DECREMENT       [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! MAS             [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! MENOS           [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! POR             [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! DIVIDIDO        [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! ELEVADO         [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! MOD             [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! MAYQUE          [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! MENQUE          [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! MAYIGUALQUE     [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! MENIGUALQUE     [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! IGUALQUE        [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! NIGUALQUE       [ reduce using rule 50 (expresion -> expresion OR expresion .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 81

    (51) expresion -> expresion MAYQUE expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    OR              reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    MAYQUE          reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    MENQUE          reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    MAYIGUALQUE     reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    MENIGUALQUE     reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    IGUALQUE        reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    NIGUALQUE       reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    MAIN            reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    PRINT           reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    VAR             reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    ID              reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    WHILE           reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    IF              reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    SWITCH          reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    FOR             reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    NULL            reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    NOT             reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    PARIZQ          reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    ENTERO          reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    DECIMAL         reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    CADENA          reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    CHARACTER       reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    TRUE            reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    FALSE           reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    BREAK           reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    $end            reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    PARDER          reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    PTCOMA          reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    LLAVDER         reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    DEFAULT         reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    CASE            reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    DOSPUNTOS       reduce using rule 51 (expresion -> expresion MAYQUE expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43

  ! INCREMENT       [ reduce using rule 51 (expresion -> expresion MAYQUE expresion .) ]
  ! DECREMENT       [ reduce using rule 51 (expresion -> expresion MAYQUE expresion .) ]
  ! MAS             [ reduce using rule 51 (expresion -> expresion MAYQUE expresion .) ]
  ! MENOS           [ reduce using rule 51 (expresion -> expresion MAYQUE expresion .) ]
  ! POR             [ reduce using rule 51 (expresion -> expresion MAYQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 51 (expresion -> expresion MAYQUE expresion .) ]
  ! ELEVADO         [ reduce using rule 51 (expresion -> expresion MAYQUE expresion .) ]
  ! MOD             [ reduce using rule 51 (expresion -> expresion MAYQUE expresion .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! MAYQUE          [ shift and go to state 46 ]
  ! MENQUE          [ shift and go to state 47 ]
  ! MAYIGUALQUE     [ shift and go to state 48 ]
  ! MENIGUALQUE     [ shift and go to state 49 ]
  ! IGUALQUE        [ shift and go to state 50 ]
  ! NIGUALQUE       [ shift and go to state 51 ]


state 82

    (52) expresion -> expresion MENQUE expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    OR              reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    MAYQUE          reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    MENQUE          reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    MAYIGUALQUE     reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    MENIGUALQUE     reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    IGUALQUE        reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    NIGUALQUE       reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    MAIN            reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    PRINT           reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    VAR             reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    ID              reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    WHILE           reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    IF              reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    SWITCH          reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    FOR             reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    NULL            reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    NOT             reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    PARIZQ          reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    ENTERO          reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    DECIMAL         reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    CADENA          reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    CHARACTER       reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    TRUE            reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    FALSE           reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    BREAK           reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    $end            reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    PARDER          reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    PTCOMA          reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    LLAVDER         reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    DEFAULT         reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    CASE            reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    DOSPUNTOS       reduce using rule 52 (expresion -> expresion MENQUE expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43

  ! INCREMENT       [ reduce using rule 52 (expresion -> expresion MENQUE expresion .) ]
  ! DECREMENT       [ reduce using rule 52 (expresion -> expresion MENQUE expresion .) ]
  ! MAS             [ reduce using rule 52 (expresion -> expresion MENQUE expresion .) ]
  ! MENOS           [ reduce using rule 52 (expresion -> expresion MENQUE expresion .) ]
  ! POR             [ reduce using rule 52 (expresion -> expresion MENQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 52 (expresion -> expresion MENQUE expresion .) ]
  ! ELEVADO         [ reduce using rule 52 (expresion -> expresion MENQUE expresion .) ]
  ! MOD             [ reduce using rule 52 (expresion -> expresion MENQUE expresion .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! MAYQUE          [ shift and go to state 46 ]
  ! MENQUE          [ shift and go to state 47 ]
  ! MAYIGUALQUE     [ shift and go to state 48 ]
  ! MENIGUALQUE     [ shift and go to state 49 ]
  ! IGUALQUE        [ shift and go to state 50 ]
  ! NIGUALQUE       [ shift and go to state 51 ]


state 83

    (53) expresion -> expresion MAYIGUALQUE expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    OR              reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    MAYQUE          reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    MENQUE          reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    MAYIGUALQUE     reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    MENIGUALQUE     reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    IGUALQUE        reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    NIGUALQUE       reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    MAIN            reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    PRINT           reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    VAR             reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    ID              reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    WHILE           reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    IF              reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    SWITCH          reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    FOR             reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    NULL            reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    NOT             reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    PARIZQ          reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    ENTERO          reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    DECIMAL         reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    CADENA          reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    CHARACTER       reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    TRUE            reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    FALSE           reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    BREAK           reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    $end            reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    PARDER          reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    PTCOMA          reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    LLAVDER         reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    DEFAULT         reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    CASE            reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    DOSPUNTOS       reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43

  ! INCREMENT       [ reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! DECREMENT       [ reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! MAS             [ reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! MENOS           [ reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! POR             [ reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! ELEVADO         [ reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! MOD             [ reduce using rule 53 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! MAYQUE          [ shift and go to state 46 ]
  ! MENQUE          [ shift and go to state 47 ]
  ! MAYIGUALQUE     [ shift and go to state 48 ]
  ! MENIGUALQUE     [ shift and go to state 49 ]
  ! IGUALQUE        [ shift and go to state 50 ]
  ! NIGUALQUE       [ shift and go to state 51 ]


state 84

    (54) expresion -> expresion MENIGUALQUE expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    OR              reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    MAYQUE          reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    MENQUE          reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    MAYIGUALQUE     reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    MENIGUALQUE     reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    IGUALQUE        reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    NIGUALQUE       reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    MAIN            reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    PRINT           reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    VAR             reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    ID              reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    WHILE           reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    IF              reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    SWITCH          reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    FOR             reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    NULL            reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    NOT             reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    PARIZQ          reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    ENTERO          reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    DECIMAL         reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    CADENA          reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    CHARACTER       reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    TRUE            reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    FALSE           reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    BREAK           reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    $end            reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    PARDER          reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    PTCOMA          reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    LLAVDER         reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    DEFAULT         reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    CASE            reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    DOSPUNTOS       reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43

  ! INCREMENT       [ reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! DECREMENT       [ reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! MAS             [ reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! MENOS           [ reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! POR             [ reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! ELEVADO         [ reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! MOD             [ reduce using rule 54 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! MAYQUE          [ shift and go to state 46 ]
  ! MENQUE          [ shift and go to state 47 ]
  ! MAYIGUALQUE     [ shift and go to state 48 ]
  ! MENIGUALQUE     [ shift and go to state 49 ]
  ! IGUALQUE        [ shift and go to state 50 ]
  ! NIGUALQUE       [ shift and go to state 51 ]


state 85

    (55) expresion -> expresion IGUALQUE expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    OR              reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    MAYQUE          reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    MENQUE          reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    MAYIGUALQUE     reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    MENIGUALQUE     reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    IGUALQUE        reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    NIGUALQUE       reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    MAIN            reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    PRINT           reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    VAR             reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    ID              reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    WHILE           reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    IF              reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    SWITCH          reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    FOR             reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    NULL            reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    NOT             reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    PARIZQ          reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    ENTERO          reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    DECIMAL         reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    CADENA          reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    CHARACTER       reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    TRUE            reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    FALSE           reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    BREAK           reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    $end            reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    PARDER          reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    PTCOMA          reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    LLAVDER         reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    DEFAULT         reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    CASE            reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    DOSPUNTOS       reduce using rule 55 (expresion -> expresion IGUALQUE expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43

  ! INCREMENT       [ reduce using rule 55 (expresion -> expresion IGUALQUE expresion .) ]
  ! DECREMENT       [ reduce using rule 55 (expresion -> expresion IGUALQUE expresion .) ]
  ! MAS             [ reduce using rule 55 (expresion -> expresion IGUALQUE expresion .) ]
  ! MENOS           [ reduce using rule 55 (expresion -> expresion IGUALQUE expresion .) ]
  ! POR             [ reduce using rule 55 (expresion -> expresion IGUALQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 55 (expresion -> expresion IGUALQUE expresion .) ]
  ! ELEVADO         [ reduce using rule 55 (expresion -> expresion IGUALQUE expresion .) ]
  ! MOD             [ reduce using rule 55 (expresion -> expresion IGUALQUE expresion .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! MAYQUE          [ shift and go to state 46 ]
  ! MENQUE          [ shift and go to state 47 ]
  ! MAYIGUALQUE     [ shift and go to state 48 ]
  ! MENIGUALQUE     [ shift and go to state 49 ]
  ! IGUALQUE        [ shift and go to state 50 ]
  ! NIGUALQUE       [ shift and go to state 51 ]


state 86

    (56) expresion -> expresion NIGUALQUE expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    OR              reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    MAYQUE          reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    MENQUE          reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    MAYIGUALQUE     reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    MENIGUALQUE     reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    IGUALQUE        reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    NIGUALQUE       reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    MAIN            reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    PRINT           reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    VAR             reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    ID              reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    WHILE           reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    IF              reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    SWITCH          reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    FOR             reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    NULL            reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    NOT             reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    PARIZQ          reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    ENTERO          reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    DECIMAL         reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    CADENA          reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    CHARACTER       reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    TRUE            reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    FALSE           reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    BREAK           reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    $end            reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    PARDER          reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    PTCOMA          reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    LLAVDER         reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    DEFAULT         reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    CASE            reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    DOSPUNTOS       reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43

  ! INCREMENT       [ reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .) ]
  ! DECREMENT       [ reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .) ]
  ! MAS             [ reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .) ]
  ! MENOS           [ reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .) ]
  ! POR             [ reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .) ]
  ! ELEVADO         [ reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .) ]
  ! MOD             [ reduce using rule 56 (expresion -> expresion NIGUALQUE expresion .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! MAYQUE          [ shift and go to state 46 ]
  ! MENQUE          [ shift and go to state 47 ]
  ! MAYIGUALQUE     [ shift and go to state 48 ]
  ! MENIGUALQUE     [ shift and go to state 49 ]
  ! IGUALQUE        [ shift and go to state 50 ]
  ! NIGUALQUE       [ shift and go to state 51 ]


state 87

    (19) func_main -> MAIN PARIZQ PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 102


state 88

    (59) expresion -> PARIZQ expresion PARDER .

    INCREMENT       reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    DECREMENT       reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    POR             reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    ELEVADO         reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    MOD             reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    AND             reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    OR              reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    MAYQUE          reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    MAYIGUALQUE     reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    MENIGUALQUE     reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    MAIN            reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    PRINT           reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    VAR             reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    ID              reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    WHILE           reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    IF              reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    SWITCH          reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    FOR             reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    NULL            reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    NOT             reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    PARIZQ          reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    ENTERO          reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    DECIMAL         reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    CADENA          reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    CHARACTER       reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    TRUE            reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    FALSE           reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    BREAK           reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    $end            reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    LLAVDER         reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    DEFAULT         reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    CASE            reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)
    DOSPUNTOS       reduce using rule 59 (expresion -> PARIZQ expresion PARDER .)


state 89

    (71) expresion -> PARIZQ expresion_data_type PARDER . expresion
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 103

state 90

    (20) imprimir_instr -> PRINT PARIZQ expresion . PARDER def_instr_prima
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    PARDER          shift and go to state 104
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51


state 91

    (21) definicion_instr -> VAR ID def_instr_prima .

    MAIN            reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    PRINT           reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    VAR             reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    ID              reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    WHILE           reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    IF              reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    SWITCH          reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    FOR             reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    NULL            reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    MENOS           reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    NOT             reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    PARIZQ          reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    ENTERO          reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    DECIMAL         reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    CADENA          reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    CHARACTER       reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    TRUE            reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    FALSE           reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    BREAK           reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    $end            reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    LLAVDER         reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    PTCOMA          reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    DEFAULT         reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    CASE            reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)


state 92

    (23) def_asig_instr -> VAR ID IGUAL . expresion def_instr_prima
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 105

state 93

    (22) asignacion_instr -> ID IGUAL expresion . def_instr_prima
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion
    (16) def_instr_prima -> . PTCOMA
    (17) def_instr_prima -> . empty
    (18) empty -> .

  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for PTCOMA resolved as shift
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51
    PTCOMA          shift and go to state 70
    MAIN            reduce using rule 18 (empty -> .)
    PRINT           reduce using rule 18 (empty -> .)
    VAR             reduce using rule 18 (empty -> .)
    ID              reduce using rule 18 (empty -> .)
    WHILE           reduce using rule 18 (empty -> .)
    IF              reduce using rule 18 (empty -> .)
    SWITCH          reduce using rule 18 (empty -> .)
    FOR             reduce using rule 18 (empty -> .)
    NULL            reduce using rule 18 (empty -> .)
    NOT             reduce using rule 18 (empty -> .)
    PARIZQ          reduce using rule 18 (empty -> .)
    ENTERO          reduce using rule 18 (empty -> .)
    DECIMAL         reduce using rule 18 (empty -> .)
    CADENA          reduce using rule 18 (empty -> .)
    CHARACTER       reduce using rule 18 (empty -> .)
    TRUE            reduce using rule 18 (empty -> .)
    FALSE           reduce using rule 18 (empty -> .)
    BREAK           reduce using rule 18 (empty -> .)
    $end            reduce using rule 18 (empty -> .)
    LLAVDER         reduce using rule 18 (empty -> .)
    DEFAULT         reduce using rule 18 (empty -> .)
    CASE            reduce using rule 18 (empty -> .)

  ! MENOS           [ reduce using rule 18 (empty -> .) ]
  ! PTCOMA          [ reduce using rule 18 (empty -> .) ]

    def_instr_prima                shift and go to state 106
    empty                          shift and go to state 71

state 94

    (27) while_instr -> WHILE PARIZQ expresion . PARDER LLAVIZQ instrucciones LLAVDER
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    PARDER          shift and go to state 107
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51


state 95

    (24) if_instr -> IF PARIZQ expresion . PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> IF PARIZQ expresion . PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> IF PARIZQ expresion . PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    PARDER          shift and go to state 108
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51


state 96

    (29) switch_instr -> SWITCH PARIZQ expresion . PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> SWITCH PARIZQ expresion . PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> SWITCH PARIZQ expresion . PARDER LLAVIZQ cases default_instr LLAVDER
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    PARDER          shift and go to state 109
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51


state 97

    (36) for_instr -> FOR PARIZQ def_asign_for . def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (16) def_instr_prima -> . PTCOMA
    (17) def_instr_prima -> . empty
    (18) empty -> .

    PTCOMA          shift and go to state 70
    NULL            reduce using rule 18 (empty -> .)
    MENOS           reduce using rule 18 (empty -> .)
    NOT             reduce using rule 18 (empty -> .)
    PARIZQ          reduce using rule 18 (empty -> .)
    ID              reduce using rule 18 (empty -> .)
    ENTERO          reduce using rule 18 (empty -> .)
    DECIMAL         reduce using rule 18 (empty -> .)
    CADENA          reduce using rule 18 (empty -> .)
    CHARACTER       reduce using rule 18 (empty -> .)
    TRUE            reduce using rule 18 (empty -> .)
    FALSE           reduce using rule 18 (empty -> .)

    def_instr_prima                shift and go to state 110
    empty                          shift and go to state 71

state 98

    (37) def_asign_for -> ID .
    (22) asignacion_instr -> ID . IGUAL expresion def_instr_prima

    PTCOMA          reduce using rule 37 (def_asign_for -> ID .)
    NULL            reduce using rule 37 (def_asign_for -> ID .)
    MENOS           reduce using rule 37 (def_asign_for -> ID .)
    NOT             reduce using rule 37 (def_asign_for -> ID .)
    PARIZQ          reduce using rule 37 (def_asign_for -> ID .)
    ID              reduce using rule 37 (def_asign_for -> ID .)
    ENTERO          reduce using rule 37 (def_asign_for -> ID .)
    DECIMAL         reduce using rule 37 (def_asign_for -> ID .)
    CADENA          reduce using rule 37 (def_asign_for -> ID .)
    CHARACTER       reduce using rule 37 (def_asign_for -> ID .)
    TRUE            reduce using rule 37 (def_asign_for -> ID .)
    FALSE           reduce using rule 37 (def_asign_for -> ID .)
    IGUAL           shift and go to state 62


state 99

    (38) def_asign_for -> asignacion_instr .

    PTCOMA          reduce using rule 38 (def_asign_for -> asignacion_instr .)
    NULL            reduce using rule 38 (def_asign_for -> asignacion_instr .)
    MENOS           reduce using rule 38 (def_asign_for -> asignacion_instr .)
    NOT             reduce using rule 38 (def_asign_for -> asignacion_instr .)
    PARIZQ          reduce using rule 38 (def_asign_for -> asignacion_instr .)
    ID              reduce using rule 38 (def_asign_for -> asignacion_instr .)
    ENTERO          reduce using rule 38 (def_asign_for -> asignacion_instr .)
    DECIMAL         reduce using rule 38 (def_asign_for -> asignacion_instr .)
    CADENA          reduce using rule 38 (def_asign_for -> asignacion_instr .)
    CHARACTER       reduce using rule 38 (def_asign_for -> asignacion_instr .)
    TRUE            reduce using rule 38 (def_asign_for -> asignacion_instr .)
    FALSE           reduce using rule 38 (def_asign_for -> asignacion_instr .)


state 100

    (39) def_asign_for -> def_asig_instr .

    PTCOMA          reduce using rule 39 (def_asign_for -> def_asig_instr .)
    NULL            reduce using rule 39 (def_asign_for -> def_asig_instr .)
    MENOS           reduce using rule 39 (def_asign_for -> def_asig_instr .)
    NOT             reduce using rule 39 (def_asign_for -> def_asig_instr .)
    PARIZQ          reduce using rule 39 (def_asign_for -> def_asig_instr .)
    ID              reduce using rule 39 (def_asign_for -> def_asig_instr .)
    ENTERO          reduce using rule 39 (def_asign_for -> def_asig_instr .)
    DECIMAL         reduce using rule 39 (def_asign_for -> def_asig_instr .)
    CADENA          reduce using rule 39 (def_asign_for -> def_asig_instr .)
    CHARACTER       reduce using rule 39 (def_asign_for -> def_asig_instr .)
    TRUE            reduce using rule 39 (def_asign_for -> def_asig_instr .)
    FALSE           reduce using rule 39 (def_asign_for -> def_asig_instr .)


state 101

    (23) def_asig_instr -> VAR . ID IGUAL expresion def_instr_prima

    ID              shift and go to state 111


state 102

    (19) func_main -> MAIN PARIZQ PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (18) empty -> .
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    LLAVDER         reduce using rule 18 (empty -> .)
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

  ! MAIN            [ reduce using rule 18 (empty -> .) ]
  ! PRINT           [ reduce using rule 18 (empty -> .) ]
  ! VAR             [ reduce using rule 18 (empty -> .) ]
  ! ID              [ reduce using rule 18 (empty -> .) ]
  ! WHILE           [ reduce using rule 18 (empty -> .) ]
  ! IF              [ reduce using rule 18 (empty -> .) ]
  ! SWITCH          [ reduce using rule 18 (empty -> .) ]
  ! FOR             [ reduce using rule 18 (empty -> .) ]
  ! NULL            [ reduce using rule 18 (empty -> .) ]
  ! MENOS           [ reduce using rule 18 (empty -> .) ]
  ! NOT             [ reduce using rule 18 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 18 (empty -> .) ]
  ! ENTERO          [ reduce using rule 18 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 18 (empty -> .) ]
  ! CADENA          [ reduce using rule 18 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 18 (empty -> .) ]
  ! TRUE            [ reduce using rule 18 (empty -> .) ]
  ! FALSE           [ reduce using rule 18 (empty -> .) ]
  ! BREAK           [ reduce using rule 18 (empty -> .) ]

    instrucciones                  shift and go to state 112
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    expresion                      shift and go to state 14
    break_instr                    shift and go to state 15

state 103

    (71) expresion -> PARIZQ expresion_data_type PARDER expresion .
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for ELEVADO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for MAYQUE resolved as shift
  ! shift/reduce conflict for MENQUE resolved as shift
  ! shift/reduce conflict for MAYIGUALQUE resolved as shift
  ! shift/reduce conflict for MENIGUALQUE resolved as shift
  ! shift/reduce conflict for IGUALQUE resolved as shift
  ! shift/reduce conflict for NIGUALQUE resolved as shift
    MAIN            reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    PRINT           reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    VAR             reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    ID              reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    WHILE           reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    IF              reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    SWITCH          reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    FOR             reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    NULL            reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    NOT             reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    PARIZQ          reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    ENTERO          reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    DECIMAL         reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    CADENA          reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    CHARACTER       reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    TRUE            reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    FALSE           reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    BREAK           reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    $end            reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    PARDER          reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    PTCOMA          reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    LLAVDER         reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    DEFAULT         reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    CASE            reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    DOSPUNTOS       reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51

  ! INCREMENT       [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! DECREMENT       [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MAS             [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MENOS           [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! POR             [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! DIVIDIDO        [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! ELEVADO         [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MOD             [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! AND             [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! OR              [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MAYQUE          [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MENQUE          [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MAYIGUALQUE     [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MENIGUALQUE     [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! IGUALQUE        [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! NIGUALQUE       [ reduce using rule 71 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]


state 104

    (20) imprimir_instr -> PRINT PARIZQ expresion PARDER . def_instr_prima
    (16) def_instr_prima -> . PTCOMA
    (17) def_instr_prima -> . empty
    (18) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
    PTCOMA          shift and go to state 70
    MAIN            reduce using rule 18 (empty -> .)
    PRINT           reduce using rule 18 (empty -> .)
    VAR             reduce using rule 18 (empty -> .)
    ID              reduce using rule 18 (empty -> .)
    WHILE           reduce using rule 18 (empty -> .)
    IF              reduce using rule 18 (empty -> .)
    SWITCH          reduce using rule 18 (empty -> .)
    FOR             reduce using rule 18 (empty -> .)
    NULL            reduce using rule 18 (empty -> .)
    MENOS           reduce using rule 18 (empty -> .)
    NOT             reduce using rule 18 (empty -> .)
    PARIZQ          reduce using rule 18 (empty -> .)
    ENTERO          reduce using rule 18 (empty -> .)
    DECIMAL         reduce using rule 18 (empty -> .)
    CADENA          reduce using rule 18 (empty -> .)
    CHARACTER       reduce using rule 18 (empty -> .)
    TRUE            reduce using rule 18 (empty -> .)
    FALSE           reduce using rule 18 (empty -> .)
    BREAK           reduce using rule 18 (empty -> .)
    $end            reduce using rule 18 (empty -> .)
    LLAVDER         reduce using rule 18 (empty -> .)
    DEFAULT         reduce using rule 18 (empty -> .)
    CASE            reduce using rule 18 (empty -> .)

  ! PTCOMA          [ reduce using rule 18 (empty -> .) ]

    def_instr_prima                shift and go to state 113
    empty                          shift and go to state 71

state 105

    (23) def_asig_instr -> VAR ID IGUAL expresion . def_instr_prima
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion
    (16) def_instr_prima -> . PTCOMA
    (17) def_instr_prima -> . empty
    (18) empty -> .

  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for PTCOMA resolved as shift
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51
    PTCOMA          shift and go to state 70
    MAIN            reduce using rule 18 (empty -> .)
    PRINT           reduce using rule 18 (empty -> .)
    VAR             reduce using rule 18 (empty -> .)
    ID              reduce using rule 18 (empty -> .)
    WHILE           reduce using rule 18 (empty -> .)
    IF              reduce using rule 18 (empty -> .)
    SWITCH          reduce using rule 18 (empty -> .)
    FOR             reduce using rule 18 (empty -> .)
    NULL            reduce using rule 18 (empty -> .)
    NOT             reduce using rule 18 (empty -> .)
    PARIZQ          reduce using rule 18 (empty -> .)
    ENTERO          reduce using rule 18 (empty -> .)
    DECIMAL         reduce using rule 18 (empty -> .)
    CADENA          reduce using rule 18 (empty -> .)
    CHARACTER       reduce using rule 18 (empty -> .)
    TRUE            reduce using rule 18 (empty -> .)
    FALSE           reduce using rule 18 (empty -> .)
    BREAK           reduce using rule 18 (empty -> .)
    $end            reduce using rule 18 (empty -> .)
    LLAVDER         reduce using rule 18 (empty -> .)
    DEFAULT         reduce using rule 18 (empty -> .)
    CASE            reduce using rule 18 (empty -> .)

  ! MENOS           [ reduce using rule 18 (empty -> .) ]
  ! PTCOMA          [ reduce using rule 18 (empty -> .) ]

    def_instr_prima                shift and go to state 114
    empty                          shift and go to state 71

state 106

    (22) asignacion_instr -> ID IGUAL expresion def_instr_prima .

    MAIN            reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    PRINT           reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    VAR             reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    ID              reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    WHILE           reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    IF              reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    SWITCH          reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    FOR             reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    NULL            reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    MENOS           reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    NOT             reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    PARIZQ          reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    ENTERO          reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    DECIMAL         reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    CADENA          reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    CHARACTER       reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    TRUE            reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    FALSE           reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    BREAK           reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    $end            reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    PTCOMA          reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    LLAVDER         reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    DEFAULT         reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    CASE            reduce using rule 22 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)


state 107

    (27) while_instr -> WHILE PARIZQ expresion PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 115


state 108

    (24) if_instr -> IF PARIZQ expresion PARDER . LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> IF PARIZQ expresion PARDER . LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> IF PARIZQ expresion PARDER . LLAVIZQ instrucciones LLAVDER ELSE if_instr

    LLAVIZQ         shift and go to state 116


state 109

    (29) switch_instr -> SWITCH PARIZQ expresion PARDER . LLAVIZQ cases LLAVDER
    (30) switch_instr -> SWITCH PARIZQ expresion PARDER . LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> SWITCH PARIZQ expresion PARDER . LLAVIZQ cases default_instr LLAVDER

    LLAVIZQ         shift and go to state 117


state 110

    (36) for_instr -> FOR PARIZQ def_asign_for def_instr_prima . expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 118

state 111

    (23) def_asig_instr -> VAR ID . IGUAL expresion def_instr_prima

    IGUAL           shift and go to state 92


state 112

    (19) func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

    LLAVDER         shift and go to state 119
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

    instruccion                    shift and go to state 35
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    expresion                      shift and go to state 14
    break_instr                    shift and go to state 15

state 113

    (20) imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .

    MAIN            reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    PRINT           reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    VAR             reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    ID              reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    WHILE           reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    IF              reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    SWITCH          reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    FOR             reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    NULL            reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    MENOS           reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    NOT             reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    PARIZQ          reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    ENTERO          reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    DECIMAL         reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    CADENA          reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    CHARACTER       reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    TRUE            reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    FALSE           reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    BREAK           reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    $end            reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    LLAVDER         reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    PTCOMA          reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    DEFAULT         reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    CASE            reduce using rule 20 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)


state 114

    (23) def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .

    MAIN            reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    PRINT           reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    VAR             reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    ID              reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    WHILE           reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    IF              reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    SWITCH          reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    FOR             reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    NULL            reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    MENOS           reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    NOT             reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    PARIZQ          reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    ENTERO          reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    DECIMAL         reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    CADENA          reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    CHARACTER       reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    TRUE            reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    FALSE           reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    BREAK           reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    $end            reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    PTCOMA          reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    LLAVDER         reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    DEFAULT         reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    CASE            reduce using rule 23 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)


state 115

    (27) while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (18) empty -> .
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    LLAVDER         reduce using rule 18 (empty -> .)
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

  ! MAIN            [ reduce using rule 18 (empty -> .) ]
  ! PRINT           [ reduce using rule 18 (empty -> .) ]
  ! VAR             [ reduce using rule 18 (empty -> .) ]
  ! ID              [ reduce using rule 18 (empty -> .) ]
  ! WHILE           [ reduce using rule 18 (empty -> .) ]
  ! IF              [ reduce using rule 18 (empty -> .) ]
  ! SWITCH          [ reduce using rule 18 (empty -> .) ]
  ! FOR             [ reduce using rule 18 (empty -> .) ]
  ! NULL            [ reduce using rule 18 (empty -> .) ]
  ! MENOS           [ reduce using rule 18 (empty -> .) ]
  ! NOT             [ reduce using rule 18 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 18 (empty -> .) ]
  ! ENTERO          [ reduce using rule 18 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 18 (empty -> .) ]
  ! CADENA          [ reduce using rule 18 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 18 (empty -> .) ]
  ! TRUE            [ reduce using rule 18 (empty -> .) ]
  ! FALSE           [ reduce using rule 18 (empty -> .) ]
  ! BREAK           [ reduce using rule 18 (empty -> .) ]

    expresion                      shift and go to state 14
    instrucciones                  shift and go to state 120
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    break_instr                    shift and go to state 15

state 116

    (24) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ . instrucciones LLAVDER
    (25) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ . instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ . instrucciones LLAVDER ELSE if_instr
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (18) empty -> .
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    LLAVDER         reduce using rule 18 (empty -> .)
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

  ! MAIN            [ reduce using rule 18 (empty -> .) ]
  ! PRINT           [ reduce using rule 18 (empty -> .) ]
  ! VAR             [ reduce using rule 18 (empty -> .) ]
  ! ID              [ reduce using rule 18 (empty -> .) ]
  ! WHILE           [ reduce using rule 18 (empty -> .) ]
  ! IF              [ reduce using rule 18 (empty -> .) ]
  ! SWITCH          [ reduce using rule 18 (empty -> .) ]
  ! FOR             [ reduce using rule 18 (empty -> .) ]
  ! NULL            [ reduce using rule 18 (empty -> .) ]
  ! MENOS           [ reduce using rule 18 (empty -> .) ]
  ! NOT             [ reduce using rule 18 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 18 (empty -> .) ]
  ! ENTERO          [ reduce using rule 18 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 18 (empty -> .) ]
  ! CADENA          [ reduce using rule 18 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 18 (empty -> .) ]
  ! TRUE            [ reduce using rule 18 (empty -> .) ]
  ! FALSE           [ reduce using rule 18 (empty -> .) ]
  ! BREAK           [ reduce using rule 18 (empty -> .) ]

    expresion                      shift and go to state 14
    instrucciones                  shift and go to state 121
    if_instr                       shift and go to state 11
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    break_instr                    shift and go to state 15

state 117

    (29) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ . cases LLAVDER
    (30) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ . default_instr LLAVDER
    (31) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ . cases default_instr LLAVDER
    (32) cases -> . cases case_instr
    (33) cases -> . case_instr
    (35) default_instr -> . DEFAULT DOSPUNTOS instrucciones def_instr_prima
    (34) case_instr -> . CASE expresion DOSPUNTOS instrucciones def_instr_prima

    DEFAULT         shift and go to state 125
    CASE            shift and go to state 126

    cases                          shift and go to state 122
    default_instr                  shift and go to state 123
    case_instr                     shift and go to state 124

state 118

    (36) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion . def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion
    (16) def_instr_prima -> . PTCOMA
    (17) def_instr_prima -> . empty
    (18) empty -> .

  ! shift/reduce conflict for MENOS resolved as shift
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51
    PTCOMA          shift and go to state 70
    NULL            reduce using rule 18 (empty -> .)
    NOT             reduce using rule 18 (empty -> .)
    PARIZQ          reduce using rule 18 (empty -> .)
    ID              reduce using rule 18 (empty -> .)
    ENTERO          reduce using rule 18 (empty -> .)
    DECIMAL         reduce using rule 18 (empty -> .)
    CADENA          reduce using rule 18 (empty -> .)
    CHARACTER       reduce using rule 18 (empty -> .)
    TRUE            reduce using rule 18 (empty -> .)
    FALSE           reduce using rule 18 (empty -> .)

  ! MENOS           [ reduce using rule 18 (empty -> .) ]

    def_instr_prima                shift and go to state 127
    empty                          shift and go to state 71

state 119

    (19) func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    NULL            reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    MENOS           reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    NOT             reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    PARIZQ          reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    ENTERO          reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    DECIMAL         reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    CADENA          reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    CHARACTER       reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    TRUE            reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    FALSE           reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    PTCOMA          reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 19 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)


state 120

    (27) while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

    LLAVDER         shift and go to state 128
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

    expresion                      shift and go to state 14
    instruccion                    shift and go to state 35
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    break_instr                    shift and go to state 15

state 121

    (24) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones . LLAVDER
    (25) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones . LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones . LLAVDER ELSE if_instr
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

    LLAVDER         shift and go to state 129
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

    expresion                      shift and go to state 14
    if_instr                       shift and go to state 11
    instruccion                    shift and go to state 35
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    break_instr                    shift and go to state 15

state 122

    (29) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases . LLAVDER
    (31) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases . default_instr LLAVDER
    (32) cases -> cases . case_instr
    (35) default_instr -> . DEFAULT DOSPUNTOS instrucciones def_instr_prima
    (34) case_instr -> . CASE expresion DOSPUNTOS instrucciones def_instr_prima

    LLAVDER         shift and go to state 130
    DEFAULT         shift and go to state 125
    CASE            shift and go to state 126

    default_instr                  shift and go to state 131
    case_instr                     shift and go to state 132

state 123

    (30) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr . LLAVDER

    LLAVDER         shift and go to state 133


state 124

    (33) cases -> case_instr .

    LLAVDER         reduce using rule 33 (cases -> case_instr .)
    DEFAULT         reduce using rule 33 (cases -> case_instr .)
    CASE            reduce using rule 33 (cases -> case_instr .)


state 125

    (35) default_instr -> DEFAULT . DOSPUNTOS instrucciones def_instr_prima

    DOSPUNTOS       shift and go to state 134


state 126

    (34) case_instr -> CASE . expresion DOSPUNTOS instrucciones def_instr_prima
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 135

state 127

    (36) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima . expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion

    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ID              shift and go to state 55
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    expresion                      shift and go to state 136

state 128

    (27) while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    NULL            reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    MENOS           reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    NOT             reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PARIZQ          reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ENTERO          reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    DECIMAL         reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CADENA          reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CHARACTER       reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    TRUE            reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FALSE           reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PTCOMA          reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 27 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)


state 129

    (24) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .
    (25) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER . ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER . ELSE if_instr

    MAIN            reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    NULL            reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    MENOS           reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    NOT             reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PARIZQ          reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ENTERO          reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    DECIMAL         reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CADENA          reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CHARACTER       reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    TRUE            reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FALSE           reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PTCOMA          reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 24 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ELSE            shift and go to state 137


state 130

    (29) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .

    MAIN            reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    PRINT           reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    VAR             reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    ID              reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    WHILE           reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    IF              reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    SWITCH          reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    FOR             reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    NULL            reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    MENOS           reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    NOT             reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    PARIZQ          reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    ENTERO          reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    DECIMAL         reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    CADENA          reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    CHARACTER       reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    TRUE            reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    FALSE           reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    BREAK           reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    $end            reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    LLAVDER         reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    PTCOMA          reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    DEFAULT         reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    CASE            reduce using rule 29 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)


state 131

    (31) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr . LLAVDER

    LLAVDER         shift and go to state 138


state 132

    (32) cases -> cases case_instr .

    LLAVDER         reduce using rule 32 (cases -> cases case_instr .)
    DEFAULT         reduce using rule 32 (cases -> cases case_instr .)
    CASE            reduce using rule 32 (cases -> cases case_instr .)


state 133

    (30) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .

    MAIN            reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    PRINT           reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    VAR             reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    ID              reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    WHILE           reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    IF              reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    SWITCH          reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    FOR             reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    NULL            reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    MENOS           reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    NOT             reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    PARIZQ          reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    ENTERO          reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    DECIMAL         reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    CADENA          reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    CHARACTER       reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    TRUE            reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    FALSE           reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    BREAK           reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    $end            reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    LLAVDER         reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    PTCOMA          reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    DEFAULT         reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    CASE            reduce using rule 30 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)


state 134

    (35) default_instr -> DEFAULT DOSPUNTOS . instrucciones def_instr_prima
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (18) empty -> .
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    PTCOMA          reduce using rule 18 (empty -> .)
    LLAVDER         reduce using rule 18 (empty -> .)
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

  ! MAIN            [ reduce using rule 18 (empty -> .) ]
  ! PRINT           [ reduce using rule 18 (empty -> .) ]
  ! VAR             [ reduce using rule 18 (empty -> .) ]
  ! ID              [ reduce using rule 18 (empty -> .) ]
  ! WHILE           [ reduce using rule 18 (empty -> .) ]
  ! IF              [ reduce using rule 18 (empty -> .) ]
  ! SWITCH          [ reduce using rule 18 (empty -> .) ]
  ! FOR             [ reduce using rule 18 (empty -> .) ]
  ! NULL            [ reduce using rule 18 (empty -> .) ]
  ! MENOS           [ reduce using rule 18 (empty -> .) ]
  ! NOT             [ reduce using rule 18 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 18 (empty -> .) ]
  ! ENTERO          [ reduce using rule 18 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 18 (empty -> .) ]
  ! CADENA          [ reduce using rule 18 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 18 (empty -> .) ]
  ! TRUE            [ reduce using rule 18 (empty -> .) ]
  ! FALSE           [ reduce using rule 18 (empty -> .) ]
  ! BREAK           [ reduce using rule 18 (empty -> .) ]

    instrucciones                  shift and go to state 139
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    expresion                      shift and go to state 14
    break_instr                    shift and go to state 15

state 135

    (34) case_instr -> CASE expresion . DOSPUNTOS instrucciones def_instr_prima
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    DOSPUNTOS       shift and go to state 140
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51


state 136

    (36) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion . PARDER LLAVIZQ instrucciones LLAVDER
    (41) expresion -> expresion . INCREMENT def_instr_prima
    (42) expresion -> expresion . DECREMENT def_instr_prima
    (43) expresion -> expresion . MAS expresion
    (44) expresion -> expresion . MENOS expresion
    (45) expresion -> expresion . POR expresion
    (46) expresion -> expresion . DIVIDIDO expresion
    (47) expresion -> expresion . ELEVADO expresion
    (48) expresion -> expresion . MOD expresion
    (49) expresion -> expresion . AND expresion
    (50) expresion -> expresion . OR expresion
    (51) expresion -> expresion . MAYQUE expresion
    (52) expresion -> expresion . MENQUE expresion
    (53) expresion -> expresion . MAYIGUALQUE expresion
    (54) expresion -> expresion . MENIGUALQUE expresion
    (55) expresion -> expresion . IGUALQUE expresion
    (56) expresion -> expresion . NIGUALQUE expresion

    PARDER          shift and go to state 141
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 37
    MAS             shift and go to state 38
    MENOS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDIDO        shift and go to state 41
    ELEVADO         shift and go to state 42
    MOD             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    MAYQUE          shift and go to state 46
    MENQUE          shift and go to state 47
    MAYIGUALQUE     shift and go to state 48
    MENIGUALQUE     shift and go to state 49
    IGUALQUE        shift and go to state 50
    NIGUALQUE       shift and go to state 51


state 137

    (25) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE . LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE . if_instr
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr

    LLAVIZQ         shift and go to state 142
    IF              shift and go to state 22

    if_instr                       shift and go to state 143

state 138

    (31) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .

    MAIN            reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    PRINT           reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    VAR             reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    ID              reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    WHILE           reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    IF              reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    SWITCH          reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    FOR             reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    NULL            reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    MENOS           reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    NOT             reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    PARIZQ          reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    ENTERO          reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    DECIMAL         reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    CADENA          reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    CHARACTER       reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    TRUE            reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    FALSE           reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    BREAK           reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    $end            reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    LLAVDER         reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    PTCOMA          reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    DEFAULT         reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    CASE            reduce using rule 31 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)


state 139

    (35) default_instr -> DEFAULT DOSPUNTOS instrucciones . def_instr_prima
    (2) instrucciones -> instrucciones . instruccion
    (16) def_instr_prima -> . PTCOMA
    (17) def_instr_prima -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (18) empty -> .
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

    PTCOMA          shift and go to state 70
    LLAVDER         reduce using rule 18 (empty -> .)
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

    def_instr_prima                shift and go to state 144
    instruccion                    shift and go to state 35
    empty                          shift and go to state 71
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    expresion                      shift and go to state 14
    break_instr                    shift and go to state 15

state 140

    (34) case_instr -> CASE expresion DOSPUNTOS . instrucciones def_instr_prima
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (18) empty -> .
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    PTCOMA          reduce using rule 18 (empty -> .)
    LLAVDER         reduce using rule 18 (empty -> .)
    DEFAULT         reduce using rule 18 (empty -> .)
    CASE            reduce using rule 18 (empty -> .)
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

  ! MAIN            [ reduce using rule 18 (empty -> .) ]
  ! PRINT           [ reduce using rule 18 (empty -> .) ]
  ! VAR             [ reduce using rule 18 (empty -> .) ]
  ! ID              [ reduce using rule 18 (empty -> .) ]
  ! WHILE           [ reduce using rule 18 (empty -> .) ]
  ! IF              [ reduce using rule 18 (empty -> .) ]
  ! SWITCH          [ reduce using rule 18 (empty -> .) ]
  ! FOR             [ reduce using rule 18 (empty -> .) ]
  ! NULL            [ reduce using rule 18 (empty -> .) ]
  ! MENOS           [ reduce using rule 18 (empty -> .) ]
  ! NOT             [ reduce using rule 18 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 18 (empty -> .) ]
  ! ENTERO          [ reduce using rule 18 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 18 (empty -> .) ]
  ! CADENA          [ reduce using rule 18 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 18 (empty -> .) ]
  ! TRUE            [ reduce using rule 18 (empty -> .) ]
  ! FALSE           [ reduce using rule 18 (empty -> .) ]
  ! BREAK           [ reduce using rule 18 (empty -> .) ]

    expresion                      shift and go to state 14
    instrucciones                  shift and go to state 145
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    break_instr                    shift and go to state 15

state 141

    (36) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 146


state 142

    (25) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (18) empty -> .
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    LLAVDER         reduce using rule 18 (empty -> .)
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

  ! MAIN            [ reduce using rule 18 (empty -> .) ]
  ! PRINT           [ reduce using rule 18 (empty -> .) ]
  ! VAR             [ reduce using rule 18 (empty -> .) ]
  ! ID              [ reduce using rule 18 (empty -> .) ]
  ! WHILE           [ reduce using rule 18 (empty -> .) ]
  ! IF              [ reduce using rule 18 (empty -> .) ]
  ! SWITCH          [ reduce using rule 18 (empty -> .) ]
  ! FOR             [ reduce using rule 18 (empty -> .) ]
  ! NULL            [ reduce using rule 18 (empty -> .) ]
  ! MENOS           [ reduce using rule 18 (empty -> .) ]
  ! NOT             [ reduce using rule 18 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 18 (empty -> .) ]
  ! ENTERO          [ reduce using rule 18 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 18 (empty -> .) ]
  ! CADENA          [ reduce using rule 18 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 18 (empty -> .) ]
  ! TRUE            [ reduce using rule 18 (empty -> .) ]
  ! FALSE           [ reduce using rule 18 (empty -> .) ]
  ! BREAK           [ reduce using rule 18 (empty -> .) ]

    expresion                      shift and go to state 14
    instrucciones                  shift and go to state 147
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    break_instr                    shift and go to state 15

state 143

    (26) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .

    MAIN            reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    PRINT           reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    VAR             reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    ID              reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    WHILE           reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    IF              reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    SWITCH          reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    FOR             reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    NULL            reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    MENOS           reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    NOT             reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    PARIZQ          reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    ENTERO          reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    DECIMAL         reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    CADENA          reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    CHARACTER       reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    TRUE            reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    FALSE           reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    BREAK           reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    $end            reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    LLAVDER         reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    PTCOMA          reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    DEFAULT         reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    CASE            reduce using rule 26 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)


state 144

    (35) default_instr -> DEFAULT DOSPUNTOS instrucciones def_instr_prima .

    LLAVDER         reduce using rule 35 (default_instr -> DEFAULT DOSPUNTOS instrucciones def_instr_prima .)


state 145

    (34) case_instr -> CASE expresion DOSPUNTOS instrucciones . def_instr_prima
    (2) instrucciones -> instrucciones . instruccion
    (16) def_instr_prima -> . PTCOMA
    (17) def_instr_prima -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (18) empty -> .
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

    PTCOMA          shift and go to state 70
    LLAVDER         reduce using rule 18 (empty -> .)
    DEFAULT         reduce using rule 18 (empty -> .)
    CASE            reduce using rule 18 (empty -> .)
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

    expresion                      shift and go to state 14
    def_instr_prima                shift and go to state 148
    instruccion                    shift and go to state 35
    empty                          shift and go to state 71
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    break_instr                    shift and go to state 15

state 146

    (36) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (18) empty -> .
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    LLAVDER         reduce using rule 18 (empty -> .)
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

  ! MAIN            [ reduce using rule 18 (empty -> .) ]
  ! PRINT           [ reduce using rule 18 (empty -> .) ]
  ! VAR             [ reduce using rule 18 (empty -> .) ]
  ! ID              [ reduce using rule 18 (empty -> .) ]
  ! WHILE           [ reduce using rule 18 (empty -> .) ]
  ! IF              [ reduce using rule 18 (empty -> .) ]
  ! SWITCH          [ reduce using rule 18 (empty -> .) ]
  ! FOR             [ reduce using rule 18 (empty -> .) ]
  ! NULL            [ reduce using rule 18 (empty -> .) ]
  ! MENOS           [ reduce using rule 18 (empty -> .) ]
  ! NOT             [ reduce using rule 18 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 18 (empty -> .) ]
  ! ENTERO          [ reduce using rule 18 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 18 (empty -> .) ]
  ! CADENA          [ reduce using rule 18 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 18 (empty -> .) ]
  ! TRUE            [ reduce using rule 18 (empty -> .) ]
  ! FALSE           [ reduce using rule 18 (empty -> .) ]
  ! BREAK           [ reduce using rule 18 (empty -> .) ]

    expresion                      shift and go to state 14
    instrucciones                  shift and go to state 149
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    break_instr                    shift and go to state 15

state 147

    (25) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

    LLAVDER         shift and go to state 150
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

    expresion                      shift and go to state 14
    instruccion                    shift and go to state 35
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    break_instr                    shift and go to state 15

state 148

    (34) case_instr -> CASE expresion DOSPUNTOS instrucciones def_instr_prima .

    LLAVDER         reduce using rule 34 (case_instr -> CASE expresion DOSPUNTOS instrucciones def_instr_prima .)
    DEFAULT         reduce using rule 34 (case_instr -> CASE expresion DOSPUNTOS instrucciones def_instr_prima .)
    CASE            reduce using rule 34 (case_instr -> CASE expresion DOSPUNTOS instrucciones def_instr_prima .)


state 149

    (36) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . while_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . switch_instr
    (13) instruccion -> . for_instr
    (14) instruccion -> . expresion
    (15) instruccion -> . break_instr
    (19) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (20) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (22) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (23) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (27) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (24) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (25) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (26) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (29) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (30) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (31) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (36) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (40) expresion -> . NULL
    (41) expresion -> . expresion INCREMENT def_instr_prima
    (42) expresion -> . expresion DECREMENT def_instr_prima
    (43) expresion -> . expresion MAS expresion
    (44) expresion -> . expresion MENOS expresion
    (45) expresion -> . expresion POR expresion
    (46) expresion -> . expresion DIVIDIDO expresion
    (47) expresion -> . expresion ELEVADO expresion
    (48) expresion -> . expresion MOD expresion
    (49) expresion -> . expresion AND expresion
    (50) expresion -> . expresion OR expresion
    (51) expresion -> . expresion MAYQUE expresion
    (52) expresion -> . expresion MENQUE expresion
    (53) expresion -> . expresion MAYIGUALQUE expresion
    (54) expresion -> . expresion MENIGUALQUE expresion
    (55) expresion -> . expresion IGUALQUE expresion
    (56) expresion -> . expresion NIGUALQUE expresion
    (57) expresion -> . MENOS expresion
    (58) expresion -> . NOT expresion
    (59) expresion -> . PARIZQ expresion PARDER
    (60) expresion -> . ID
    (61) expresion -> . ENTERO
    (62) expresion -> . DECIMAL
    (63) expresion -> . CADENA
    (64) expresion -> . CHARACTER
    (65) expresion -> . TRUE
    (66) expresion -> . FALSE
    (71) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (28) break_instr -> . BREAK

    LLAVDER         shift and go to state 151
    MAIN            shift and go to state 16
    PRINT           shift and go to state 18
    VAR             shift and go to state 19
    ID              shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 23
    FOR             shift and go to state 24
    NULL            shift and go to state 25
    MENOS           shift and go to state 26
    NOT             shift and go to state 27
    PARIZQ          shift and go to state 17
    ENTERO          shift and go to state 28
    DECIMAL         shift and go to state 29
    CADENA          shift and go to state 30
    CHARACTER       shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    BREAK           shift and go to state 34

    expresion                      shift and go to state 14
    instruccion                    shift and go to state 35
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    while_instr                    shift and go to state 10
    if_instr                       shift and go to state 11
    switch_instr                   shift and go to state 12
    for_instr                      shift and go to state 13
    break_instr                    shift and go to state 15

state 150

    (25) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    NULL            reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    MENOS           reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    NOT             reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    PARIZQ          reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    ENTERO          reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    DECIMAL         reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    CADENA          reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    CHARACTER       reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    TRUE            reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    FALSE           reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    PTCOMA          reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 25 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)


state 151

    (36) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    NULL            reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    MENOS           reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    NOT             reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PARIZQ          reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ENTERO          reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    DECIMAL         reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CADENA          reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CHARACTER       reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    TRUE            reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FALSE           reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PTCOMA          reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 36 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for NULL in state 0 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 0 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 0 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 0 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 0 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 0 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 0 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 0 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 0 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 14 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 36 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 37 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 61 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 93 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 93 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 102 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 102 resolved as shift
WARNING: shift/reduce conflict for VAR in state 102 resolved as shift
WARNING: shift/reduce conflict for ID in state 102 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 102 resolved as shift
WARNING: shift/reduce conflict for FOR in state 102 resolved as shift
WARNING: shift/reduce conflict for NULL in state 102 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 102 resolved as shift
WARNING: shift/reduce conflict for NOT in state 102 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 102 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 102 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 102 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 102 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 102 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 102 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 102 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 102 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 103 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 103 resolved as shift
WARNING: shift/reduce conflict for MAS in state 103 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 103 resolved as shift
WARNING: shift/reduce conflict for POR in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 103 resolved as shift
WARNING: shift/reduce conflict for ELEVADO in state 103 resolved as shift
WARNING: shift/reduce conflict for MOD in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for MAYQUE in state 103 resolved as shift
WARNING: shift/reduce conflict for MENQUE in state 103 resolved as shift
WARNING: shift/reduce conflict for MAYIGUALQUE in state 103 resolved as shift
WARNING: shift/reduce conflict for MENIGUALQUE in state 103 resolved as shift
WARNING: shift/reduce conflict for IGUALQUE in state 103 resolved as shift
WARNING: shift/reduce conflict for NIGUALQUE in state 103 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 104 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 105 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 105 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 115 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 115 resolved as shift
WARNING: shift/reduce conflict for VAR in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 115 resolved as shift
WARNING: shift/reduce conflict for IF in state 115 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 115 resolved as shift
WARNING: shift/reduce conflict for FOR in state 115 resolved as shift
WARNING: shift/reduce conflict for NULL in state 115 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 115 resolved as shift
WARNING: shift/reduce conflict for NOT in state 115 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 115 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 115 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 115 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 115 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 115 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 115 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 115 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 115 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 116 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 116 resolved as shift
WARNING: shift/reduce conflict for VAR in state 116 resolved as shift
WARNING: shift/reduce conflict for ID in state 116 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 116 resolved as shift
WARNING: shift/reduce conflict for IF in state 116 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 116 resolved as shift
WARNING: shift/reduce conflict for FOR in state 116 resolved as shift
WARNING: shift/reduce conflict for NULL in state 116 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 116 resolved as shift
WARNING: shift/reduce conflict for NOT in state 116 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 116 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 116 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 116 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 116 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 116 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 116 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 116 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 116 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 118 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 134 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 134 resolved as shift
WARNING: shift/reduce conflict for VAR in state 134 resolved as shift
WARNING: shift/reduce conflict for ID in state 134 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 134 resolved as shift
WARNING: shift/reduce conflict for IF in state 134 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 134 resolved as shift
WARNING: shift/reduce conflict for FOR in state 134 resolved as shift
WARNING: shift/reduce conflict for NULL in state 134 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 134 resolved as shift
WARNING: shift/reduce conflict for NOT in state 134 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 134 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 134 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 134 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 134 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 134 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 134 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 134 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 134 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 140 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 140 resolved as shift
WARNING: shift/reduce conflict for VAR in state 140 resolved as shift
WARNING: shift/reduce conflict for ID in state 140 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 140 resolved as shift
WARNING: shift/reduce conflict for IF in state 140 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 140 resolved as shift
WARNING: shift/reduce conflict for FOR in state 140 resolved as shift
WARNING: shift/reduce conflict for NULL in state 140 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 140 resolved as shift
WARNING: shift/reduce conflict for NOT in state 140 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 140 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 140 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 140 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 140 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 140 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 140 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 140 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 140 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 142 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 142 resolved as shift
WARNING: shift/reduce conflict for VAR in state 142 resolved as shift
WARNING: shift/reduce conflict for ID in state 142 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 142 resolved as shift
WARNING: shift/reduce conflict for IF in state 142 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 142 resolved as shift
WARNING: shift/reduce conflict for FOR in state 142 resolved as shift
WARNING: shift/reduce conflict for NULL in state 142 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 142 resolved as shift
WARNING: shift/reduce conflict for NOT in state 142 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 142 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 142 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 142 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 142 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 142 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 142 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 142 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 142 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 146 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 146 resolved as shift
WARNING: shift/reduce conflict for VAR in state 146 resolved as shift
WARNING: shift/reduce conflict for ID in state 146 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 146 resolved as shift
WARNING: shift/reduce conflict for IF in state 146 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 146 resolved as shift
WARNING: shift/reduce conflict for FOR in state 146 resolved as shift
WARNING: shift/reduce conflict for NULL in state 146 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 146 resolved as shift
WARNING: shift/reduce conflict for NOT in state 146 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 146 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 146 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 146 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 146 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 146 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 146 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 146 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 146 resolved as shift
