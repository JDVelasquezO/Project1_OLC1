Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> func_main
Rule 5     instruccion -> imprimir_instr
Rule 6     instruccion -> definicion_instr
Rule 7     instruccion -> asignacion_instr
Rule 8     instruccion -> def_asig_instr
Rule 9     instruccion -> mientras_instr
Rule 10    instruccion -> if_instr
Rule 11    instruccion -> if_else_instr
Rule 12    def_funcs_vars -> definicion_instr
Rule 13    def_funcs_vars -> asignacion_instr
Rule 14    def_funcs_vars -> empty
Rule 15    func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
Rule 16    imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima
Rule 17    print_expresion_general -> expresion_numerica
Rule 18    print_expresion_general -> expresion_cadena
Rule 19    print_expresion_general -> expresion_id
Rule 20    expresion_id -> ID
Rule 21    definicion_instr -> VAR ID def_instr_prima
Rule 22    def_instr_prima -> PTCOMA
Rule 23    def_instr_prima -> empty
Rule 24    empty -> <empty>
Rule 25    asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima
Rule 26    asign_expresion_general -> expresion_numerica
Rule 27    asign_expresion_general -> expresion_cadena
Rule 28    asign_expresion_general -> expresion_id
Rule 29    def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima
Rule 30    asign_def_expresion_general -> expresion_numerica
Rule 31    asign_def_expresion_general -> expresion_cadena
Rule 32    asign_def_expresion_general -> expresion_id
Rule 33    mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
Rule 34    if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
Rule 35    if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
Rule 36    expresion_numerica -> expresion_numerica MAS expresion_numerica
Rule 37    expresion_numerica -> expresion_numerica MENOS expresion_numerica
Rule 38    expresion_numerica -> expresion_numerica POR expresion_numerica
Rule 39    expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica
Rule 40    expresion_numerica -> MENOS expresion_numerica
Rule 41    expresion_numerica -> PARIZQ expresion_numerica PARDER
Rule 42    expresion_numerica -> ENTERO
Rule 43    expresion_numerica -> DECIMAL
Rule 44    expresion_numerica -> ID
Rule 45    expresion_cadena -> expresion_cadena CONCAT expresion_cadena
Rule 46    expresion_cadena -> CADENA
Rule 47    expresion_cadena -> expresion_numerica
Rule 48    expresion_logica -> expresion_numerica MAYQUE expresion_numerica
Rule 49    expresion_logica -> expresion_numerica MENQUE expresion_numerica
Rule 50    expresion_logica -> expresion_numerica IGUALQUE expresion_numerica
Rule 51    expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica

Terminals, with rules where they appear

CADENA               : 46
CONCAT               : 45
DECIMAL              : 43
DIVIDIDO             : 39
ELSE                 : 35
ENTERO               : 42
ID                   : 20 21 25 29 44
IF                   : 34 35
IGUAL                : 25 29
IGUALQUE             : 50
LLAVDER              : 15 33 34 35 35
LLAVIZQ              : 15 33 34 35 35
MAIN                 : 15
MAS                  : 36
MAYQUE               : 48
MENOS                : 37 40
MENQUE               : 49
MIENTRAS             : 33
NIGUALQUE            : 51
PARDER               : 15 16 33 34 35 41
PARIZQ               : 15 16 33 34 35 41
POR                  : 38
PRINT                : 16
PTCOMA               : 22
VAR                  : 21 29
error                : 

Nonterminals, with rules where they appear

asign_def_expresion_general : 29
asign_expresion_general : 25
asignacion_instr     : 7 13
def_asig_instr       : 8
def_funcs_vars       : 
def_instr_prima      : 16 21 25 29
definicion_instr     : 6 12
empty                : 14 23
expresion_cadena     : 18 27 31 45 45
expresion_id         : 19 28 32
expresion_logica     : 33 34 35
expresion_numerica   : 17 26 30 36 36 37 37 38 38 39 39 40 41 47 48 48 49 49 50 50 51 51
func_main            : 4
if_else_instr        : 11
if_instr             : 10
imprimir_instr       : 5
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 15 33 34 35 35
mientras_instr       : 9
print_expresion_general : 16

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . func_main
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (15) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (16) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (25) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (33) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    MAIN            shift and go to state 12
    PRINT           shift and go to state 13
    VAR             shift and go to state 14
    ID              shift and go to state 15
    MIENTRAS        shift and go to state 16
    IF              shift and go to state 17

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    func_main                      shift and go to state 4
    imprimir_instr                 shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    def_asig_instr                 shift and go to state 8
    mientras_instr                 shift and go to state 9
    if_instr                       shift and go to state 10
    if_else_instr                  shift and go to state 11

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . func_main
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (15) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (16) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (25) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (33) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    $end            reduce using rule 1 (init -> instrucciones .)
    MAIN            shift and go to state 12
    PRINT           shift and go to state 13
    VAR             shift and go to state 14
    ID              shift and go to state 15
    MIENTRAS        shift and go to state 16
    IF              shift and go to state 17

    instruccion                    shift and go to state 18
    func_main                      shift and go to state 4
    imprimir_instr                 shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    def_asig_instr                 shift and go to state 8
    mientras_instr                 shift and go to state 9
    if_instr                       shift and go to state 10
    if_else_instr                  shift and go to state 11

state 3

    (3) instrucciones -> instruccion .

    MAIN            reduce using rule 3 (instrucciones -> instruccion .)
    PRINT           reduce using rule 3 (instrucciones -> instruccion .)
    VAR             reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    MIENTRAS        reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    LLAVDER         reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> func_main .

    MAIN            reduce using rule 4 (instruccion -> func_main .)
    PRINT           reduce using rule 4 (instruccion -> func_main .)
    VAR             reduce using rule 4 (instruccion -> func_main .)
    ID              reduce using rule 4 (instruccion -> func_main .)
    MIENTRAS        reduce using rule 4 (instruccion -> func_main .)
    IF              reduce using rule 4 (instruccion -> func_main .)
    $end            reduce using rule 4 (instruccion -> func_main .)
    LLAVDER         reduce using rule 4 (instruccion -> func_main .)


state 5

    (5) instruccion -> imprimir_instr .

    MAIN            reduce using rule 5 (instruccion -> imprimir_instr .)
    PRINT           reduce using rule 5 (instruccion -> imprimir_instr .)
    VAR             reduce using rule 5 (instruccion -> imprimir_instr .)
    ID              reduce using rule 5 (instruccion -> imprimir_instr .)
    MIENTRAS        reduce using rule 5 (instruccion -> imprimir_instr .)
    IF              reduce using rule 5 (instruccion -> imprimir_instr .)
    $end            reduce using rule 5 (instruccion -> imprimir_instr .)
    LLAVDER         reduce using rule 5 (instruccion -> imprimir_instr .)


state 6

    (6) instruccion -> definicion_instr .

    MAIN            reduce using rule 6 (instruccion -> definicion_instr .)
    PRINT           reduce using rule 6 (instruccion -> definicion_instr .)
    VAR             reduce using rule 6 (instruccion -> definicion_instr .)
    ID              reduce using rule 6 (instruccion -> definicion_instr .)
    MIENTRAS        reduce using rule 6 (instruccion -> definicion_instr .)
    IF              reduce using rule 6 (instruccion -> definicion_instr .)
    $end            reduce using rule 6 (instruccion -> definicion_instr .)
    LLAVDER         reduce using rule 6 (instruccion -> definicion_instr .)


state 7

    (7) instruccion -> asignacion_instr .

    MAIN            reduce using rule 7 (instruccion -> asignacion_instr .)
    PRINT           reduce using rule 7 (instruccion -> asignacion_instr .)
    VAR             reduce using rule 7 (instruccion -> asignacion_instr .)
    ID              reduce using rule 7 (instruccion -> asignacion_instr .)
    MIENTRAS        reduce using rule 7 (instruccion -> asignacion_instr .)
    IF              reduce using rule 7 (instruccion -> asignacion_instr .)
    $end            reduce using rule 7 (instruccion -> asignacion_instr .)
    LLAVDER         reduce using rule 7 (instruccion -> asignacion_instr .)


state 8

    (8) instruccion -> def_asig_instr .

    MAIN            reduce using rule 8 (instruccion -> def_asig_instr .)
    PRINT           reduce using rule 8 (instruccion -> def_asig_instr .)
    VAR             reduce using rule 8 (instruccion -> def_asig_instr .)
    ID              reduce using rule 8 (instruccion -> def_asig_instr .)
    MIENTRAS        reduce using rule 8 (instruccion -> def_asig_instr .)
    IF              reduce using rule 8 (instruccion -> def_asig_instr .)
    $end            reduce using rule 8 (instruccion -> def_asig_instr .)
    LLAVDER         reduce using rule 8 (instruccion -> def_asig_instr .)


state 9

    (9) instruccion -> mientras_instr .

    MAIN            reduce using rule 9 (instruccion -> mientras_instr .)
    PRINT           reduce using rule 9 (instruccion -> mientras_instr .)
    VAR             reduce using rule 9 (instruccion -> mientras_instr .)
    ID              reduce using rule 9 (instruccion -> mientras_instr .)
    MIENTRAS        reduce using rule 9 (instruccion -> mientras_instr .)
    IF              reduce using rule 9 (instruccion -> mientras_instr .)
    $end            reduce using rule 9 (instruccion -> mientras_instr .)
    LLAVDER         reduce using rule 9 (instruccion -> mientras_instr .)


state 10

    (10) instruccion -> if_instr .

    MAIN            reduce using rule 10 (instruccion -> if_instr .)
    PRINT           reduce using rule 10 (instruccion -> if_instr .)
    VAR             reduce using rule 10 (instruccion -> if_instr .)
    ID              reduce using rule 10 (instruccion -> if_instr .)
    MIENTRAS        reduce using rule 10 (instruccion -> if_instr .)
    IF              reduce using rule 10 (instruccion -> if_instr .)
    $end            reduce using rule 10 (instruccion -> if_instr .)
    LLAVDER         reduce using rule 10 (instruccion -> if_instr .)


state 11

    (11) instruccion -> if_else_instr .

    MAIN            reduce using rule 11 (instruccion -> if_else_instr .)
    PRINT           reduce using rule 11 (instruccion -> if_else_instr .)
    VAR             reduce using rule 11 (instruccion -> if_else_instr .)
    ID              reduce using rule 11 (instruccion -> if_else_instr .)
    MIENTRAS        reduce using rule 11 (instruccion -> if_else_instr .)
    IF              reduce using rule 11 (instruccion -> if_else_instr .)
    $end            reduce using rule 11 (instruccion -> if_else_instr .)
    LLAVDER         reduce using rule 11 (instruccion -> if_else_instr .)


state 12

    (15) func_main -> MAIN . PARIZQ PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 19


state 13

    (16) imprimir_instr -> PRINT . PARIZQ print_expresion_general PARDER def_instr_prima

    PARIZQ          shift and go to state 20


state 14

    (21) definicion_instr -> VAR . ID def_instr_prima
    (29) def_asig_instr -> VAR . ID IGUAL asign_def_expresion_general def_instr_prima

    ID              shift and go to state 21


state 15

    (25) asignacion_instr -> ID . IGUAL asign_expresion_general def_instr_prima

    IGUAL           shift and go to state 22


state 16

    (33) mientras_instr -> MIENTRAS . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 23


state 17

    (34) if_instr -> IF . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> IF . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 24


state 18

    (2) instrucciones -> instrucciones instruccion .

    MAIN            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PRINT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    VAR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    MIENTRAS        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LLAVDER         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 19

    (15) func_main -> MAIN PARIZQ . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 25


state 20

    (16) imprimir_instr -> PRINT PARIZQ . print_expresion_general PARDER def_instr_prima
    (17) print_expresion_general -> . expresion_numerica
    (18) print_expresion_general -> . expresion_cadena
    (19) print_expresion_general -> . expresion_id
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID
    (45) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (46) expresion_cadena -> . CADENA
    (47) expresion_cadena -> . expresion_numerica
    (20) expresion_id -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 34
    CADENA          shift and go to state 35

    print_expresion_general        shift and go to state 27
    expresion_numerica             shift and go to state 28
    expresion_cadena               shift and go to state 29
    expresion_id                   shift and go to state 30

state 21

    (21) definicion_instr -> VAR ID . def_instr_prima
    (29) def_asig_instr -> VAR ID . IGUAL asign_def_expresion_general def_instr_prima
    (22) def_instr_prima -> . PTCOMA
    (23) def_instr_prima -> . empty
    (24) empty -> .

    IGUAL           shift and go to state 37
    PTCOMA          shift and go to state 38
    MAIN            reduce using rule 24 (empty -> .)
    PRINT           reduce using rule 24 (empty -> .)
    VAR             reduce using rule 24 (empty -> .)
    ID              reduce using rule 24 (empty -> .)
    MIENTRAS        reduce using rule 24 (empty -> .)
    IF              reduce using rule 24 (empty -> .)
    $end            reduce using rule 24 (empty -> .)
    LLAVDER         reduce using rule 24 (empty -> .)

    def_instr_prima                shift and go to state 36
    empty                          shift and go to state 39

state 22

    (25) asignacion_instr -> ID IGUAL . asign_expresion_general def_instr_prima
    (26) asign_expresion_general -> . expresion_numerica
    (27) asign_expresion_general -> . expresion_cadena
    (28) asign_expresion_general -> . expresion_id
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID
    (45) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (46) expresion_cadena -> . CADENA
    (47) expresion_cadena -> . expresion_numerica
    (20) expresion_id -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 34
    CADENA          shift and go to state 35

    asign_expresion_general        shift and go to state 40
    expresion_numerica             shift and go to state 41
    expresion_cadena               shift and go to state 42
    expresion_id                   shift and go to state 43

state 23

    (33) mientras_instr -> MIENTRAS PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (48) expresion_logica -> . expresion_numerica MAYQUE expresion_numerica
    (49) expresion_logica -> . expresion_numerica MENQUE expresion_numerica
    (50) expresion_logica -> . expresion_numerica IGUALQUE expresion_numerica
    (51) expresion_logica -> . expresion_numerica NIGUALQUE expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 46

    expresion_logica               shift and go to state 44
    expresion_numerica             shift and go to state 45

state 24

    (34) if_instr -> IF PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> IF PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (48) expresion_logica -> . expresion_numerica MAYQUE expresion_numerica
    (49) expresion_logica -> . expresion_numerica MENQUE expresion_numerica
    (50) expresion_logica -> . expresion_numerica IGUALQUE expresion_numerica
    (51) expresion_logica -> . expresion_numerica NIGUALQUE expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 46

    expresion_logica               shift and go to state 47
    expresion_numerica             shift and go to state 45

state 25

    (15) func_main -> MAIN PARIZQ PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 48


state 26

    (41) expresion_numerica -> PARIZQ . expresion_numerica PARDER
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 46

    expresion_numerica             shift and go to state 49

state 27

    (16) imprimir_instr -> PRINT PARIZQ print_expresion_general . PARDER def_instr_prima

    PARDER          shift and go to state 50


state 28

    (17) print_expresion_general -> expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (47) expresion_cadena -> expresion_numerica .

  ! reduce/reduce conflict for PARDER resolved using rule 17 (print_expresion_general -> expresion_numerica .)
    PARDER          reduce using rule 17 (print_expresion_general -> expresion_numerica .)
    MAS             shift and go to state 51
    MENOS           shift and go to state 52
    POR             shift and go to state 53
    DIVIDIDO        shift and go to state 54
    CONCAT          reduce using rule 47 (expresion_cadena -> expresion_numerica .)

  ! PARDER          [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]


state 29

    (18) print_expresion_general -> expresion_cadena .
    (45) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    PARDER          reduce using rule 18 (print_expresion_general -> expresion_cadena .)
    CONCAT          shift and go to state 55


state 30

    (19) print_expresion_general -> expresion_id .

    PARDER          reduce using rule 19 (print_expresion_general -> expresion_id .)


state 31

    (40) expresion_numerica -> MENOS . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 46

    expresion_numerica             shift and go to state 56

state 32

    (42) expresion_numerica -> ENTERO .

    MAS             reduce using rule 42 (expresion_numerica -> ENTERO .)
    MENOS           reduce using rule 42 (expresion_numerica -> ENTERO .)
    POR             reduce using rule 42 (expresion_numerica -> ENTERO .)
    DIVIDIDO        reduce using rule 42 (expresion_numerica -> ENTERO .)
    PARDER          reduce using rule 42 (expresion_numerica -> ENTERO .)
    CONCAT          reduce using rule 42 (expresion_numerica -> ENTERO .)
    PTCOMA          reduce using rule 42 (expresion_numerica -> ENTERO .)
    MAIN            reduce using rule 42 (expresion_numerica -> ENTERO .)
    PRINT           reduce using rule 42 (expresion_numerica -> ENTERO .)
    VAR             reduce using rule 42 (expresion_numerica -> ENTERO .)
    ID              reduce using rule 42 (expresion_numerica -> ENTERO .)
    MIENTRAS        reduce using rule 42 (expresion_numerica -> ENTERO .)
    IF              reduce using rule 42 (expresion_numerica -> ENTERO .)
    $end            reduce using rule 42 (expresion_numerica -> ENTERO .)
    LLAVDER         reduce using rule 42 (expresion_numerica -> ENTERO .)
    MAYQUE          reduce using rule 42 (expresion_numerica -> ENTERO .)
    MENQUE          reduce using rule 42 (expresion_numerica -> ENTERO .)
    IGUALQUE        reduce using rule 42 (expresion_numerica -> ENTERO .)
    NIGUALQUE       reduce using rule 42 (expresion_numerica -> ENTERO .)


state 33

    (43) expresion_numerica -> DECIMAL .

    MAS             reduce using rule 43 (expresion_numerica -> DECIMAL .)
    MENOS           reduce using rule 43 (expresion_numerica -> DECIMAL .)
    POR             reduce using rule 43 (expresion_numerica -> DECIMAL .)
    DIVIDIDO        reduce using rule 43 (expresion_numerica -> DECIMAL .)
    PARDER          reduce using rule 43 (expresion_numerica -> DECIMAL .)
    CONCAT          reduce using rule 43 (expresion_numerica -> DECIMAL .)
    PTCOMA          reduce using rule 43 (expresion_numerica -> DECIMAL .)
    MAIN            reduce using rule 43 (expresion_numerica -> DECIMAL .)
    PRINT           reduce using rule 43 (expresion_numerica -> DECIMAL .)
    VAR             reduce using rule 43 (expresion_numerica -> DECIMAL .)
    ID              reduce using rule 43 (expresion_numerica -> DECIMAL .)
    MIENTRAS        reduce using rule 43 (expresion_numerica -> DECIMAL .)
    IF              reduce using rule 43 (expresion_numerica -> DECIMAL .)
    $end            reduce using rule 43 (expresion_numerica -> DECIMAL .)
    LLAVDER         reduce using rule 43 (expresion_numerica -> DECIMAL .)
    MAYQUE          reduce using rule 43 (expresion_numerica -> DECIMAL .)
    MENQUE          reduce using rule 43 (expresion_numerica -> DECIMAL .)
    IGUALQUE        reduce using rule 43 (expresion_numerica -> DECIMAL .)
    NIGUALQUE       reduce using rule 43 (expresion_numerica -> DECIMAL .)


state 34

    (44) expresion_numerica -> ID .
    (20) expresion_id -> ID .

  ! reduce/reduce conflict for PARDER resolved using rule 20 (expresion_id -> ID .)
  ! reduce/reduce conflict for PTCOMA resolved using rule 20 (expresion_id -> ID .)
  ! reduce/reduce conflict for MAIN resolved using rule 20 (expresion_id -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 20 (expresion_id -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 20 (expresion_id -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 20 (expresion_id -> ID .)
  ! reduce/reduce conflict for MIENTRAS resolved using rule 20 (expresion_id -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 20 (expresion_id -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 20 (expresion_id -> ID .)
  ! reduce/reduce conflict for LLAVDER resolved using rule 20 (expresion_id -> ID .)
    MAS             reduce using rule 44 (expresion_numerica -> ID .)
    MENOS           reduce using rule 44 (expresion_numerica -> ID .)
    POR             reduce using rule 44 (expresion_numerica -> ID .)
    DIVIDIDO        reduce using rule 44 (expresion_numerica -> ID .)
    CONCAT          reduce using rule 44 (expresion_numerica -> ID .)
    PARDER          reduce using rule 20 (expresion_id -> ID .)
    PTCOMA          reduce using rule 20 (expresion_id -> ID .)
    MAIN            reduce using rule 20 (expresion_id -> ID .)
    PRINT           reduce using rule 20 (expresion_id -> ID .)
    VAR             reduce using rule 20 (expresion_id -> ID .)
    ID              reduce using rule 20 (expresion_id -> ID .)
    MIENTRAS        reduce using rule 20 (expresion_id -> ID .)
    IF              reduce using rule 20 (expresion_id -> ID .)
    $end            reduce using rule 20 (expresion_id -> ID .)
    LLAVDER         reduce using rule 20 (expresion_id -> ID .)

  ! PARDER          [ reduce using rule 44 (expresion_numerica -> ID .) ]
  ! PTCOMA          [ reduce using rule 44 (expresion_numerica -> ID .) ]
  ! MAIN            [ reduce using rule 44 (expresion_numerica -> ID .) ]
  ! PRINT           [ reduce using rule 44 (expresion_numerica -> ID .) ]
  ! VAR             [ reduce using rule 44 (expresion_numerica -> ID .) ]
  ! ID              [ reduce using rule 44 (expresion_numerica -> ID .) ]
  ! MIENTRAS        [ reduce using rule 44 (expresion_numerica -> ID .) ]
  ! IF              [ reduce using rule 44 (expresion_numerica -> ID .) ]
  ! $end            [ reduce using rule 44 (expresion_numerica -> ID .) ]
  ! LLAVDER         [ reduce using rule 44 (expresion_numerica -> ID .) ]


state 35

    (46) expresion_cadena -> CADENA .

    CONCAT          reduce using rule 46 (expresion_cadena -> CADENA .)
    PARDER          reduce using rule 46 (expresion_cadena -> CADENA .)
    PTCOMA          reduce using rule 46 (expresion_cadena -> CADENA .)
    MAIN            reduce using rule 46 (expresion_cadena -> CADENA .)
    PRINT           reduce using rule 46 (expresion_cadena -> CADENA .)
    VAR             reduce using rule 46 (expresion_cadena -> CADENA .)
    ID              reduce using rule 46 (expresion_cadena -> CADENA .)
    MIENTRAS        reduce using rule 46 (expresion_cadena -> CADENA .)
    IF              reduce using rule 46 (expresion_cadena -> CADENA .)
    $end            reduce using rule 46 (expresion_cadena -> CADENA .)
    LLAVDER         reduce using rule 46 (expresion_cadena -> CADENA .)


state 36

    (21) definicion_instr -> VAR ID def_instr_prima .

    MAIN            reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    PRINT           reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    VAR             reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    ID              reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    MIENTRAS        reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    IF              reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    $end            reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)
    LLAVDER         reduce using rule 21 (definicion_instr -> VAR ID def_instr_prima .)


state 37

    (29) def_asig_instr -> VAR ID IGUAL . asign_def_expresion_general def_instr_prima
    (30) asign_def_expresion_general -> . expresion_numerica
    (31) asign_def_expresion_general -> . expresion_cadena
    (32) asign_def_expresion_general -> . expresion_id
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID
    (45) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (46) expresion_cadena -> . CADENA
    (47) expresion_cadena -> . expresion_numerica
    (20) expresion_id -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 34
    CADENA          shift and go to state 35

    asign_def_expresion_general    shift and go to state 57
    expresion_numerica             shift and go to state 58
    expresion_cadena               shift and go to state 59
    expresion_id                   shift and go to state 60

state 38

    (22) def_instr_prima -> PTCOMA .

    MAIN            reduce using rule 22 (def_instr_prima -> PTCOMA .)
    PRINT           reduce using rule 22 (def_instr_prima -> PTCOMA .)
    VAR             reduce using rule 22 (def_instr_prima -> PTCOMA .)
    ID              reduce using rule 22 (def_instr_prima -> PTCOMA .)
    MIENTRAS        reduce using rule 22 (def_instr_prima -> PTCOMA .)
    IF              reduce using rule 22 (def_instr_prima -> PTCOMA .)
    $end            reduce using rule 22 (def_instr_prima -> PTCOMA .)
    LLAVDER         reduce using rule 22 (def_instr_prima -> PTCOMA .)


state 39

    (23) def_instr_prima -> empty .

    MAIN            reduce using rule 23 (def_instr_prima -> empty .)
    PRINT           reduce using rule 23 (def_instr_prima -> empty .)
    VAR             reduce using rule 23 (def_instr_prima -> empty .)
    ID              reduce using rule 23 (def_instr_prima -> empty .)
    MIENTRAS        reduce using rule 23 (def_instr_prima -> empty .)
    IF              reduce using rule 23 (def_instr_prima -> empty .)
    $end            reduce using rule 23 (def_instr_prima -> empty .)
    LLAVDER         reduce using rule 23 (def_instr_prima -> empty .)


state 40

    (25) asignacion_instr -> ID IGUAL asign_expresion_general . def_instr_prima
    (22) def_instr_prima -> . PTCOMA
    (23) def_instr_prima -> . empty
    (24) empty -> .

    PTCOMA          shift and go to state 38
    MAIN            reduce using rule 24 (empty -> .)
    PRINT           reduce using rule 24 (empty -> .)
    VAR             reduce using rule 24 (empty -> .)
    ID              reduce using rule 24 (empty -> .)
    MIENTRAS        reduce using rule 24 (empty -> .)
    IF              reduce using rule 24 (empty -> .)
    $end            reduce using rule 24 (empty -> .)
    LLAVDER         reduce using rule 24 (empty -> .)

    def_instr_prima                shift and go to state 61
    empty                          shift and go to state 39

state 41

    (26) asign_expresion_general -> expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (47) expresion_cadena -> expresion_numerica .

  ! reduce/reduce conflict for PTCOMA resolved using rule 26 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for MAIN resolved using rule 26 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for PRINT resolved using rule 26 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for VAR resolved using rule 26 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for ID resolved using rule 26 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for MIENTRAS resolved using rule 26 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for IF resolved using rule 26 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for $end resolved using rule 26 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for LLAVDER resolved using rule 26 (asign_expresion_general -> expresion_numerica .)
    PTCOMA          reduce using rule 26 (asign_expresion_general -> expresion_numerica .)
    MAIN            reduce using rule 26 (asign_expresion_general -> expresion_numerica .)
    PRINT           reduce using rule 26 (asign_expresion_general -> expresion_numerica .)
    VAR             reduce using rule 26 (asign_expresion_general -> expresion_numerica .)
    ID              reduce using rule 26 (asign_expresion_general -> expresion_numerica .)
    MIENTRAS        reduce using rule 26 (asign_expresion_general -> expresion_numerica .)
    IF              reduce using rule 26 (asign_expresion_general -> expresion_numerica .)
    $end            reduce using rule 26 (asign_expresion_general -> expresion_numerica .)
    LLAVDER         reduce using rule 26 (asign_expresion_general -> expresion_numerica .)
    MAS             shift and go to state 51
    MENOS           shift and go to state 52
    POR             shift and go to state 53
    DIVIDIDO        shift and go to state 54
    CONCAT          reduce using rule 47 (expresion_cadena -> expresion_numerica .)

  ! PTCOMA          [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! MAIN            [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! PRINT           [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! VAR             [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! ID              [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! MIENTRAS        [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! IF              [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! $end            [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! LLAVDER         [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]


state 42

    (27) asign_expresion_general -> expresion_cadena .
    (45) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    PTCOMA          reduce using rule 27 (asign_expresion_general -> expresion_cadena .)
    MAIN            reduce using rule 27 (asign_expresion_general -> expresion_cadena .)
    PRINT           reduce using rule 27 (asign_expresion_general -> expresion_cadena .)
    VAR             reduce using rule 27 (asign_expresion_general -> expresion_cadena .)
    ID              reduce using rule 27 (asign_expresion_general -> expresion_cadena .)
    MIENTRAS        reduce using rule 27 (asign_expresion_general -> expresion_cadena .)
    IF              reduce using rule 27 (asign_expresion_general -> expresion_cadena .)
    $end            reduce using rule 27 (asign_expresion_general -> expresion_cadena .)
    LLAVDER         reduce using rule 27 (asign_expresion_general -> expresion_cadena .)
    CONCAT          shift and go to state 55


state 43

    (28) asign_expresion_general -> expresion_id .

    PTCOMA          reduce using rule 28 (asign_expresion_general -> expresion_id .)
    MAIN            reduce using rule 28 (asign_expresion_general -> expresion_id .)
    PRINT           reduce using rule 28 (asign_expresion_general -> expresion_id .)
    VAR             reduce using rule 28 (asign_expresion_general -> expresion_id .)
    ID              reduce using rule 28 (asign_expresion_general -> expresion_id .)
    MIENTRAS        reduce using rule 28 (asign_expresion_general -> expresion_id .)
    IF              reduce using rule 28 (asign_expresion_general -> expresion_id .)
    $end            reduce using rule 28 (asign_expresion_general -> expresion_id .)
    LLAVDER         reduce using rule 28 (asign_expresion_general -> expresion_id .)


state 44

    (33) mientras_instr -> MIENTRAS PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 62


state 45

    (48) expresion_logica -> expresion_numerica . MAYQUE expresion_numerica
    (49) expresion_logica -> expresion_numerica . MENQUE expresion_numerica
    (50) expresion_logica -> expresion_numerica . IGUALQUE expresion_numerica
    (51) expresion_logica -> expresion_numerica . NIGUALQUE expresion_numerica
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAYQUE          shift and go to state 63
    MENQUE          shift and go to state 64
    IGUALQUE        shift and go to state 65
    NIGUALQUE       shift and go to state 66
    MAS             shift and go to state 51
    MENOS           shift and go to state 52
    POR             shift and go to state 53
    DIVIDIDO        shift and go to state 54


state 46

    (44) expresion_numerica -> ID .

    MAYQUE          reduce using rule 44 (expresion_numerica -> ID .)
    MENQUE          reduce using rule 44 (expresion_numerica -> ID .)
    IGUALQUE        reduce using rule 44 (expresion_numerica -> ID .)
    NIGUALQUE       reduce using rule 44 (expresion_numerica -> ID .)
    MAS             reduce using rule 44 (expresion_numerica -> ID .)
    MENOS           reduce using rule 44 (expresion_numerica -> ID .)
    POR             reduce using rule 44 (expresion_numerica -> ID .)
    DIVIDIDO        reduce using rule 44 (expresion_numerica -> ID .)
    PARDER          reduce using rule 44 (expresion_numerica -> ID .)
    CONCAT          reduce using rule 44 (expresion_numerica -> ID .)
    PTCOMA          reduce using rule 44 (expresion_numerica -> ID .)
    MAIN            reduce using rule 44 (expresion_numerica -> ID .)
    PRINT           reduce using rule 44 (expresion_numerica -> ID .)
    VAR             reduce using rule 44 (expresion_numerica -> ID .)
    ID              reduce using rule 44 (expresion_numerica -> ID .)
    MIENTRAS        reduce using rule 44 (expresion_numerica -> ID .)
    IF              reduce using rule 44 (expresion_numerica -> ID .)
    $end            reduce using rule 44 (expresion_numerica -> ID .)
    LLAVDER         reduce using rule 44 (expresion_numerica -> ID .)


state 47

    (34) if_instr -> IF PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> IF PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 67


state 48

    (15) func_main -> MAIN PARIZQ PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . func_main
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (15) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (16) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (25) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (33) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    MAIN            shift and go to state 12
    PRINT           shift and go to state 13
    VAR             shift and go to state 14
    ID              shift and go to state 15
    MIENTRAS        shift and go to state 16
    IF              shift and go to state 17

    instrucciones                  shift and go to state 68
    instruccion                    shift and go to state 3
    func_main                      shift and go to state 4
    imprimir_instr                 shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    def_asig_instr                 shift and go to state 8
    mientras_instr                 shift and go to state 9
    if_instr                       shift and go to state 10
    if_else_instr                  shift and go to state 11

state 49

    (41) expresion_numerica -> PARIZQ expresion_numerica . PARDER
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          shift and go to state 69
    MAS             shift and go to state 51
    MENOS           shift and go to state 52
    POR             shift and go to state 53
    DIVIDIDO        shift and go to state 54


state 50

    (16) imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER . def_instr_prima
    (22) def_instr_prima -> . PTCOMA
    (23) def_instr_prima -> . empty
    (24) empty -> .

    PTCOMA          shift and go to state 38
    MAIN            reduce using rule 24 (empty -> .)
    PRINT           reduce using rule 24 (empty -> .)
    VAR             reduce using rule 24 (empty -> .)
    ID              reduce using rule 24 (empty -> .)
    MIENTRAS        reduce using rule 24 (empty -> .)
    IF              reduce using rule 24 (empty -> .)
    $end            reduce using rule 24 (empty -> .)
    LLAVDER         reduce using rule 24 (empty -> .)

    def_instr_prima                shift and go to state 70
    empty                          shift and go to state 39

state 51

    (36) expresion_numerica -> expresion_numerica MAS . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 46

    expresion_numerica             shift and go to state 71

state 52

    (37) expresion_numerica -> expresion_numerica MENOS . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 46

    expresion_numerica             shift and go to state 72

state 53

    (38) expresion_numerica -> expresion_numerica POR . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 46

    expresion_numerica             shift and go to state 73

state 54

    (39) expresion_numerica -> expresion_numerica DIVIDIDO . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 46

    expresion_numerica             shift and go to state 74

state 55

    (45) expresion_cadena -> expresion_cadena CONCAT . expresion_cadena
    (45) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (46) expresion_cadena -> . CADENA
    (47) expresion_cadena -> . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    CADENA          shift and go to state 35
    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 46

    expresion_cadena               shift and go to state 75
    expresion_numerica             shift and go to state 76

state 56

    (40) expresion_numerica -> MENOS expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    MENOS           reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    POR             reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    DIVIDIDO        reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    PARDER          reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    CONCAT          reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    PTCOMA          reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    MAIN            reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    PRINT           reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    VAR             reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    ID              reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    MIENTRAS        reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    IF              reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    $end            reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    LLAVDER         reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    MAYQUE          reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    MENQUE          reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    IGUALQUE        reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    NIGUALQUE       reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)

  ! MAS             [ shift and go to state 51 ]
  ! MENOS           [ shift and go to state 52 ]
  ! POR             [ shift and go to state 53 ]
  ! DIVIDIDO        [ shift and go to state 54 ]


state 57

    (29) def_asig_instr -> VAR ID IGUAL asign_def_expresion_general . def_instr_prima
    (22) def_instr_prima -> . PTCOMA
    (23) def_instr_prima -> . empty
    (24) empty -> .

    PTCOMA          shift and go to state 38
    MAIN            reduce using rule 24 (empty -> .)
    PRINT           reduce using rule 24 (empty -> .)
    VAR             reduce using rule 24 (empty -> .)
    ID              reduce using rule 24 (empty -> .)
    MIENTRAS        reduce using rule 24 (empty -> .)
    IF              reduce using rule 24 (empty -> .)
    $end            reduce using rule 24 (empty -> .)
    LLAVDER         reduce using rule 24 (empty -> .)

    def_instr_prima                shift and go to state 77
    empty                          shift and go to state 39

state 58

    (30) asign_def_expresion_general -> expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (47) expresion_cadena -> expresion_numerica .

  ! reduce/reduce conflict for PTCOMA resolved using rule 30 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for MAIN resolved using rule 30 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for PRINT resolved using rule 30 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for VAR resolved using rule 30 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for ID resolved using rule 30 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for MIENTRAS resolved using rule 30 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for IF resolved using rule 30 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for $end resolved using rule 30 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for LLAVDER resolved using rule 30 (asign_def_expresion_general -> expresion_numerica .)
    PTCOMA          reduce using rule 30 (asign_def_expresion_general -> expresion_numerica .)
    MAIN            reduce using rule 30 (asign_def_expresion_general -> expresion_numerica .)
    PRINT           reduce using rule 30 (asign_def_expresion_general -> expresion_numerica .)
    VAR             reduce using rule 30 (asign_def_expresion_general -> expresion_numerica .)
    ID              reduce using rule 30 (asign_def_expresion_general -> expresion_numerica .)
    MIENTRAS        reduce using rule 30 (asign_def_expresion_general -> expresion_numerica .)
    IF              reduce using rule 30 (asign_def_expresion_general -> expresion_numerica .)
    $end            reduce using rule 30 (asign_def_expresion_general -> expresion_numerica .)
    LLAVDER         reduce using rule 30 (asign_def_expresion_general -> expresion_numerica .)
    MAS             shift and go to state 51
    MENOS           shift and go to state 52
    POR             shift and go to state 53
    DIVIDIDO        shift and go to state 54
    CONCAT          reduce using rule 47 (expresion_cadena -> expresion_numerica .)

  ! PTCOMA          [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! MAIN            [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! PRINT           [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! VAR             [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! ID              [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! MIENTRAS        [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! IF              [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! $end            [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]
  ! LLAVDER         [ reduce using rule 47 (expresion_cadena -> expresion_numerica .) ]


state 59

    (31) asign_def_expresion_general -> expresion_cadena .
    (45) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    PTCOMA          reduce using rule 31 (asign_def_expresion_general -> expresion_cadena .)
    MAIN            reduce using rule 31 (asign_def_expresion_general -> expresion_cadena .)
    PRINT           reduce using rule 31 (asign_def_expresion_general -> expresion_cadena .)
    VAR             reduce using rule 31 (asign_def_expresion_general -> expresion_cadena .)
    ID              reduce using rule 31 (asign_def_expresion_general -> expresion_cadena .)
    MIENTRAS        reduce using rule 31 (asign_def_expresion_general -> expresion_cadena .)
    IF              reduce using rule 31 (asign_def_expresion_general -> expresion_cadena .)
    $end            reduce using rule 31 (asign_def_expresion_general -> expresion_cadena .)
    LLAVDER         reduce using rule 31 (asign_def_expresion_general -> expresion_cadena .)
    CONCAT          shift and go to state 55


state 60

    (32) asign_def_expresion_general -> expresion_id .

    PTCOMA          reduce using rule 32 (asign_def_expresion_general -> expresion_id .)
    MAIN            reduce using rule 32 (asign_def_expresion_general -> expresion_id .)
    PRINT           reduce using rule 32 (asign_def_expresion_general -> expresion_id .)
    VAR             reduce using rule 32 (asign_def_expresion_general -> expresion_id .)
    ID              reduce using rule 32 (asign_def_expresion_general -> expresion_id .)
    MIENTRAS        reduce using rule 32 (asign_def_expresion_general -> expresion_id .)
    IF              reduce using rule 32 (asign_def_expresion_general -> expresion_id .)
    $end            reduce using rule 32 (asign_def_expresion_general -> expresion_id .)
    LLAVDER         reduce using rule 32 (asign_def_expresion_general -> expresion_id .)


state 61

    (25) asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .

    MAIN            reduce using rule 25 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    PRINT           reduce using rule 25 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    VAR             reduce using rule 25 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    ID              reduce using rule 25 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    MIENTRAS        reduce using rule 25 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    IF              reduce using rule 25 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    $end            reduce using rule 25 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    LLAVDER         reduce using rule 25 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)


state 62

    (33) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 78


state 63

    (48) expresion_logica -> expresion_numerica MAYQUE . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 46

    expresion_numerica             shift and go to state 79

state 64

    (49) expresion_logica -> expresion_numerica MENQUE . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 46

    expresion_numerica             shift and go to state 80

state 65

    (50) expresion_logica -> expresion_numerica IGUALQUE . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 46

    expresion_numerica             shift and go to state 81

state 66

    (51) expresion_logica -> expresion_numerica NIGUALQUE . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 31
    PARIZQ          shift and go to state 26
    ENTERO          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 46

    expresion_numerica             shift and go to state 82

state 67

    (34) if_instr -> IF PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 83


state 68

    (15) func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . func_main
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (15) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (16) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (25) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (33) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVDER         shift and go to state 84
    MAIN            shift and go to state 12
    PRINT           shift and go to state 13
    VAR             shift and go to state 14
    ID              shift and go to state 15
    MIENTRAS        shift and go to state 16
    IF              shift and go to state 17

    instruccion                    shift and go to state 18
    func_main                      shift and go to state 4
    imprimir_instr                 shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    def_asig_instr                 shift and go to state 8
    mientras_instr                 shift and go to state 9
    if_instr                       shift and go to state 10
    if_else_instr                  shift and go to state 11

state 69

    (41) expresion_numerica -> PARIZQ expresion_numerica PARDER .

    MAS             reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENOS           reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    POR             reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    DIVIDIDO        reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PARDER          reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    CONCAT          reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PTCOMA          reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MAIN            reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PRINT           reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    VAR             reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    ID              reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MIENTRAS        reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IF              reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    $end            reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    LLAVDER         reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MAYQUE          reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENQUE          reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IGUALQUE        reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    NIGUALQUE       reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)


state 70

    (16) imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .

    MAIN            reduce using rule 16 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    PRINT           reduce using rule 16 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    VAR             reduce using rule 16 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    ID              reduce using rule 16 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    MIENTRAS        reduce using rule 16 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    IF              reduce using rule 16 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    $end            reduce using rule 16 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    LLAVDER         reduce using rule 16 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)


state 71

    (36) expresion_numerica -> expresion_numerica MAS expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENOS           reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PARDER          reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    CONCAT          reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PTCOMA          reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MAIN            reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PRINT           reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    VAR             reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    ID              reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MIENTRAS        reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IF              reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    $end            reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    LLAVDER         reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MAYQUE          reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENQUE          reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IGUALQUE        reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    NIGUALQUE       reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    POR             shift and go to state 53
    DIVIDIDO        shift and go to state 54

  ! POR             [ reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! MAS             [ shift and go to state 51 ]
  ! MENOS           [ shift and go to state 52 ]


state 72

    (37) expresion_numerica -> expresion_numerica MENOS expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENOS           reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PARDER          reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    CONCAT          reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PTCOMA          reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MAIN            reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PRINT           reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    VAR             reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    ID              reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MIENTRAS        reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IF              reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    $end            reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    LLAVDER         reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MAYQUE          reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENQUE          reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IGUALQUE        reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    NIGUALQUE       reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    POR             shift and go to state 53
    DIVIDIDO        shift and go to state 54

  ! POR             [ reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! MAS             [ shift and go to state 51 ]
  ! MENOS           [ shift and go to state 52 ]


state 73

    (38) expresion_numerica -> expresion_numerica POR expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENOS           reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    POR             reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    DIVIDIDO        reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PARDER          reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    CONCAT          reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PTCOMA          reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MAIN            reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PRINT           reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    VAR             reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    ID              reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MIENTRAS        reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IF              reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    $end            reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    LLAVDER         reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MAYQUE          reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENQUE          reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IGUALQUE        reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    NIGUALQUE       reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)

  ! MAS             [ shift and go to state 51 ]
  ! MENOS           [ shift and go to state 52 ]
  ! POR             [ shift and go to state 53 ]
  ! DIVIDIDO        [ shift and go to state 54 ]


state 74

    (39) expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENOS           reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    POR             reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    DIVIDIDO        reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PARDER          reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    CONCAT          reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PTCOMA          reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MAIN            reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PRINT           reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    VAR             reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    ID              reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MIENTRAS        reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IF              reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    $end            reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    LLAVDER         reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MAYQUE          reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENQUE          reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IGUALQUE        reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    NIGUALQUE       reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)

  ! MAS             [ shift and go to state 51 ]
  ! MENOS           [ shift and go to state 52 ]
  ! POR             [ shift and go to state 53 ]
  ! DIVIDIDO        [ shift and go to state 54 ]


state 75

    (45) expresion_cadena -> expresion_cadena CONCAT expresion_cadena .
    (45) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    CONCAT          reduce using rule 45 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    PARDER          reduce using rule 45 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    PTCOMA          reduce using rule 45 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    MAIN            reduce using rule 45 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    PRINT           reduce using rule 45 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    VAR             reduce using rule 45 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    ID              reduce using rule 45 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    MIENTRAS        reduce using rule 45 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    IF              reduce using rule 45 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    $end            reduce using rule 45 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    LLAVDER         reduce using rule 45 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)

  ! CONCAT          [ shift and go to state 55 ]


state 76

    (47) expresion_cadena -> expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    CONCAT          reduce using rule 47 (expresion_cadena -> expresion_numerica .)
    PARDER          reduce using rule 47 (expresion_cadena -> expresion_numerica .)
    PTCOMA          reduce using rule 47 (expresion_cadena -> expresion_numerica .)
    MAIN            reduce using rule 47 (expresion_cadena -> expresion_numerica .)
    PRINT           reduce using rule 47 (expresion_cadena -> expresion_numerica .)
    VAR             reduce using rule 47 (expresion_cadena -> expresion_numerica .)
    ID              reduce using rule 47 (expresion_cadena -> expresion_numerica .)
    MIENTRAS        reduce using rule 47 (expresion_cadena -> expresion_numerica .)
    IF              reduce using rule 47 (expresion_cadena -> expresion_numerica .)
    $end            reduce using rule 47 (expresion_cadena -> expresion_numerica .)
    LLAVDER         reduce using rule 47 (expresion_cadena -> expresion_numerica .)
    MAS             shift and go to state 51
    MENOS           shift and go to state 52
    POR             shift and go to state 53
    DIVIDIDO        shift and go to state 54


state 77

    (29) def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .

    MAIN            reduce using rule 29 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    PRINT           reduce using rule 29 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    VAR             reduce using rule 29 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    ID              reduce using rule 29 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    MIENTRAS        reduce using rule 29 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    IF              reduce using rule 29 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    $end            reduce using rule 29 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    LLAVDER         reduce using rule 29 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)


state 78

    (33) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . func_main
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (15) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (16) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (25) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (33) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    MAIN            shift and go to state 12
    PRINT           shift and go to state 13
    VAR             shift and go to state 14
    ID              shift and go to state 15
    MIENTRAS        shift and go to state 16
    IF              shift and go to state 17

    instrucciones                  shift and go to state 85
    instruccion                    shift and go to state 3
    func_main                      shift and go to state 4
    imprimir_instr                 shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    def_asig_instr                 shift and go to state 8
    mientras_instr                 shift and go to state 9
    if_instr                       shift and go to state 10
    if_else_instr                  shift and go to state 11

state 79

    (48) expresion_logica -> expresion_numerica MAYQUE expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 48 (expresion_logica -> expresion_numerica MAYQUE expresion_numerica .)
    MAS             shift and go to state 51
    MENOS           shift and go to state 52
    POR             shift and go to state 53
    DIVIDIDO        shift and go to state 54


state 80

    (49) expresion_logica -> expresion_numerica MENQUE expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 49 (expresion_logica -> expresion_numerica MENQUE expresion_numerica .)
    MAS             shift and go to state 51
    MENOS           shift and go to state 52
    POR             shift and go to state 53
    DIVIDIDO        shift and go to state 54


state 81

    (50) expresion_logica -> expresion_numerica IGUALQUE expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 50 (expresion_logica -> expresion_numerica IGUALQUE expresion_numerica .)
    MAS             shift and go to state 51
    MENOS           shift and go to state 52
    POR             shift and go to state 53
    DIVIDIDO        shift and go to state 54


state 82

    (51) expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 51 (expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica .)
    MAS             shift and go to state 51
    MENOS           shift and go to state 52
    POR             shift and go to state 53
    DIVIDIDO        shift and go to state 54


state 83

    (34) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER
    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . func_main
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (15) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (16) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (25) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (33) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    MAIN            shift and go to state 12
    PRINT           shift and go to state 13
    VAR             shift and go to state 14
    ID              shift and go to state 15
    MIENTRAS        shift and go to state 16
    IF              shift and go to state 17

    instrucciones                  shift and go to state 86
    instruccion                    shift and go to state 3
    func_main                      shift and go to state 4
    imprimir_instr                 shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    def_asig_instr                 shift and go to state 8
    mientras_instr                 shift and go to state 9
    if_instr                       shift and go to state 10
    if_else_instr                  shift and go to state 11

state 84

    (15) func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 15 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 15 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 15 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 15 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 15 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 15 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 15 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 15 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)


state 85

    (33) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . func_main
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (15) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (16) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (25) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (33) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVDER         shift and go to state 87
    MAIN            shift and go to state 12
    PRINT           shift and go to state 13
    VAR             shift and go to state 14
    ID              shift and go to state 15
    MIENTRAS        shift and go to state 16
    IF              shift and go to state 17

    instruccion                    shift and go to state 18
    func_main                      shift and go to state 4
    imprimir_instr                 shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    def_asig_instr                 shift and go to state 8
    mientras_instr                 shift and go to state 9
    if_instr                       shift and go to state 10
    if_else_instr                  shift and go to state 11

state 86

    (34) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER
    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . func_main
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (15) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (16) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (25) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (33) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVDER         shift and go to state 88
    MAIN            shift and go to state 12
    PRINT           shift and go to state 13
    VAR             shift and go to state 14
    ID              shift and go to state 15
    MIENTRAS        shift and go to state 16
    IF              shift and go to state 17

    instruccion                    shift and go to state 18
    func_main                      shift and go to state 4
    imprimir_instr                 shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    def_asig_instr                 shift and go to state 8
    mientras_instr                 shift and go to state 9
    if_instr                       shift and go to state 10
    if_else_instr                  shift and go to state 11

state 87

    (33) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 33 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 33 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 33 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 33 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 33 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 33 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 33 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 33 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)


state 88

    (34) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .
    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER . ELSE LLAVIZQ instrucciones LLAVDER

    MAIN            reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    ELSE            shift and go to state 89


state 89

    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 90


state 90

    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . func_main
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (15) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (16) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (25) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (33) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    MAIN            shift and go to state 12
    PRINT           shift and go to state 13
    VAR             shift and go to state 14
    ID              shift and go to state 15
    MIENTRAS        shift and go to state 16
    IF              shift and go to state 17

    instrucciones                  shift and go to state 91
    instruccion                    shift and go to state 3
    func_main                      shift and go to state 4
    imprimir_instr                 shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    def_asig_instr                 shift and go to state 8
    mientras_instr                 shift and go to state 9
    if_instr                       shift and go to state 10
    if_else_instr                  shift and go to state 11

state 91

    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . func_main
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (15) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (16) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (21) definicion_instr -> . VAR ID def_instr_prima
    (25) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (33) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVDER         shift and go to state 92
    MAIN            shift and go to state 12
    PRINT           shift and go to state 13
    VAR             shift and go to state 14
    ID              shift and go to state 15
    MIENTRAS        shift and go to state 16
    IF              shift and go to state 17

    instruccion                    shift and go to state 18
    func_main                      shift and go to state 4
    imprimir_instr                 shift and go to state 5
    definicion_instr               shift and go to state 6
    asignacion_instr               shift and go to state 7
    def_asig_instr                 shift and go to state 8
    mientras_instr                 shift and go to state 9
    if_instr                       shift and go to state 10
    if_else_instr                  shift and go to state 11

state 92

    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 28 resolved using rule (print_expresion_general -> expresion_numerica)
WARNING: rejected rule (expresion_cadena -> expresion_numerica) in state 28
WARNING: reduce/reduce conflict in state 34 resolved using rule (expresion_id -> ID)
WARNING: rejected rule (expresion_numerica -> ID) in state 34
WARNING: reduce/reduce conflict in state 41 resolved using rule (asign_expresion_general -> expresion_numerica)
WARNING: rejected rule (expresion_cadena -> expresion_numerica) in state 41
WARNING: reduce/reduce conflict in state 58 resolved using rule (asign_def_expresion_general -> expresion_numerica)
WARNING: rejected rule (expresion_cadena -> expresion_numerica) in state 58
