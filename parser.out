Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instrucciones -> empty
Rule 5     instruccion -> func_main
Rule 6     instruccion -> imprimir_instr
Rule 7     instruccion -> definicion_instr
Rule 8     instruccion -> asignacion_instr
Rule 9     instruccion -> def_asig_instr
Rule 10    instruccion -> mientras_instr
Rule 11    instruccion -> if_instr
Rule 12    instruccion -> if_else_instr
Rule 13    def_funcs_vars -> definicion_instr
Rule 14    def_funcs_vars -> asignacion_instr
Rule 15    def_funcs_vars -> empty
Rule 16    func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
Rule 17    imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima
Rule 18    print_expresion_general -> expresion_numerica
Rule 19    print_expresion_general -> expresion_cadena
Rule 20    print_expresion_general -> expresion_id
Rule 21    print_expresion_general -> expresion_boolean
Rule 22    print_expresion_general -> expresion_char
Rule 23    expresion_id -> ID
Rule 24    expresion_boolean -> TRUE
Rule 25    expresion_boolean -> FALSE
Rule 26    definicion_instr -> VAR ID def_instr_prima
Rule 27    def_instr_prima -> PTCOMA
Rule 28    def_instr_prima -> empty
Rule 29    empty -> <empty>
Rule 30    asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima
Rule 31    asign_expresion_general -> expresion_numerica
Rule 32    asign_expresion_general -> expresion_cadena
Rule 33    asign_expresion_general -> expresion_id
Rule 34    asign_expresion_general -> expresion_boolean
Rule 35    asign_expresion_general -> expresion_char
Rule 36    def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima
Rule 37    asign_def_expresion_general -> expresion_numerica
Rule 38    asign_def_expresion_general -> expresion_cadena
Rule 39    asign_def_expresion_general -> expresion_id
Rule 40    asign_def_expresion_general -> expresion_boolean
Rule 41    asign_def_expresion_general -> expresion_char
Rule 42    mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
Rule 43    if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
Rule 44    if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
Rule 45    expresion_numerica -> expresion_numerica MAS expresion_numerica
Rule 46    expresion_numerica -> expresion_numerica MENOS expresion_numerica
Rule 47    expresion_numerica -> expresion_numerica POR expresion_numerica
Rule 48    expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica
Rule 49    expresion_numerica -> expresion_numerica ELEVADO expresion_numerica
Rule 50    expresion_numerica -> MENOS expresion_numerica
Rule 51    expresion_numerica -> PARIZQ expresion_numerica PARDER
Rule 52    expresion_numerica -> ENTERO
Rule 53    expresion_numerica -> DECIMAL
Rule 54    expresion_numerica -> ID
Rule 55    expresion_char -> CHAR
Rule 56    expresion_cadena -> expresion_cadena CONCAT expresion_cadena
Rule 57    expresion_cadena -> CADENA
Rule 58    expresion_cadena -> expresion_numerica
Rule 59    expresion_logica -> expresion_numerica MAYQUE expresion_numerica
Rule 60    expresion_logica -> expresion_numerica MENQUE expresion_numerica
Rule 61    expresion_logica -> expresion_numerica IGUALQUE expresion_numerica
Rule 62    expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica

Terminals, with rules where they appear

CADENA               : 57
CHAR                 : 55
CONCAT               : 56
DECIMAL              : 53
DIVIDIDO             : 48
ELEVADO              : 49
ELSE                 : 44
ENTERO               : 52
FALSE                : 25
ID                   : 23 26 30 36 54
IF                   : 43 44
IGUAL                : 30 36
IGUALQUE             : 61
LLAVDER              : 16 42 43 44 44
LLAVIZQ              : 16 42 43 44 44
MAIN                 : 16
MAS                  : 45
MAYQUE               : 59
MENOS                : 46 50
MENQUE               : 60
MIENTRAS             : 42
NIGUALQUE            : 62
PARDER               : 16 17 42 43 44 51
PARIZQ               : 16 17 42 43 44 51
POR                  : 47
PRINT                : 17
PTCOMA               : 27
TRUE                 : 24
VAR                  : 26 36
error                : 

Nonterminals, with rules where they appear

asign_def_expresion_general : 36
asign_expresion_general : 30
asignacion_instr     : 8 14
def_asig_instr       : 9
def_funcs_vars       : 
def_instr_prima      : 17 26 30 36
definicion_instr     : 7 13
empty                : 4 15 28
expresion_boolean    : 21 34 40
expresion_cadena     : 19 32 38 56 56
expresion_char       : 22 35 41
expresion_id         : 20 33 39
expresion_logica     : 42 43 44
expresion_numerica   : 18 31 37 45 45 46 46 47 47 48 48 49 49 50 51 58 59 59 60 60 61 61 62 62
func_main            : 5
if_else_instr        : 12
if_instr             : 11
imprimir_instr       : 6
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 16 42 43 44 44
mientras_instr       : 10
print_expresion_general : 17

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . mientras_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . if_else_instr
    (29) empty -> .
    (16) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (17) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (30) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (36) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (42) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (43) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 29 (empty -> .)
    MAIN            shift and go to state 13
    PRINT           shift and go to state 14
    VAR             shift and go to state 15
    ID              shift and go to state 16
    MIENTRAS        shift and go to state 17
    IF              shift and go to state 18

  ! MAIN            [ reduce using rule 29 (empty -> .) ]
  ! PRINT           [ reduce using rule 29 (empty -> .) ]
  ! VAR             [ reduce using rule 29 (empty -> .) ]
  ! ID              [ reduce using rule 29 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 29 (empty -> .) ]
  ! IF              [ reduce using rule 29 (empty -> .) ]

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    mientras_instr                 shift and go to state 10
    if_instr                       shift and go to state 11
    if_else_instr                  shift and go to state 12

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . mientras_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . if_else_instr
    (16) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (17) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (30) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (36) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (42) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (43) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    $end            reduce using rule 1 (init -> instrucciones .)
    MAIN            shift and go to state 13
    PRINT           shift and go to state 14
    VAR             shift and go to state 15
    ID              shift and go to state 16
    MIENTRAS        shift and go to state 17
    IF              shift and go to state 18

    instruccion                    shift and go to state 19
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    mientras_instr                 shift and go to state 10
    if_instr                       shift and go to state 11
    if_else_instr                  shift and go to state 12

state 3

    (3) instrucciones -> instruccion .

    MAIN            reduce using rule 3 (instrucciones -> instruccion .)
    PRINT           reduce using rule 3 (instrucciones -> instruccion .)
    VAR             reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    MIENTRAS        reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    LLAVDER         reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instrucciones -> empty .

    MAIN            reduce using rule 4 (instrucciones -> empty .)
    PRINT           reduce using rule 4 (instrucciones -> empty .)
    VAR             reduce using rule 4 (instrucciones -> empty .)
    ID              reduce using rule 4 (instrucciones -> empty .)
    MIENTRAS        reduce using rule 4 (instrucciones -> empty .)
    IF              reduce using rule 4 (instrucciones -> empty .)
    $end            reduce using rule 4 (instrucciones -> empty .)
    LLAVDER         reduce using rule 4 (instrucciones -> empty .)


state 5

    (5) instruccion -> func_main .

    MAIN            reduce using rule 5 (instruccion -> func_main .)
    PRINT           reduce using rule 5 (instruccion -> func_main .)
    VAR             reduce using rule 5 (instruccion -> func_main .)
    ID              reduce using rule 5 (instruccion -> func_main .)
    MIENTRAS        reduce using rule 5 (instruccion -> func_main .)
    IF              reduce using rule 5 (instruccion -> func_main .)
    $end            reduce using rule 5 (instruccion -> func_main .)
    LLAVDER         reduce using rule 5 (instruccion -> func_main .)


state 6

    (6) instruccion -> imprimir_instr .

    MAIN            reduce using rule 6 (instruccion -> imprimir_instr .)
    PRINT           reduce using rule 6 (instruccion -> imprimir_instr .)
    VAR             reduce using rule 6 (instruccion -> imprimir_instr .)
    ID              reduce using rule 6 (instruccion -> imprimir_instr .)
    MIENTRAS        reduce using rule 6 (instruccion -> imprimir_instr .)
    IF              reduce using rule 6 (instruccion -> imprimir_instr .)
    $end            reduce using rule 6 (instruccion -> imprimir_instr .)
    LLAVDER         reduce using rule 6 (instruccion -> imprimir_instr .)


state 7

    (7) instruccion -> definicion_instr .

    MAIN            reduce using rule 7 (instruccion -> definicion_instr .)
    PRINT           reduce using rule 7 (instruccion -> definicion_instr .)
    VAR             reduce using rule 7 (instruccion -> definicion_instr .)
    ID              reduce using rule 7 (instruccion -> definicion_instr .)
    MIENTRAS        reduce using rule 7 (instruccion -> definicion_instr .)
    IF              reduce using rule 7 (instruccion -> definicion_instr .)
    $end            reduce using rule 7 (instruccion -> definicion_instr .)
    LLAVDER         reduce using rule 7 (instruccion -> definicion_instr .)


state 8

    (8) instruccion -> asignacion_instr .

    MAIN            reduce using rule 8 (instruccion -> asignacion_instr .)
    PRINT           reduce using rule 8 (instruccion -> asignacion_instr .)
    VAR             reduce using rule 8 (instruccion -> asignacion_instr .)
    ID              reduce using rule 8 (instruccion -> asignacion_instr .)
    MIENTRAS        reduce using rule 8 (instruccion -> asignacion_instr .)
    IF              reduce using rule 8 (instruccion -> asignacion_instr .)
    $end            reduce using rule 8 (instruccion -> asignacion_instr .)
    LLAVDER         reduce using rule 8 (instruccion -> asignacion_instr .)


state 9

    (9) instruccion -> def_asig_instr .

    MAIN            reduce using rule 9 (instruccion -> def_asig_instr .)
    PRINT           reduce using rule 9 (instruccion -> def_asig_instr .)
    VAR             reduce using rule 9 (instruccion -> def_asig_instr .)
    ID              reduce using rule 9 (instruccion -> def_asig_instr .)
    MIENTRAS        reduce using rule 9 (instruccion -> def_asig_instr .)
    IF              reduce using rule 9 (instruccion -> def_asig_instr .)
    $end            reduce using rule 9 (instruccion -> def_asig_instr .)
    LLAVDER         reduce using rule 9 (instruccion -> def_asig_instr .)


state 10

    (10) instruccion -> mientras_instr .

    MAIN            reduce using rule 10 (instruccion -> mientras_instr .)
    PRINT           reduce using rule 10 (instruccion -> mientras_instr .)
    VAR             reduce using rule 10 (instruccion -> mientras_instr .)
    ID              reduce using rule 10 (instruccion -> mientras_instr .)
    MIENTRAS        reduce using rule 10 (instruccion -> mientras_instr .)
    IF              reduce using rule 10 (instruccion -> mientras_instr .)
    $end            reduce using rule 10 (instruccion -> mientras_instr .)
    LLAVDER         reduce using rule 10 (instruccion -> mientras_instr .)


state 11

    (11) instruccion -> if_instr .

    MAIN            reduce using rule 11 (instruccion -> if_instr .)
    PRINT           reduce using rule 11 (instruccion -> if_instr .)
    VAR             reduce using rule 11 (instruccion -> if_instr .)
    ID              reduce using rule 11 (instruccion -> if_instr .)
    MIENTRAS        reduce using rule 11 (instruccion -> if_instr .)
    IF              reduce using rule 11 (instruccion -> if_instr .)
    $end            reduce using rule 11 (instruccion -> if_instr .)
    LLAVDER         reduce using rule 11 (instruccion -> if_instr .)


state 12

    (12) instruccion -> if_else_instr .

    MAIN            reduce using rule 12 (instruccion -> if_else_instr .)
    PRINT           reduce using rule 12 (instruccion -> if_else_instr .)
    VAR             reduce using rule 12 (instruccion -> if_else_instr .)
    ID              reduce using rule 12 (instruccion -> if_else_instr .)
    MIENTRAS        reduce using rule 12 (instruccion -> if_else_instr .)
    IF              reduce using rule 12 (instruccion -> if_else_instr .)
    $end            reduce using rule 12 (instruccion -> if_else_instr .)
    LLAVDER         reduce using rule 12 (instruccion -> if_else_instr .)


state 13

    (16) func_main -> MAIN . PARIZQ PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 20


state 14

    (17) imprimir_instr -> PRINT . PARIZQ print_expresion_general PARDER def_instr_prima

    PARIZQ          shift and go to state 21


state 15

    (26) definicion_instr -> VAR . ID def_instr_prima
    (36) def_asig_instr -> VAR . ID IGUAL asign_def_expresion_general def_instr_prima

    ID              shift and go to state 22


state 16

    (30) asignacion_instr -> ID . IGUAL asign_expresion_general def_instr_prima

    IGUAL           shift and go to state 23


state 17

    (42) mientras_instr -> MIENTRAS . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 24


state 18

    (43) if_instr -> IF . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> IF . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 25


state 19

    (2) instrucciones -> instrucciones instruccion .

    MAIN            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PRINT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    VAR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    MIENTRAS        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LLAVDER         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 20

    (16) func_main -> MAIN PARIZQ . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 26


state 21

    (17) imprimir_instr -> PRINT PARIZQ . print_expresion_general PARDER def_instr_prima
    (18) print_expresion_general -> . expresion_numerica
    (19) print_expresion_general -> . expresion_cadena
    (20) print_expresion_general -> . expresion_id
    (21) print_expresion_general -> . expresion_boolean
    (22) print_expresion_general -> . expresion_char
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID
    (56) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (57) expresion_cadena -> . CADENA
    (58) expresion_cadena -> . expresion_numerica
    (23) expresion_id -> . ID
    (24) expresion_boolean -> . TRUE
    (25) expresion_boolean -> . FALSE
    (55) expresion_char -> . CHAR

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 37
    CADENA          shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHAR            shift and go to state 41

    print_expresion_general        shift and go to state 28
    expresion_numerica             shift and go to state 29
    expresion_cadena               shift and go to state 30
    expresion_id                   shift and go to state 31
    expresion_boolean              shift and go to state 32
    expresion_char                 shift and go to state 33

state 22

    (26) definicion_instr -> VAR ID . def_instr_prima
    (36) def_asig_instr -> VAR ID . IGUAL asign_def_expresion_general def_instr_prima
    (27) def_instr_prima -> . PTCOMA
    (28) def_instr_prima -> . empty
    (29) empty -> .

    IGUAL           shift and go to state 43
    PTCOMA          shift and go to state 44
    MAIN            reduce using rule 29 (empty -> .)
    PRINT           reduce using rule 29 (empty -> .)
    VAR             reduce using rule 29 (empty -> .)
    ID              reduce using rule 29 (empty -> .)
    MIENTRAS        reduce using rule 29 (empty -> .)
    IF              reduce using rule 29 (empty -> .)
    $end            reduce using rule 29 (empty -> .)
    LLAVDER         reduce using rule 29 (empty -> .)

    def_instr_prima                shift and go to state 42
    empty                          shift and go to state 45

state 23

    (30) asignacion_instr -> ID IGUAL . asign_expresion_general def_instr_prima
    (31) asign_expresion_general -> . expresion_numerica
    (32) asign_expresion_general -> . expresion_cadena
    (33) asign_expresion_general -> . expresion_id
    (34) asign_expresion_general -> . expresion_boolean
    (35) asign_expresion_general -> . expresion_char
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID
    (56) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (57) expresion_cadena -> . CADENA
    (58) expresion_cadena -> . expresion_numerica
    (23) expresion_id -> . ID
    (24) expresion_boolean -> . TRUE
    (25) expresion_boolean -> . FALSE
    (55) expresion_char -> . CHAR

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 37
    CADENA          shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHAR            shift and go to state 41

    asign_expresion_general        shift and go to state 46
    expresion_numerica             shift and go to state 47
    expresion_cadena               shift and go to state 48
    expresion_id                   shift and go to state 49
    expresion_boolean              shift and go to state 50
    expresion_char                 shift and go to state 51

state 24

    (42) mientras_instr -> MIENTRAS PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (59) expresion_logica -> . expresion_numerica MAYQUE expresion_numerica
    (60) expresion_logica -> . expresion_numerica MENQUE expresion_numerica
    (61) expresion_logica -> . expresion_numerica IGUALQUE expresion_numerica
    (62) expresion_logica -> . expresion_numerica NIGUALQUE expresion_numerica
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_logica               shift and go to state 52
    expresion_numerica             shift and go to state 53

state 25

    (43) if_instr -> IF PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> IF PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (59) expresion_logica -> . expresion_numerica MAYQUE expresion_numerica
    (60) expresion_logica -> . expresion_numerica MENQUE expresion_numerica
    (61) expresion_logica -> . expresion_numerica IGUALQUE expresion_numerica
    (62) expresion_logica -> . expresion_numerica NIGUALQUE expresion_numerica
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_logica               shift and go to state 55
    expresion_numerica             shift and go to state 53

state 26

    (16) func_main -> MAIN PARIZQ PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 56


state 27

    (51) expresion_numerica -> PARIZQ . expresion_numerica PARDER
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_numerica             shift and go to state 57

state 28

    (17) imprimir_instr -> PRINT PARIZQ print_expresion_general . PARDER def_instr_prima

    PARDER          shift and go to state 58


state 29

    (18) print_expresion_general -> expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica
    (58) expresion_cadena -> expresion_numerica .

  ! reduce/reduce conflict for PARDER resolved using rule 18 (print_expresion_general -> expresion_numerica .)
    PARDER          reduce using rule 18 (print_expresion_general -> expresion_numerica .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    POR             shift and go to state 61
    DIVIDIDO        shift and go to state 62
    ELEVADO         shift and go to state 63
    CONCAT          reduce using rule 58 (expresion_cadena -> expresion_numerica .)

  ! PARDER          [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]


state 30

    (19) print_expresion_general -> expresion_cadena .
    (56) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    PARDER          reduce using rule 19 (print_expresion_general -> expresion_cadena .)
    CONCAT          shift and go to state 64


state 31

    (20) print_expresion_general -> expresion_id .

    PARDER          reduce using rule 20 (print_expresion_general -> expresion_id .)


state 32

    (21) print_expresion_general -> expresion_boolean .

    PARDER          reduce using rule 21 (print_expresion_general -> expresion_boolean .)


state 33

    (22) print_expresion_general -> expresion_char .

    PARDER          reduce using rule 22 (print_expresion_general -> expresion_char .)


state 34

    (50) expresion_numerica -> MENOS . expresion_numerica
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_numerica             shift and go to state 65

state 35

    (52) expresion_numerica -> ENTERO .

    MAS             reduce using rule 52 (expresion_numerica -> ENTERO .)
    MENOS           reduce using rule 52 (expresion_numerica -> ENTERO .)
    POR             reduce using rule 52 (expresion_numerica -> ENTERO .)
    DIVIDIDO        reduce using rule 52 (expresion_numerica -> ENTERO .)
    ELEVADO         reduce using rule 52 (expresion_numerica -> ENTERO .)
    PARDER          reduce using rule 52 (expresion_numerica -> ENTERO .)
    CONCAT          reduce using rule 52 (expresion_numerica -> ENTERO .)
    PTCOMA          reduce using rule 52 (expresion_numerica -> ENTERO .)
    MAIN            reduce using rule 52 (expresion_numerica -> ENTERO .)
    PRINT           reduce using rule 52 (expresion_numerica -> ENTERO .)
    VAR             reduce using rule 52 (expresion_numerica -> ENTERO .)
    ID              reduce using rule 52 (expresion_numerica -> ENTERO .)
    MIENTRAS        reduce using rule 52 (expresion_numerica -> ENTERO .)
    IF              reduce using rule 52 (expresion_numerica -> ENTERO .)
    $end            reduce using rule 52 (expresion_numerica -> ENTERO .)
    LLAVDER         reduce using rule 52 (expresion_numerica -> ENTERO .)
    MAYQUE          reduce using rule 52 (expresion_numerica -> ENTERO .)
    MENQUE          reduce using rule 52 (expresion_numerica -> ENTERO .)
    IGUALQUE        reduce using rule 52 (expresion_numerica -> ENTERO .)
    NIGUALQUE       reduce using rule 52 (expresion_numerica -> ENTERO .)


state 36

    (53) expresion_numerica -> DECIMAL .

    MAS             reduce using rule 53 (expresion_numerica -> DECIMAL .)
    MENOS           reduce using rule 53 (expresion_numerica -> DECIMAL .)
    POR             reduce using rule 53 (expresion_numerica -> DECIMAL .)
    DIVIDIDO        reduce using rule 53 (expresion_numerica -> DECIMAL .)
    ELEVADO         reduce using rule 53 (expresion_numerica -> DECIMAL .)
    PARDER          reduce using rule 53 (expresion_numerica -> DECIMAL .)
    CONCAT          reduce using rule 53 (expresion_numerica -> DECIMAL .)
    PTCOMA          reduce using rule 53 (expresion_numerica -> DECIMAL .)
    MAIN            reduce using rule 53 (expresion_numerica -> DECIMAL .)
    PRINT           reduce using rule 53 (expresion_numerica -> DECIMAL .)
    VAR             reduce using rule 53 (expresion_numerica -> DECIMAL .)
    ID              reduce using rule 53 (expresion_numerica -> DECIMAL .)
    MIENTRAS        reduce using rule 53 (expresion_numerica -> DECIMAL .)
    IF              reduce using rule 53 (expresion_numerica -> DECIMAL .)
    $end            reduce using rule 53 (expresion_numerica -> DECIMAL .)
    LLAVDER         reduce using rule 53 (expresion_numerica -> DECIMAL .)
    MAYQUE          reduce using rule 53 (expresion_numerica -> DECIMAL .)
    MENQUE          reduce using rule 53 (expresion_numerica -> DECIMAL .)
    IGUALQUE        reduce using rule 53 (expresion_numerica -> DECIMAL .)
    NIGUALQUE       reduce using rule 53 (expresion_numerica -> DECIMAL .)


state 37

    (54) expresion_numerica -> ID .
    (23) expresion_id -> ID .

  ! reduce/reduce conflict for PARDER resolved using rule 23 (expresion_id -> ID .)
  ! reduce/reduce conflict for PTCOMA resolved using rule 23 (expresion_id -> ID .)
  ! reduce/reduce conflict for MAIN resolved using rule 23 (expresion_id -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 23 (expresion_id -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 23 (expresion_id -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 23 (expresion_id -> ID .)
  ! reduce/reduce conflict for MIENTRAS resolved using rule 23 (expresion_id -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 23 (expresion_id -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 23 (expresion_id -> ID .)
  ! reduce/reduce conflict for LLAVDER resolved using rule 23 (expresion_id -> ID .)
    MAS             reduce using rule 54 (expresion_numerica -> ID .)
    MENOS           reduce using rule 54 (expresion_numerica -> ID .)
    POR             reduce using rule 54 (expresion_numerica -> ID .)
    DIVIDIDO        reduce using rule 54 (expresion_numerica -> ID .)
    ELEVADO         reduce using rule 54 (expresion_numerica -> ID .)
    CONCAT          reduce using rule 54 (expresion_numerica -> ID .)
    PARDER          reduce using rule 23 (expresion_id -> ID .)
    PTCOMA          reduce using rule 23 (expresion_id -> ID .)
    MAIN            reduce using rule 23 (expresion_id -> ID .)
    PRINT           reduce using rule 23 (expresion_id -> ID .)
    VAR             reduce using rule 23 (expresion_id -> ID .)
    ID              reduce using rule 23 (expresion_id -> ID .)
    MIENTRAS        reduce using rule 23 (expresion_id -> ID .)
    IF              reduce using rule 23 (expresion_id -> ID .)
    $end            reduce using rule 23 (expresion_id -> ID .)
    LLAVDER         reduce using rule 23 (expresion_id -> ID .)

  ! PARDER          [ reduce using rule 54 (expresion_numerica -> ID .) ]
  ! PTCOMA          [ reduce using rule 54 (expresion_numerica -> ID .) ]
  ! MAIN            [ reduce using rule 54 (expresion_numerica -> ID .) ]
  ! PRINT           [ reduce using rule 54 (expresion_numerica -> ID .) ]
  ! VAR             [ reduce using rule 54 (expresion_numerica -> ID .) ]
  ! ID              [ reduce using rule 54 (expresion_numerica -> ID .) ]
  ! MIENTRAS        [ reduce using rule 54 (expresion_numerica -> ID .) ]
  ! IF              [ reduce using rule 54 (expresion_numerica -> ID .) ]
  ! $end            [ reduce using rule 54 (expresion_numerica -> ID .) ]
  ! LLAVDER         [ reduce using rule 54 (expresion_numerica -> ID .) ]


state 38

    (57) expresion_cadena -> CADENA .

    CONCAT          reduce using rule 57 (expresion_cadena -> CADENA .)
    PARDER          reduce using rule 57 (expresion_cadena -> CADENA .)
    PTCOMA          reduce using rule 57 (expresion_cadena -> CADENA .)
    MAIN            reduce using rule 57 (expresion_cadena -> CADENA .)
    PRINT           reduce using rule 57 (expresion_cadena -> CADENA .)
    VAR             reduce using rule 57 (expresion_cadena -> CADENA .)
    ID              reduce using rule 57 (expresion_cadena -> CADENA .)
    MIENTRAS        reduce using rule 57 (expresion_cadena -> CADENA .)
    IF              reduce using rule 57 (expresion_cadena -> CADENA .)
    $end            reduce using rule 57 (expresion_cadena -> CADENA .)
    LLAVDER         reduce using rule 57 (expresion_cadena -> CADENA .)


state 39

    (24) expresion_boolean -> TRUE .

    PARDER          reduce using rule 24 (expresion_boolean -> TRUE .)
    PTCOMA          reduce using rule 24 (expresion_boolean -> TRUE .)
    MAIN            reduce using rule 24 (expresion_boolean -> TRUE .)
    PRINT           reduce using rule 24 (expresion_boolean -> TRUE .)
    VAR             reduce using rule 24 (expresion_boolean -> TRUE .)
    ID              reduce using rule 24 (expresion_boolean -> TRUE .)
    MIENTRAS        reduce using rule 24 (expresion_boolean -> TRUE .)
    IF              reduce using rule 24 (expresion_boolean -> TRUE .)
    $end            reduce using rule 24 (expresion_boolean -> TRUE .)
    LLAVDER         reduce using rule 24 (expresion_boolean -> TRUE .)


state 40

    (25) expresion_boolean -> FALSE .

    PARDER          reduce using rule 25 (expresion_boolean -> FALSE .)
    PTCOMA          reduce using rule 25 (expresion_boolean -> FALSE .)
    MAIN            reduce using rule 25 (expresion_boolean -> FALSE .)
    PRINT           reduce using rule 25 (expresion_boolean -> FALSE .)
    VAR             reduce using rule 25 (expresion_boolean -> FALSE .)
    ID              reduce using rule 25 (expresion_boolean -> FALSE .)
    MIENTRAS        reduce using rule 25 (expresion_boolean -> FALSE .)
    IF              reduce using rule 25 (expresion_boolean -> FALSE .)
    $end            reduce using rule 25 (expresion_boolean -> FALSE .)
    LLAVDER         reduce using rule 25 (expresion_boolean -> FALSE .)


state 41

    (55) expresion_char -> CHAR .

    PARDER          reduce using rule 55 (expresion_char -> CHAR .)
    PTCOMA          reduce using rule 55 (expresion_char -> CHAR .)
    MAIN            reduce using rule 55 (expresion_char -> CHAR .)
    PRINT           reduce using rule 55 (expresion_char -> CHAR .)
    VAR             reduce using rule 55 (expresion_char -> CHAR .)
    ID              reduce using rule 55 (expresion_char -> CHAR .)
    MIENTRAS        reduce using rule 55 (expresion_char -> CHAR .)
    IF              reduce using rule 55 (expresion_char -> CHAR .)
    $end            reduce using rule 55 (expresion_char -> CHAR .)
    LLAVDER         reduce using rule 55 (expresion_char -> CHAR .)


state 42

    (26) definicion_instr -> VAR ID def_instr_prima .

    MAIN            reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    PRINT           reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    VAR             reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    ID              reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    MIENTRAS        reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    IF              reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    $end            reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    LLAVDER         reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)


state 43

    (36) def_asig_instr -> VAR ID IGUAL . asign_def_expresion_general def_instr_prima
    (37) asign_def_expresion_general -> . expresion_numerica
    (38) asign_def_expresion_general -> . expresion_cadena
    (39) asign_def_expresion_general -> . expresion_id
    (40) asign_def_expresion_general -> . expresion_boolean
    (41) asign_def_expresion_general -> . expresion_char
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID
    (56) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (57) expresion_cadena -> . CADENA
    (58) expresion_cadena -> . expresion_numerica
    (23) expresion_id -> . ID
    (24) expresion_boolean -> . TRUE
    (25) expresion_boolean -> . FALSE
    (55) expresion_char -> . CHAR

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 37
    CADENA          shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    CHAR            shift and go to state 41

    asign_def_expresion_general    shift and go to state 66
    expresion_numerica             shift and go to state 67
    expresion_cadena               shift and go to state 68
    expresion_id                   shift and go to state 69
    expresion_boolean              shift and go to state 70
    expresion_char                 shift and go to state 71

state 44

    (27) def_instr_prima -> PTCOMA .

    MAIN            reduce using rule 27 (def_instr_prima -> PTCOMA .)
    PRINT           reduce using rule 27 (def_instr_prima -> PTCOMA .)
    VAR             reduce using rule 27 (def_instr_prima -> PTCOMA .)
    ID              reduce using rule 27 (def_instr_prima -> PTCOMA .)
    MIENTRAS        reduce using rule 27 (def_instr_prima -> PTCOMA .)
    IF              reduce using rule 27 (def_instr_prima -> PTCOMA .)
    $end            reduce using rule 27 (def_instr_prima -> PTCOMA .)
    LLAVDER         reduce using rule 27 (def_instr_prima -> PTCOMA .)


state 45

    (28) def_instr_prima -> empty .

    MAIN            reduce using rule 28 (def_instr_prima -> empty .)
    PRINT           reduce using rule 28 (def_instr_prima -> empty .)
    VAR             reduce using rule 28 (def_instr_prima -> empty .)
    ID              reduce using rule 28 (def_instr_prima -> empty .)
    MIENTRAS        reduce using rule 28 (def_instr_prima -> empty .)
    IF              reduce using rule 28 (def_instr_prima -> empty .)
    $end            reduce using rule 28 (def_instr_prima -> empty .)
    LLAVDER         reduce using rule 28 (def_instr_prima -> empty .)


state 46

    (30) asignacion_instr -> ID IGUAL asign_expresion_general . def_instr_prima
    (27) def_instr_prima -> . PTCOMA
    (28) def_instr_prima -> . empty
    (29) empty -> .

    PTCOMA          shift and go to state 44
    MAIN            reduce using rule 29 (empty -> .)
    PRINT           reduce using rule 29 (empty -> .)
    VAR             reduce using rule 29 (empty -> .)
    ID              reduce using rule 29 (empty -> .)
    MIENTRAS        reduce using rule 29 (empty -> .)
    IF              reduce using rule 29 (empty -> .)
    $end            reduce using rule 29 (empty -> .)
    LLAVDER         reduce using rule 29 (empty -> .)

    def_instr_prima                shift and go to state 72
    empty                          shift and go to state 45

state 47

    (31) asign_expresion_general -> expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica
    (58) expresion_cadena -> expresion_numerica .

  ! reduce/reduce conflict for PTCOMA resolved using rule 31 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for MAIN resolved using rule 31 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for PRINT resolved using rule 31 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for VAR resolved using rule 31 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for ID resolved using rule 31 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for MIENTRAS resolved using rule 31 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for IF resolved using rule 31 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for $end resolved using rule 31 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for LLAVDER resolved using rule 31 (asign_expresion_general -> expresion_numerica .)
    PTCOMA          reduce using rule 31 (asign_expresion_general -> expresion_numerica .)
    MAIN            reduce using rule 31 (asign_expresion_general -> expresion_numerica .)
    PRINT           reduce using rule 31 (asign_expresion_general -> expresion_numerica .)
    VAR             reduce using rule 31 (asign_expresion_general -> expresion_numerica .)
    ID              reduce using rule 31 (asign_expresion_general -> expresion_numerica .)
    MIENTRAS        reduce using rule 31 (asign_expresion_general -> expresion_numerica .)
    IF              reduce using rule 31 (asign_expresion_general -> expresion_numerica .)
    $end            reduce using rule 31 (asign_expresion_general -> expresion_numerica .)
    LLAVDER         reduce using rule 31 (asign_expresion_general -> expresion_numerica .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    POR             shift and go to state 61
    DIVIDIDO        shift and go to state 62
    ELEVADO         shift and go to state 63
    CONCAT          reduce using rule 58 (expresion_cadena -> expresion_numerica .)

  ! PTCOMA          [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! MAIN            [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! PRINT           [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! VAR             [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! ID              [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! MIENTRAS        [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! IF              [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! $end            [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! LLAVDER         [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]


state 48

    (32) asign_expresion_general -> expresion_cadena .
    (56) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    PTCOMA          reduce using rule 32 (asign_expresion_general -> expresion_cadena .)
    MAIN            reduce using rule 32 (asign_expresion_general -> expresion_cadena .)
    PRINT           reduce using rule 32 (asign_expresion_general -> expresion_cadena .)
    VAR             reduce using rule 32 (asign_expresion_general -> expresion_cadena .)
    ID              reduce using rule 32 (asign_expresion_general -> expresion_cadena .)
    MIENTRAS        reduce using rule 32 (asign_expresion_general -> expresion_cadena .)
    IF              reduce using rule 32 (asign_expresion_general -> expresion_cadena .)
    $end            reduce using rule 32 (asign_expresion_general -> expresion_cadena .)
    LLAVDER         reduce using rule 32 (asign_expresion_general -> expresion_cadena .)
    CONCAT          shift and go to state 64


state 49

    (33) asign_expresion_general -> expresion_id .

    PTCOMA          reduce using rule 33 (asign_expresion_general -> expresion_id .)
    MAIN            reduce using rule 33 (asign_expresion_general -> expresion_id .)
    PRINT           reduce using rule 33 (asign_expresion_general -> expresion_id .)
    VAR             reduce using rule 33 (asign_expresion_general -> expresion_id .)
    ID              reduce using rule 33 (asign_expresion_general -> expresion_id .)
    MIENTRAS        reduce using rule 33 (asign_expresion_general -> expresion_id .)
    IF              reduce using rule 33 (asign_expresion_general -> expresion_id .)
    $end            reduce using rule 33 (asign_expresion_general -> expresion_id .)
    LLAVDER         reduce using rule 33 (asign_expresion_general -> expresion_id .)


state 50

    (34) asign_expresion_general -> expresion_boolean .

    PTCOMA          reduce using rule 34 (asign_expresion_general -> expresion_boolean .)
    MAIN            reduce using rule 34 (asign_expresion_general -> expresion_boolean .)
    PRINT           reduce using rule 34 (asign_expresion_general -> expresion_boolean .)
    VAR             reduce using rule 34 (asign_expresion_general -> expresion_boolean .)
    ID              reduce using rule 34 (asign_expresion_general -> expresion_boolean .)
    MIENTRAS        reduce using rule 34 (asign_expresion_general -> expresion_boolean .)
    IF              reduce using rule 34 (asign_expresion_general -> expresion_boolean .)
    $end            reduce using rule 34 (asign_expresion_general -> expresion_boolean .)
    LLAVDER         reduce using rule 34 (asign_expresion_general -> expresion_boolean .)


state 51

    (35) asign_expresion_general -> expresion_char .

    PTCOMA          reduce using rule 35 (asign_expresion_general -> expresion_char .)
    MAIN            reduce using rule 35 (asign_expresion_general -> expresion_char .)
    PRINT           reduce using rule 35 (asign_expresion_general -> expresion_char .)
    VAR             reduce using rule 35 (asign_expresion_general -> expresion_char .)
    ID              reduce using rule 35 (asign_expresion_general -> expresion_char .)
    MIENTRAS        reduce using rule 35 (asign_expresion_general -> expresion_char .)
    IF              reduce using rule 35 (asign_expresion_general -> expresion_char .)
    $end            reduce using rule 35 (asign_expresion_general -> expresion_char .)
    LLAVDER         reduce using rule 35 (asign_expresion_general -> expresion_char .)


state 52

    (42) mientras_instr -> MIENTRAS PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 73


state 53

    (59) expresion_logica -> expresion_numerica . MAYQUE expresion_numerica
    (60) expresion_logica -> expresion_numerica . MENQUE expresion_numerica
    (61) expresion_logica -> expresion_numerica . IGUALQUE expresion_numerica
    (62) expresion_logica -> expresion_numerica . NIGUALQUE expresion_numerica
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica

    MAYQUE          shift and go to state 74
    MENQUE          shift and go to state 75
    IGUALQUE        shift and go to state 76
    NIGUALQUE       shift and go to state 77
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    POR             shift and go to state 61
    DIVIDIDO        shift and go to state 62
    ELEVADO         shift and go to state 63


state 54

    (54) expresion_numerica -> ID .

    MAYQUE          reduce using rule 54 (expresion_numerica -> ID .)
    MENQUE          reduce using rule 54 (expresion_numerica -> ID .)
    IGUALQUE        reduce using rule 54 (expresion_numerica -> ID .)
    NIGUALQUE       reduce using rule 54 (expresion_numerica -> ID .)
    MAS             reduce using rule 54 (expresion_numerica -> ID .)
    MENOS           reduce using rule 54 (expresion_numerica -> ID .)
    POR             reduce using rule 54 (expresion_numerica -> ID .)
    DIVIDIDO        reduce using rule 54 (expresion_numerica -> ID .)
    ELEVADO         reduce using rule 54 (expresion_numerica -> ID .)
    PARDER          reduce using rule 54 (expresion_numerica -> ID .)
    CONCAT          reduce using rule 54 (expresion_numerica -> ID .)
    PTCOMA          reduce using rule 54 (expresion_numerica -> ID .)
    MAIN            reduce using rule 54 (expresion_numerica -> ID .)
    PRINT           reduce using rule 54 (expresion_numerica -> ID .)
    VAR             reduce using rule 54 (expresion_numerica -> ID .)
    ID              reduce using rule 54 (expresion_numerica -> ID .)
    MIENTRAS        reduce using rule 54 (expresion_numerica -> ID .)
    IF              reduce using rule 54 (expresion_numerica -> ID .)
    $end            reduce using rule 54 (expresion_numerica -> ID .)
    LLAVDER         reduce using rule 54 (expresion_numerica -> ID .)


state 55

    (43) if_instr -> IF PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> IF PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 78


state 56

    (16) func_main -> MAIN PARIZQ PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . mientras_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . if_else_instr
    (29) empty -> .
    (16) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (17) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (30) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (36) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (42) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (43) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LLAVDER         reduce using rule 29 (empty -> .)
    MAIN            shift and go to state 13
    PRINT           shift and go to state 14
    VAR             shift and go to state 15
    ID              shift and go to state 16
    MIENTRAS        shift and go to state 17
    IF              shift and go to state 18

  ! MAIN            [ reduce using rule 29 (empty -> .) ]
  ! PRINT           [ reduce using rule 29 (empty -> .) ]
  ! VAR             [ reduce using rule 29 (empty -> .) ]
  ! ID              [ reduce using rule 29 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 29 (empty -> .) ]
  ! IF              [ reduce using rule 29 (empty -> .) ]

    instrucciones                  shift and go to state 79
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    mientras_instr                 shift and go to state 10
    if_instr                       shift and go to state 11
    if_else_instr                  shift and go to state 12

state 57

    (51) expresion_numerica -> PARIZQ expresion_numerica . PARDER
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica

    PARDER          shift and go to state 80
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    POR             shift and go to state 61
    DIVIDIDO        shift and go to state 62
    ELEVADO         shift and go to state 63


state 58

    (17) imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER . def_instr_prima
    (27) def_instr_prima -> . PTCOMA
    (28) def_instr_prima -> . empty
    (29) empty -> .

    PTCOMA          shift and go to state 44
    MAIN            reduce using rule 29 (empty -> .)
    PRINT           reduce using rule 29 (empty -> .)
    VAR             reduce using rule 29 (empty -> .)
    ID              reduce using rule 29 (empty -> .)
    MIENTRAS        reduce using rule 29 (empty -> .)
    IF              reduce using rule 29 (empty -> .)
    $end            reduce using rule 29 (empty -> .)
    LLAVDER         reduce using rule 29 (empty -> .)

    def_instr_prima                shift and go to state 81
    empty                          shift and go to state 45

state 59

    (45) expresion_numerica -> expresion_numerica MAS . expresion_numerica
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_numerica             shift and go to state 82

state 60

    (46) expresion_numerica -> expresion_numerica MENOS . expresion_numerica
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_numerica             shift and go to state 83

state 61

    (47) expresion_numerica -> expresion_numerica POR . expresion_numerica
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_numerica             shift and go to state 84

state 62

    (48) expresion_numerica -> expresion_numerica DIVIDIDO . expresion_numerica
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_numerica             shift and go to state 85

state 63

    (49) expresion_numerica -> expresion_numerica ELEVADO . expresion_numerica
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_numerica             shift and go to state 86

state 64

    (56) expresion_cadena -> expresion_cadena CONCAT . expresion_cadena
    (56) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (57) expresion_cadena -> . CADENA
    (58) expresion_cadena -> . expresion_numerica
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    CADENA          shift and go to state 38
    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_cadena               shift and go to state 87
    expresion_numerica             shift and go to state 88

state 65

    (50) expresion_numerica -> MENOS expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica

    MAS             reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    MENOS           reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    POR             reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    DIVIDIDO        reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    ELEVADO         reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    PARDER          reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    CONCAT          reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    PTCOMA          reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    MAIN            reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    PRINT           reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    VAR             reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    ID              reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    MIENTRAS        reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    IF              reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    $end            reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    LLAVDER         reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    MAYQUE          reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    MENQUE          reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    IGUALQUE        reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)
    NIGUALQUE       reduce using rule 50 (expresion_numerica -> MENOS expresion_numerica .)

  ! MAS             [ shift and go to state 59 ]
  ! MENOS           [ shift and go to state 60 ]
  ! POR             [ shift and go to state 61 ]
  ! DIVIDIDO        [ shift and go to state 62 ]
  ! ELEVADO         [ shift and go to state 63 ]


state 66

    (36) def_asig_instr -> VAR ID IGUAL asign_def_expresion_general . def_instr_prima
    (27) def_instr_prima -> . PTCOMA
    (28) def_instr_prima -> . empty
    (29) empty -> .

    PTCOMA          shift and go to state 44
    MAIN            reduce using rule 29 (empty -> .)
    PRINT           reduce using rule 29 (empty -> .)
    VAR             reduce using rule 29 (empty -> .)
    ID              reduce using rule 29 (empty -> .)
    MIENTRAS        reduce using rule 29 (empty -> .)
    IF              reduce using rule 29 (empty -> .)
    $end            reduce using rule 29 (empty -> .)
    LLAVDER         reduce using rule 29 (empty -> .)

    def_instr_prima                shift and go to state 89
    empty                          shift and go to state 45

state 67

    (37) asign_def_expresion_general -> expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica
    (58) expresion_cadena -> expresion_numerica .

  ! reduce/reduce conflict for PTCOMA resolved using rule 37 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for MAIN resolved using rule 37 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for PRINT resolved using rule 37 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for VAR resolved using rule 37 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for ID resolved using rule 37 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for MIENTRAS resolved using rule 37 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for IF resolved using rule 37 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for $end resolved using rule 37 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for LLAVDER resolved using rule 37 (asign_def_expresion_general -> expresion_numerica .)
    PTCOMA          reduce using rule 37 (asign_def_expresion_general -> expresion_numerica .)
    MAIN            reduce using rule 37 (asign_def_expresion_general -> expresion_numerica .)
    PRINT           reduce using rule 37 (asign_def_expresion_general -> expresion_numerica .)
    VAR             reduce using rule 37 (asign_def_expresion_general -> expresion_numerica .)
    ID              reduce using rule 37 (asign_def_expresion_general -> expresion_numerica .)
    MIENTRAS        reduce using rule 37 (asign_def_expresion_general -> expresion_numerica .)
    IF              reduce using rule 37 (asign_def_expresion_general -> expresion_numerica .)
    $end            reduce using rule 37 (asign_def_expresion_general -> expresion_numerica .)
    LLAVDER         reduce using rule 37 (asign_def_expresion_general -> expresion_numerica .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    POR             shift and go to state 61
    DIVIDIDO        shift and go to state 62
    ELEVADO         shift and go to state 63
    CONCAT          reduce using rule 58 (expresion_cadena -> expresion_numerica .)

  ! PTCOMA          [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! MAIN            [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! PRINT           [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! VAR             [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! ID              [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! MIENTRAS        [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! IF              [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! $end            [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]
  ! LLAVDER         [ reduce using rule 58 (expresion_cadena -> expresion_numerica .) ]


state 68

    (38) asign_def_expresion_general -> expresion_cadena .
    (56) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    PTCOMA          reduce using rule 38 (asign_def_expresion_general -> expresion_cadena .)
    MAIN            reduce using rule 38 (asign_def_expresion_general -> expresion_cadena .)
    PRINT           reduce using rule 38 (asign_def_expresion_general -> expresion_cadena .)
    VAR             reduce using rule 38 (asign_def_expresion_general -> expresion_cadena .)
    ID              reduce using rule 38 (asign_def_expresion_general -> expresion_cadena .)
    MIENTRAS        reduce using rule 38 (asign_def_expresion_general -> expresion_cadena .)
    IF              reduce using rule 38 (asign_def_expresion_general -> expresion_cadena .)
    $end            reduce using rule 38 (asign_def_expresion_general -> expresion_cadena .)
    LLAVDER         reduce using rule 38 (asign_def_expresion_general -> expresion_cadena .)
    CONCAT          shift and go to state 64


state 69

    (39) asign_def_expresion_general -> expresion_id .

    PTCOMA          reduce using rule 39 (asign_def_expresion_general -> expresion_id .)
    MAIN            reduce using rule 39 (asign_def_expresion_general -> expresion_id .)
    PRINT           reduce using rule 39 (asign_def_expresion_general -> expresion_id .)
    VAR             reduce using rule 39 (asign_def_expresion_general -> expresion_id .)
    ID              reduce using rule 39 (asign_def_expresion_general -> expresion_id .)
    MIENTRAS        reduce using rule 39 (asign_def_expresion_general -> expresion_id .)
    IF              reduce using rule 39 (asign_def_expresion_general -> expresion_id .)
    $end            reduce using rule 39 (asign_def_expresion_general -> expresion_id .)
    LLAVDER         reduce using rule 39 (asign_def_expresion_general -> expresion_id .)


state 70

    (40) asign_def_expresion_general -> expresion_boolean .

    PTCOMA          reduce using rule 40 (asign_def_expresion_general -> expresion_boolean .)
    MAIN            reduce using rule 40 (asign_def_expresion_general -> expresion_boolean .)
    PRINT           reduce using rule 40 (asign_def_expresion_general -> expresion_boolean .)
    VAR             reduce using rule 40 (asign_def_expresion_general -> expresion_boolean .)
    ID              reduce using rule 40 (asign_def_expresion_general -> expresion_boolean .)
    MIENTRAS        reduce using rule 40 (asign_def_expresion_general -> expresion_boolean .)
    IF              reduce using rule 40 (asign_def_expresion_general -> expresion_boolean .)
    $end            reduce using rule 40 (asign_def_expresion_general -> expresion_boolean .)
    LLAVDER         reduce using rule 40 (asign_def_expresion_general -> expresion_boolean .)


state 71

    (41) asign_def_expresion_general -> expresion_char .

    PTCOMA          reduce using rule 41 (asign_def_expresion_general -> expresion_char .)
    MAIN            reduce using rule 41 (asign_def_expresion_general -> expresion_char .)
    PRINT           reduce using rule 41 (asign_def_expresion_general -> expresion_char .)
    VAR             reduce using rule 41 (asign_def_expresion_general -> expresion_char .)
    ID              reduce using rule 41 (asign_def_expresion_general -> expresion_char .)
    MIENTRAS        reduce using rule 41 (asign_def_expresion_general -> expresion_char .)
    IF              reduce using rule 41 (asign_def_expresion_general -> expresion_char .)
    $end            reduce using rule 41 (asign_def_expresion_general -> expresion_char .)
    LLAVDER         reduce using rule 41 (asign_def_expresion_general -> expresion_char .)


state 72

    (30) asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .

    MAIN            reduce using rule 30 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    PRINT           reduce using rule 30 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    VAR             reduce using rule 30 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    ID              reduce using rule 30 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    MIENTRAS        reduce using rule 30 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    IF              reduce using rule 30 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    $end            reduce using rule 30 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    LLAVDER         reduce using rule 30 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)


state 73

    (42) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 90


state 74

    (59) expresion_logica -> expresion_numerica MAYQUE . expresion_numerica
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_numerica             shift and go to state 91

state 75

    (60) expresion_logica -> expresion_numerica MENQUE . expresion_numerica
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_numerica             shift and go to state 92

state 76

    (61) expresion_logica -> expresion_numerica IGUALQUE . expresion_numerica
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_numerica             shift and go to state 93

state 77

    (62) expresion_logica -> expresion_numerica NIGUALQUE . expresion_numerica
    (45) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (46) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (47) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (48) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (49) expresion_numerica -> . expresion_numerica ELEVADO expresion_numerica
    (50) expresion_numerica -> . MENOS expresion_numerica
    (51) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (52) expresion_numerica -> . ENTERO
    (53) expresion_numerica -> . DECIMAL
    (54) expresion_numerica -> . ID

    MENOS           shift and go to state 34
    PARIZQ          shift and go to state 27
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 36
    ID              shift and go to state 54

    expresion_numerica             shift and go to state 94

state 78

    (43) if_instr -> IF PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> IF PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 95


state 79

    (16) func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . mientras_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . if_else_instr
    (16) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (17) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (30) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (36) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (42) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (43) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVDER         shift and go to state 96
    MAIN            shift and go to state 13
    PRINT           shift and go to state 14
    VAR             shift and go to state 15
    ID              shift and go to state 16
    MIENTRAS        shift and go to state 17
    IF              shift and go to state 18

    instruccion                    shift and go to state 19
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    mientras_instr                 shift and go to state 10
    if_instr                       shift and go to state 11
    if_else_instr                  shift and go to state 12

state 80

    (51) expresion_numerica -> PARIZQ expresion_numerica PARDER .

    MAS             reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENOS           reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    POR             reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    DIVIDIDO        reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    ELEVADO         reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PARDER          reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    CONCAT          reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PTCOMA          reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MAIN            reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PRINT           reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    VAR             reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    ID              reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MIENTRAS        reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IF              reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    $end            reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    LLAVDER         reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MAYQUE          reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENQUE          reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IGUALQUE        reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    NIGUALQUE       reduce using rule 51 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)


state 81

    (17) imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .

    MAIN            reduce using rule 17 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    PRINT           reduce using rule 17 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    VAR             reduce using rule 17 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    ID              reduce using rule 17 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    MIENTRAS        reduce using rule 17 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    IF              reduce using rule 17 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    $end            reduce using rule 17 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)
    LLAVDER         reduce using rule 17 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER def_instr_prima .)


state 82

    (45) expresion_numerica -> expresion_numerica MAS expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica

    MAS             reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENOS           reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PARDER          reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    CONCAT          reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PTCOMA          reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MAIN            reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PRINT           reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    VAR             reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    ID              reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MIENTRAS        reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IF              reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    $end            reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    LLAVDER         reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MAYQUE          reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENQUE          reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IGUALQUE        reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    NIGUALQUE       reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    POR             shift and go to state 61
    DIVIDIDO        shift and go to state 62
    ELEVADO         shift and go to state 63

  ! POR             [ reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! ELEVADO         [ reduce using rule 45 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! MAS             [ shift and go to state 59 ]
  ! MENOS           [ shift and go to state 60 ]


state 83

    (46) expresion_numerica -> expresion_numerica MENOS expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica

    MAS             reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENOS           reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PARDER          reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    CONCAT          reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PTCOMA          reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MAIN            reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PRINT           reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    VAR             reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    ID              reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MIENTRAS        reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IF              reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    $end            reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    LLAVDER         reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MAYQUE          reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENQUE          reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IGUALQUE        reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    NIGUALQUE       reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    POR             shift and go to state 61
    DIVIDIDO        shift and go to state 62
    ELEVADO         shift and go to state 63

  ! POR             [ reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! ELEVADO         [ reduce using rule 46 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! MAS             [ shift and go to state 59 ]
  ! MENOS           [ shift and go to state 60 ]


state 84

    (47) expresion_numerica -> expresion_numerica POR expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica

    MAS             reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENOS           reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    POR             reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    DIVIDIDO        reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PARDER          reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    CONCAT          reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PTCOMA          reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MAIN            reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PRINT           reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    VAR             reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    ID              reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MIENTRAS        reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IF              reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    $end            reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    LLAVDER         reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MAYQUE          reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENQUE          reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IGUALQUE        reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    NIGUALQUE       reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    ELEVADO         shift and go to state 63

  ! ELEVADO         [ reduce using rule 47 (expresion_numerica -> expresion_numerica POR expresion_numerica .) ]
  ! MAS             [ shift and go to state 59 ]
  ! MENOS           [ shift and go to state 60 ]
  ! POR             [ shift and go to state 61 ]
  ! DIVIDIDO        [ shift and go to state 62 ]


state 85

    (48) expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica

    MAS             reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENOS           reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    POR             reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    DIVIDIDO        reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PARDER          reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    CONCAT          reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PTCOMA          reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MAIN            reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PRINT           reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    VAR             reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    ID              reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MIENTRAS        reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IF              reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    $end            reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    LLAVDER         reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MAYQUE          reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENQUE          reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IGUALQUE        reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    NIGUALQUE       reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    ELEVADO         shift and go to state 63

  ! ELEVADO         [ reduce using rule 48 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .) ]
  ! MAS             [ shift and go to state 59 ]
  ! MENOS           [ shift and go to state 60 ]
  ! POR             [ shift and go to state 61 ]
  ! DIVIDIDO        [ shift and go to state 62 ]


state 86

    (49) expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica

    MAS             reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    MENOS           reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    POR             reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    DIVIDIDO        reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    ELEVADO         reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    PARDER          reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    CONCAT          reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    PTCOMA          reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    MAIN            reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    PRINT           reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    VAR             reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    ID              reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    MIENTRAS        reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    IF              reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    $end            reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    LLAVDER         reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    MAYQUE          reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    MENQUE          reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    IGUALQUE        reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)
    NIGUALQUE       reduce using rule 49 (expresion_numerica -> expresion_numerica ELEVADO expresion_numerica .)

  ! MAS             [ shift and go to state 59 ]
  ! MENOS           [ shift and go to state 60 ]
  ! POR             [ shift and go to state 61 ]
  ! DIVIDIDO        [ shift and go to state 62 ]
  ! ELEVADO         [ shift and go to state 63 ]


state 87

    (56) expresion_cadena -> expresion_cadena CONCAT expresion_cadena .
    (56) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    CONCAT          reduce using rule 56 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    PARDER          reduce using rule 56 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    PTCOMA          reduce using rule 56 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    MAIN            reduce using rule 56 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    PRINT           reduce using rule 56 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    VAR             reduce using rule 56 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    ID              reduce using rule 56 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    MIENTRAS        reduce using rule 56 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    IF              reduce using rule 56 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    $end            reduce using rule 56 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    LLAVDER         reduce using rule 56 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)

  ! CONCAT          [ shift and go to state 64 ]


state 88

    (58) expresion_cadena -> expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica

    CONCAT          reduce using rule 58 (expresion_cadena -> expresion_numerica .)
    PARDER          reduce using rule 58 (expresion_cadena -> expresion_numerica .)
    PTCOMA          reduce using rule 58 (expresion_cadena -> expresion_numerica .)
    MAIN            reduce using rule 58 (expresion_cadena -> expresion_numerica .)
    PRINT           reduce using rule 58 (expresion_cadena -> expresion_numerica .)
    VAR             reduce using rule 58 (expresion_cadena -> expresion_numerica .)
    ID              reduce using rule 58 (expresion_cadena -> expresion_numerica .)
    MIENTRAS        reduce using rule 58 (expresion_cadena -> expresion_numerica .)
    IF              reduce using rule 58 (expresion_cadena -> expresion_numerica .)
    $end            reduce using rule 58 (expresion_cadena -> expresion_numerica .)
    LLAVDER         reduce using rule 58 (expresion_cadena -> expresion_numerica .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    POR             shift and go to state 61
    DIVIDIDO        shift and go to state 62
    ELEVADO         shift and go to state 63


state 89

    (36) def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .

    MAIN            reduce using rule 36 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    PRINT           reduce using rule 36 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    VAR             reduce using rule 36 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    ID              reduce using rule 36 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    MIENTRAS        reduce using rule 36 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    IF              reduce using rule 36 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    $end            reduce using rule 36 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    LLAVDER         reduce using rule 36 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)


state 90

    (42) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . mientras_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . if_else_instr
    (29) empty -> .
    (16) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (17) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (30) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (36) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (42) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (43) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LLAVDER         reduce using rule 29 (empty -> .)
    MAIN            shift and go to state 13
    PRINT           shift and go to state 14
    VAR             shift and go to state 15
    ID              shift and go to state 16
    MIENTRAS        shift and go to state 17
    IF              shift and go to state 18

  ! MAIN            [ reduce using rule 29 (empty -> .) ]
  ! PRINT           [ reduce using rule 29 (empty -> .) ]
  ! VAR             [ reduce using rule 29 (empty -> .) ]
  ! ID              [ reduce using rule 29 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 29 (empty -> .) ]
  ! IF              [ reduce using rule 29 (empty -> .) ]

    instrucciones                  shift and go to state 97
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    mientras_instr                 shift and go to state 10
    if_instr                       shift and go to state 11
    if_else_instr                  shift and go to state 12

state 91

    (59) expresion_logica -> expresion_numerica MAYQUE expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica

    PARDER          reduce using rule 59 (expresion_logica -> expresion_numerica MAYQUE expresion_numerica .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    POR             shift and go to state 61
    DIVIDIDO        shift and go to state 62
    ELEVADO         shift and go to state 63


state 92

    (60) expresion_logica -> expresion_numerica MENQUE expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica

    PARDER          reduce using rule 60 (expresion_logica -> expresion_numerica MENQUE expresion_numerica .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    POR             shift and go to state 61
    DIVIDIDO        shift and go to state 62
    ELEVADO         shift and go to state 63


state 93

    (61) expresion_logica -> expresion_numerica IGUALQUE expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica

    PARDER          reduce using rule 61 (expresion_logica -> expresion_numerica IGUALQUE expresion_numerica .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    POR             shift and go to state 61
    DIVIDIDO        shift and go to state 62
    ELEVADO         shift and go to state 63


state 94

    (62) expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica .
    (45) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (46) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (47) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (48) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (49) expresion_numerica -> expresion_numerica . ELEVADO expresion_numerica

    PARDER          reduce using rule 62 (expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    POR             shift and go to state 61
    DIVIDIDO        shift and go to state 62
    ELEVADO         shift and go to state 63


state 95

    (43) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER
    (44) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . mientras_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . if_else_instr
    (29) empty -> .
    (16) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (17) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (30) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (36) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (42) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (43) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LLAVDER         reduce using rule 29 (empty -> .)
    MAIN            shift and go to state 13
    PRINT           shift and go to state 14
    VAR             shift and go to state 15
    ID              shift and go to state 16
    MIENTRAS        shift and go to state 17
    IF              shift and go to state 18

  ! MAIN            [ reduce using rule 29 (empty -> .) ]
  ! PRINT           [ reduce using rule 29 (empty -> .) ]
  ! VAR             [ reduce using rule 29 (empty -> .) ]
  ! ID              [ reduce using rule 29 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 29 (empty -> .) ]
  ! IF              [ reduce using rule 29 (empty -> .) ]

    instrucciones                  shift and go to state 98
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    mientras_instr                 shift and go to state 10
    if_instr                       shift and go to state 11
    if_else_instr                  shift and go to state 12

state 96

    (16) func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 16 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 16 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 16 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 16 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 16 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 16 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 16 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 16 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)


state 97

    (42) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . mientras_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . if_else_instr
    (16) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (17) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (30) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (36) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (42) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (43) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVDER         shift and go to state 99
    MAIN            shift and go to state 13
    PRINT           shift and go to state 14
    VAR             shift and go to state 15
    ID              shift and go to state 16
    MIENTRAS        shift and go to state 17
    IF              shift and go to state 18

    instruccion                    shift and go to state 19
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    mientras_instr                 shift and go to state 10
    if_instr                       shift and go to state 11
    if_else_instr                  shift and go to state 12

state 98

    (43) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER
    (44) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . mientras_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . if_else_instr
    (16) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (17) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (30) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (36) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (42) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (43) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVDER         shift and go to state 100
    MAIN            shift and go to state 13
    PRINT           shift and go to state 14
    VAR             shift and go to state 15
    ID              shift and go to state 16
    MIENTRAS        shift and go to state 17
    IF              shift and go to state 18

    instruccion                    shift and go to state 19
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    mientras_instr                 shift and go to state 10
    if_instr                       shift and go to state 11
    if_else_instr                  shift and go to state 12

state 99

    (42) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 42 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 42 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 42 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 42 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 42 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 42 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 42 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 42 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)


state 100

    (43) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .
    (44) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER . ELSE LLAVIZQ instrucciones LLAVDER

    MAIN            reduce using rule 43 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 43 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 43 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 43 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 43 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 43 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 43 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 43 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    ELSE            shift and go to state 101


state 101

    (44) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 102


state 102

    (44) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . mientras_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . if_else_instr
    (29) empty -> .
    (16) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (17) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (30) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (36) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (42) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (43) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LLAVDER         reduce using rule 29 (empty -> .)
    MAIN            shift and go to state 13
    PRINT           shift and go to state 14
    VAR             shift and go to state 15
    ID              shift and go to state 16
    MIENTRAS        shift and go to state 17
    IF              shift and go to state 18

  ! MAIN            [ reduce using rule 29 (empty -> .) ]
  ! PRINT           [ reduce using rule 29 (empty -> .) ]
  ! VAR             [ reduce using rule 29 (empty -> .) ]
  ! ID              [ reduce using rule 29 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 29 (empty -> .) ]
  ! IF              [ reduce using rule 29 (empty -> .) ]

    instrucciones                  shift and go to state 103
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    mientras_instr                 shift and go to state 10
    if_instr                       shift and go to state 11
    if_else_instr                  shift and go to state 12

state 103

    (44) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . imprimir_instr
    (7) instruccion -> . definicion_instr
    (8) instruccion -> . asignacion_instr
    (9) instruccion -> . def_asig_instr
    (10) instruccion -> . mientras_instr
    (11) instruccion -> . if_instr
    (12) instruccion -> . if_else_instr
    (16) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (17) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (30) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (36) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (42) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (43) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (44) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVDER         shift and go to state 104
    MAIN            shift and go to state 13
    PRINT           shift and go to state 14
    VAR             shift and go to state 15
    ID              shift and go to state 16
    MIENTRAS        shift and go to state 17
    IF              shift and go to state 18

    instruccion                    shift and go to state 19
    func_main                      shift and go to state 5
    imprimir_instr                 shift and go to state 6
    definicion_instr               shift and go to state 7
    asignacion_instr               shift and go to state 8
    def_asig_instr                 shift and go to state 9
    mientras_instr                 shift and go to state 10
    if_instr                       shift and go to state 11
    if_else_instr                  shift and go to state 12

state 104

    (44) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 44 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 44 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 44 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 44 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 44 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 44 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 44 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 44 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 56 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 56 resolved as shift
WARNING: shift/reduce conflict for VAR in state 56 resolved as shift
WARNING: shift/reduce conflict for ID in state 56 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 56 resolved as shift
WARNING: shift/reduce conflict for IF in state 56 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 90 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 90 resolved as shift
WARNING: shift/reduce conflict for VAR in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 95 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 95 resolved as shift
WARNING: shift/reduce conflict for VAR in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 95 resolved as shift
WARNING: shift/reduce conflict for IF in state 95 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 102 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 102 resolved as shift
WARNING: shift/reduce conflict for VAR in state 102 resolved as shift
WARNING: shift/reduce conflict for ID in state 102 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: reduce/reduce conflict in state 29 resolved using rule (print_expresion_general -> expresion_numerica)
WARNING: rejected rule (expresion_cadena -> expresion_numerica) in state 29
WARNING: reduce/reduce conflict in state 37 resolved using rule (expresion_id -> ID)
WARNING: rejected rule (expresion_numerica -> ID) in state 37
WARNING: reduce/reduce conflict in state 47 resolved using rule (asign_expresion_general -> expresion_numerica)
WARNING: rejected rule (expresion_cadena -> expresion_numerica) in state 47
WARNING: reduce/reduce conflict in state 67 resolved using rule (asign_def_expresion_general -> expresion_numerica)
WARNING: rejected rule (expresion_cadena -> expresion_numerica) in state 67
