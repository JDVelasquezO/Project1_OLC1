Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> func_main
Rule 2     func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
Rule 3     instrucciones -> instrucciones instruccion
Rule 4     instrucciones -> instruccion
Rule 5     instruccion -> imprimir_instr
Rule 6     instruccion -> definicion_instr
Rule 7     instruccion -> asignacion_instr
Rule 8     instruccion -> def_asig_instr
Rule 9     instruccion -> mientras_instr
Rule 10    instruccion -> if_instr
Rule 11    instruccion -> if_else_instr
Rule 12    imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER PTCOMA
Rule 13    print_expresion_general -> expresion_numerica
Rule 14    print_expresion_general -> expresion_cadena
Rule 15    print_expresion_general -> expresion_id
Rule 16    expresion_id -> ID
Rule 17    definicion_instr -> VAR ID def_instr_prima
Rule 18    def_instr_prima -> PTCOMA
Rule 19    def_instr_prima -> empty
Rule 20    empty -> <empty>
Rule 21    asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima
Rule 22    asign_expresion_general -> expresion_numerica
Rule 23    asign_expresion_general -> expresion_cadena
Rule 24    asign_expresion_general -> expresion_id
Rule 25    def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima
Rule 26    asign_def_expresion_general -> expresion_numerica
Rule 27    asign_def_expresion_general -> expresion_cadena
Rule 28    asign_def_expresion_general -> expresion_id
Rule 29    mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
Rule 30    if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
Rule 31    if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
Rule 32    expresion_numerica -> expresion_numerica MAS expresion_numerica
Rule 33    expresion_numerica -> expresion_numerica MENOS expresion_numerica
Rule 34    expresion_numerica -> expresion_numerica POR expresion_numerica
Rule 35    expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica
Rule 36    expresion_numerica -> MENOS expresion_numerica
Rule 37    expresion_numerica -> PARIZQ expresion_numerica PARDER
Rule 38    expresion_numerica -> ENTERO
Rule 39    expresion_numerica -> DECIMAL
Rule 40    expresion_numerica -> ID
Rule 41    expresion_cadena -> expresion_cadena CONCAT expresion_cadena
Rule 42    expresion_cadena -> CADENA
Rule 43    expresion_cadena -> expresion_numerica
Rule 44    expresion_logica -> expresion_numerica MAYQUE expresion_numerica
Rule 45    expresion_logica -> expresion_numerica MENQUE expresion_numerica
Rule 46    expresion_logica -> expresion_numerica IGUALQUE expresion_numerica
Rule 47    expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica

Terminals, with rules where they appear

CADENA               : 42
CONCAT               : 41
DECIMAL              : 39
DIVIDIDO             : 35
ELSE                 : 31
ENTERO               : 38
ID                   : 16 17 21 25 40
IF                   : 30 31
IGUAL                : 21 25
IGUALQUE             : 46
LLAVDER              : 2 29 30 31 31
LLAVIZQ              : 2 29 30 31 31
MAIN                 : 2
MAS                  : 32
MAYQUE               : 44
MENOS                : 33 36
MENQUE               : 45
MIENTRAS             : 29
NIGUALQUE            : 47
PARDER               : 2 12 29 30 31 37
PARIZQ               : 2 12 29 30 31 37
POR                  : 34
PRINT                : 12
PTCOMA               : 12 18
VAR                  : 17 25
error                : 

Nonterminals, with rules where they appear

asign_def_expresion_general : 25
asign_expresion_general : 21
asignacion_instr     : 7
def_asig_instr       : 8
def_instr_prima      : 17 21 25
definicion_instr     : 6
empty                : 19
expresion_cadena     : 14 23 27 41 41
expresion_id         : 15 24 28
expresion_logica     : 29 30 31
expresion_numerica   : 13 22 26 32 32 33 33 34 34 35 35 36 37 43 44 44 45 45 46 46 47 47
func_main            : 1
if_else_instr        : 11
if_instr             : 10
imprimir_instr       : 5
init                 : 0
instruccion          : 3 4
instrucciones        : 2 3 29 30 31 31
mientras_instr       : 9
print_expresion_general : 12

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . func_main
    (2) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER

    MAIN            shift and go to state 3

    init                           shift and go to state 1
    func_main                      shift and go to state 2

state 1

    (0) S' -> init .



state 2

    (1) init -> func_main .

    $end            reduce using rule 1 (init -> func_main .)


state 3

    (2) func_main -> MAIN . PARIZQ PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 4


state 4

    (2) func_main -> MAIN PARIZQ . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 5


state 5

    (2) func_main -> MAIN PARIZQ PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 6


state 6

    (2) func_main -> MAIN PARIZQ PARDER LLAVIZQ . instrucciones LLAVDER
    (3) instrucciones -> . instrucciones instruccion
    (4) instrucciones -> . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (12) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER PTCOMA
    (17) definicion_instr -> . VAR ID def_instr_prima
    (21) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (25) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (29) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    PRINT           shift and go to state 16
    VAR             shift and go to state 17
    ID              shift and go to state 18
    MIENTRAS        shift and go to state 19
    IF              shift and go to state 20

    instrucciones                  shift and go to state 7
    instruccion                    shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    mientras_instr                 shift and go to state 13
    if_instr                       shift and go to state 14
    if_else_instr                  shift and go to state 15

state 7

    (2) func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones . LLAVDER
    (3) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (12) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER PTCOMA
    (17) definicion_instr -> . VAR ID def_instr_prima
    (21) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (25) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (29) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVDER         shift and go to state 21
    PRINT           shift and go to state 16
    VAR             shift and go to state 17
    ID              shift and go to state 18
    MIENTRAS        shift and go to state 19
    IF              shift and go to state 20

    instruccion                    shift and go to state 22
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    mientras_instr                 shift and go to state 13
    if_instr                       shift and go to state 14
    if_else_instr                  shift and go to state 15

state 8

    (4) instrucciones -> instruccion .

    LLAVDER         reduce using rule 4 (instrucciones -> instruccion .)
    PRINT           reduce using rule 4 (instrucciones -> instruccion .)
    VAR             reduce using rule 4 (instrucciones -> instruccion .)
    ID              reduce using rule 4 (instrucciones -> instruccion .)
    MIENTRAS        reduce using rule 4 (instrucciones -> instruccion .)
    IF              reduce using rule 4 (instrucciones -> instruccion .)


state 9

    (5) instruccion -> imprimir_instr .

    LLAVDER         reduce using rule 5 (instruccion -> imprimir_instr .)
    PRINT           reduce using rule 5 (instruccion -> imprimir_instr .)
    VAR             reduce using rule 5 (instruccion -> imprimir_instr .)
    ID              reduce using rule 5 (instruccion -> imprimir_instr .)
    MIENTRAS        reduce using rule 5 (instruccion -> imprimir_instr .)
    IF              reduce using rule 5 (instruccion -> imprimir_instr .)


state 10

    (6) instruccion -> definicion_instr .

    LLAVDER         reduce using rule 6 (instruccion -> definicion_instr .)
    PRINT           reduce using rule 6 (instruccion -> definicion_instr .)
    VAR             reduce using rule 6 (instruccion -> definicion_instr .)
    ID              reduce using rule 6 (instruccion -> definicion_instr .)
    MIENTRAS        reduce using rule 6 (instruccion -> definicion_instr .)
    IF              reduce using rule 6 (instruccion -> definicion_instr .)


state 11

    (7) instruccion -> asignacion_instr .

    LLAVDER         reduce using rule 7 (instruccion -> asignacion_instr .)
    PRINT           reduce using rule 7 (instruccion -> asignacion_instr .)
    VAR             reduce using rule 7 (instruccion -> asignacion_instr .)
    ID              reduce using rule 7 (instruccion -> asignacion_instr .)
    MIENTRAS        reduce using rule 7 (instruccion -> asignacion_instr .)
    IF              reduce using rule 7 (instruccion -> asignacion_instr .)


state 12

    (8) instruccion -> def_asig_instr .

    LLAVDER         reduce using rule 8 (instruccion -> def_asig_instr .)
    PRINT           reduce using rule 8 (instruccion -> def_asig_instr .)
    VAR             reduce using rule 8 (instruccion -> def_asig_instr .)
    ID              reduce using rule 8 (instruccion -> def_asig_instr .)
    MIENTRAS        reduce using rule 8 (instruccion -> def_asig_instr .)
    IF              reduce using rule 8 (instruccion -> def_asig_instr .)


state 13

    (9) instruccion -> mientras_instr .

    LLAVDER         reduce using rule 9 (instruccion -> mientras_instr .)
    PRINT           reduce using rule 9 (instruccion -> mientras_instr .)
    VAR             reduce using rule 9 (instruccion -> mientras_instr .)
    ID              reduce using rule 9 (instruccion -> mientras_instr .)
    MIENTRAS        reduce using rule 9 (instruccion -> mientras_instr .)
    IF              reduce using rule 9 (instruccion -> mientras_instr .)


state 14

    (10) instruccion -> if_instr .

    LLAVDER         reduce using rule 10 (instruccion -> if_instr .)
    PRINT           reduce using rule 10 (instruccion -> if_instr .)
    VAR             reduce using rule 10 (instruccion -> if_instr .)
    ID              reduce using rule 10 (instruccion -> if_instr .)
    MIENTRAS        reduce using rule 10 (instruccion -> if_instr .)
    IF              reduce using rule 10 (instruccion -> if_instr .)


state 15

    (11) instruccion -> if_else_instr .

    LLAVDER         reduce using rule 11 (instruccion -> if_else_instr .)
    PRINT           reduce using rule 11 (instruccion -> if_else_instr .)
    VAR             reduce using rule 11 (instruccion -> if_else_instr .)
    ID              reduce using rule 11 (instruccion -> if_else_instr .)
    MIENTRAS        reduce using rule 11 (instruccion -> if_else_instr .)
    IF              reduce using rule 11 (instruccion -> if_else_instr .)


state 16

    (12) imprimir_instr -> PRINT . PARIZQ print_expresion_general PARDER PTCOMA

    PARIZQ          shift and go to state 23


state 17

    (17) definicion_instr -> VAR . ID def_instr_prima
    (25) def_asig_instr -> VAR . ID IGUAL asign_def_expresion_general def_instr_prima

    ID              shift and go to state 24


state 18

    (21) asignacion_instr -> ID . IGUAL asign_expresion_general def_instr_prima

    IGUAL           shift and go to state 25


state 19

    (29) mientras_instr -> MIENTRAS . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 26


state 20

    (30) if_instr -> IF . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_else_instr -> IF . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 27


state 21

    (2) func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .

    $end            reduce using rule 2 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)


state 22

    (3) instrucciones -> instrucciones instruccion .

    LLAVDER         reduce using rule 3 (instrucciones -> instrucciones instruccion .)
    PRINT           reduce using rule 3 (instrucciones -> instrucciones instruccion .)
    VAR             reduce using rule 3 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 3 (instrucciones -> instrucciones instruccion .)
    MIENTRAS        reduce using rule 3 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 3 (instrucciones -> instrucciones instruccion .)


state 23

    (12) imprimir_instr -> PRINT PARIZQ . print_expresion_general PARDER PTCOMA
    (13) print_expresion_general -> . expresion_numerica
    (14) print_expresion_general -> . expresion_cadena
    (15) print_expresion_general -> . expresion_id
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID
    (41) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (42) expresion_cadena -> . CADENA
    (43) expresion_cadena -> . expresion_numerica
    (16) expresion_id -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 36
    CADENA          shift and go to state 37

    print_expresion_general        shift and go to state 29
    expresion_numerica             shift and go to state 30
    expresion_cadena               shift and go to state 31
    expresion_id                   shift and go to state 32

state 24

    (17) definicion_instr -> VAR ID . def_instr_prima
    (25) def_asig_instr -> VAR ID . IGUAL asign_def_expresion_general def_instr_prima
    (18) def_instr_prima -> . PTCOMA
    (19) def_instr_prima -> . empty
    (20) empty -> .

    IGUAL           shift and go to state 39
    PTCOMA          shift and go to state 40
    LLAVDER         reduce using rule 20 (empty -> .)
    PRINT           reduce using rule 20 (empty -> .)
    VAR             reduce using rule 20 (empty -> .)
    ID              reduce using rule 20 (empty -> .)
    MIENTRAS        reduce using rule 20 (empty -> .)
    IF              reduce using rule 20 (empty -> .)

    def_instr_prima                shift and go to state 38
    empty                          shift and go to state 41

state 25

    (21) asignacion_instr -> ID IGUAL . asign_expresion_general def_instr_prima
    (22) asign_expresion_general -> . expresion_numerica
    (23) asign_expresion_general -> . expresion_cadena
    (24) asign_expresion_general -> . expresion_id
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID
    (41) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (42) expresion_cadena -> . CADENA
    (43) expresion_cadena -> . expresion_numerica
    (16) expresion_id -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 36
    CADENA          shift and go to state 37

    asign_expresion_general        shift and go to state 42
    expresion_numerica             shift and go to state 43
    expresion_cadena               shift and go to state 44
    expresion_id                   shift and go to state 45

state 26

    (29) mientras_instr -> MIENTRAS PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (44) expresion_logica -> . expresion_numerica MAYQUE expresion_numerica
    (45) expresion_logica -> . expresion_numerica MENQUE expresion_numerica
    (46) expresion_logica -> . expresion_numerica IGUALQUE expresion_numerica
    (47) expresion_logica -> . expresion_numerica NIGUALQUE expresion_numerica
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 48

    expresion_logica               shift and go to state 46
    expresion_numerica             shift and go to state 47

state 27

    (30) if_instr -> IF PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_else_instr -> IF PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (44) expresion_logica -> . expresion_numerica MAYQUE expresion_numerica
    (45) expresion_logica -> . expresion_numerica MENQUE expresion_numerica
    (46) expresion_logica -> . expresion_numerica IGUALQUE expresion_numerica
    (47) expresion_logica -> . expresion_numerica NIGUALQUE expresion_numerica
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 48

    expresion_logica               shift and go to state 49
    expresion_numerica             shift and go to state 47

state 28

    (37) expresion_numerica -> PARIZQ . expresion_numerica PARDER
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 48

    expresion_numerica             shift and go to state 50

state 29

    (12) imprimir_instr -> PRINT PARIZQ print_expresion_general . PARDER PTCOMA

    PARDER          shift and go to state 51


state 30

    (13) print_expresion_general -> expresion_numerica .
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (43) expresion_cadena -> expresion_numerica .

  ! reduce/reduce conflict for PARDER resolved using rule 13 (print_expresion_general -> expresion_numerica .)
    PARDER          reduce using rule 13 (print_expresion_general -> expresion_numerica .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53
    POR             shift and go to state 54
    DIVIDIDO        shift and go to state 55
    CONCAT          reduce using rule 43 (expresion_cadena -> expresion_numerica .)

  ! PARDER          [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]


state 31

    (14) print_expresion_general -> expresion_cadena .
    (41) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    PARDER          reduce using rule 14 (print_expresion_general -> expresion_cadena .)
    CONCAT          shift and go to state 56


state 32

    (15) print_expresion_general -> expresion_id .

    PARDER          reduce using rule 15 (print_expresion_general -> expresion_id .)


state 33

    (36) expresion_numerica -> MENOS . expresion_numerica
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 48

    expresion_numerica             shift and go to state 57

state 34

    (38) expresion_numerica -> ENTERO .

    MAS             reduce using rule 38 (expresion_numerica -> ENTERO .)
    MENOS           reduce using rule 38 (expresion_numerica -> ENTERO .)
    POR             reduce using rule 38 (expresion_numerica -> ENTERO .)
    DIVIDIDO        reduce using rule 38 (expresion_numerica -> ENTERO .)
    PARDER          reduce using rule 38 (expresion_numerica -> ENTERO .)
    CONCAT          reduce using rule 38 (expresion_numerica -> ENTERO .)
    PTCOMA          reduce using rule 38 (expresion_numerica -> ENTERO .)
    LLAVDER         reduce using rule 38 (expresion_numerica -> ENTERO .)
    PRINT           reduce using rule 38 (expresion_numerica -> ENTERO .)
    VAR             reduce using rule 38 (expresion_numerica -> ENTERO .)
    ID              reduce using rule 38 (expresion_numerica -> ENTERO .)
    MIENTRAS        reduce using rule 38 (expresion_numerica -> ENTERO .)
    IF              reduce using rule 38 (expresion_numerica -> ENTERO .)
    MAYQUE          reduce using rule 38 (expresion_numerica -> ENTERO .)
    MENQUE          reduce using rule 38 (expresion_numerica -> ENTERO .)
    IGUALQUE        reduce using rule 38 (expresion_numerica -> ENTERO .)
    NIGUALQUE       reduce using rule 38 (expresion_numerica -> ENTERO .)


state 35

    (39) expresion_numerica -> DECIMAL .

    MAS             reduce using rule 39 (expresion_numerica -> DECIMAL .)
    MENOS           reduce using rule 39 (expresion_numerica -> DECIMAL .)
    POR             reduce using rule 39 (expresion_numerica -> DECIMAL .)
    DIVIDIDO        reduce using rule 39 (expresion_numerica -> DECIMAL .)
    PARDER          reduce using rule 39 (expresion_numerica -> DECIMAL .)
    CONCAT          reduce using rule 39 (expresion_numerica -> DECIMAL .)
    PTCOMA          reduce using rule 39 (expresion_numerica -> DECIMAL .)
    LLAVDER         reduce using rule 39 (expresion_numerica -> DECIMAL .)
    PRINT           reduce using rule 39 (expresion_numerica -> DECIMAL .)
    VAR             reduce using rule 39 (expresion_numerica -> DECIMAL .)
    ID              reduce using rule 39 (expresion_numerica -> DECIMAL .)
    MIENTRAS        reduce using rule 39 (expresion_numerica -> DECIMAL .)
    IF              reduce using rule 39 (expresion_numerica -> DECIMAL .)
    MAYQUE          reduce using rule 39 (expresion_numerica -> DECIMAL .)
    MENQUE          reduce using rule 39 (expresion_numerica -> DECIMAL .)
    IGUALQUE        reduce using rule 39 (expresion_numerica -> DECIMAL .)
    NIGUALQUE       reduce using rule 39 (expresion_numerica -> DECIMAL .)


state 36

    (40) expresion_numerica -> ID .
    (16) expresion_id -> ID .

  ! reduce/reduce conflict for PARDER resolved using rule 16 (expresion_id -> ID .)
  ! reduce/reduce conflict for PTCOMA resolved using rule 16 (expresion_id -> ID .)
  ! reduce/reduce conflict for LLAVDER resolved using rule 16 (expresion_id -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 16 (expresion_id -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 16 (expresion_id -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 16 (expresion_id -> ID .)
  ! reduce/reduce conflict for MIENTRAS resolved using rule 16 (expresion_id -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 16 (expresion_id -> ID .)
    MAS             reduce using rule 40 (expresion_numerica -> ID .)
    MENOS           reduce using rule 40 (expresion_numerica -> ID .)
    POR             reduce using rule 40 (expresion_numerica -> ID .)
    DIVIDIDO        reduce using rule 40 (expresion_numerica -> ID .)
    CONCAT          reduce using rule 40 (expresion_numerica -> ID .)
    PARDER          reduce using rule 16 (expresion_id -> ID .)
    PTCOMA          reduce using rule 16 (expresion_id -> ID .)
    LLAVDER         reduce using rule 16 (expresion_id -> ID .)
    PRINT           reduce using rule 16 (expresion_id -> ID .)
    VAR             reduce using rule 16 (expresion_id -> ID .)
    ID              reduce using rule 16 (expresion_id -> ID .)
    MIENTRAS        reduce using rule 16 (expresion_id -> ID .)
    IF              reduce using rule 16 (expresion_id -> ID .)

  ! PARDER          [ reduce using rule 40 (expresion_numerica -> ID .) ]
  ! PTCOMA          [ reduce using rule 40 (expresion_numerica -> ID .) ]
  ! LLAVDER         [ reduce using rule 40 (expresion_numerica -> ID .) ]
  ! PRINT           [ reduce using rule 40 (expresion_numerica -> ID .) ]
  ! VAR             [ reduce using rule 40 (expresion_numerica -> ID .) ]
  ! ID              [ reduce using rule 40 (expresion_numerica -> ID .) ]
  ! MIENTRAS        [ reduce using rule 40 (expresion_numerica -> ID .) ]
  ! IF              [ reduce using rule 40 (expresion_numerica -> ID .) ]


state 37

    (42) expresion_cadena -> CADENA .

    CONCAT          reduce using rule 42 (expresion_cadena -> CADENA .)
    PARDER          reduce using rule 42 (expresion_cadena -> CADENA .)
    PTCOMA          reduce using rule 42 (expresion_cadena -> CADENA .)
    LLAVDER         reduce using rule 42 (expresion_cadena -> CADENA .)
    PRINT           reduce using rule 42 (expresion_cadena -> CADENA .)
    VAR             reduce using rule 42 (expresion_cadena -> CADENA .)
    ID              reduce using rule 42 (expresion_cadena -> CADENA .)
    MIENTRAS        reduce using rule 42 (expresion_cadena -> CADENA .)
    IF              reduce using rule 42 (expresion_cadena -> CADENA .)


state 38

    (17) definicion_instr -> VAR ID def_instr_prima .

    LLAVDER         reduce using rule 17 (definicion_instr -> VAR ID def_instr_prima .)
    PRINT           reduce using rule 17 (definicion_instr -> VAR ID def_instr_prima .)
    VAR             reduce using rule 17 (definicion_instr -> VAR ID def_instr_prima .)
    ID              reduce using rule 17 (definicion_instr -> VAR ID def_instr_prima .)
    MIENTRAS        reduce using rule 17 (definicion_instr -> VAR ID def_instr_prima .)
    IF              reduce using rule 17 (definicion_instr -> VAR ID def_instr_prima .)


state 39

    (25) def_asig_instr -> VAR ID IGUAL . asign_def_expresion_general def_instr_prima
    (26) asign_def_expresion_general -> . expresion_numerica
    (27) asign_def_expresion_general -> . expresion_cadena
    (28) asign_def_expresion_general -> . expresion_id
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID
    (41) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (42) expresion_cadena -> . CADENA
    (43) expresion_cadena -> . expresion_numerica
    (16) expresion_id -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 36
    CADENA          shift and go to state 37

    asign_def_expresion_general    shift and go to state 58
    expresion_numerica             shift and go to state 59
    expresion_cadena               shift and go to state 60
    expresion_id                   shift and go to state 61

state 40

    (18) def_instr_prima -> PTCOMA .

    LLAVDER         reduce using rule 18 (def_instr_prima -> PTCOMA .)
    PRINT           reduce using rule 18 (def_instr_prima -> PTCOMA .)
    VAR             reduce using rule 18 (def_instr_prima -> PTCOMA .)
    ID              reduce using rule 18 (def_instr_prima -> PTCOMA .)
    MIENTRAS        reduce using rule 18 (def_instr_prima -> PTCOMA .)
    IF              reduce using rule 18 (def_instr_prima -> PTCOMA .)


state 41

    (19) def_instr_prima -> empty .

    LLAVDER         reduce using rule 19 (def_instr_prima -> empty .)
    PRINT           reduce using rule 19 (def_instr_prima -> empty .)
    VAR             reduce using rule 19 (def_instr_prima -> empty .)
    ID              reduce using rule 19 (def_instr_prima -> empty .)
    MIENTRAS        reduce using rule 19 (def_instr_prima -> empty .)
    IF              reduce using rule 19 (def_instr_prima -> empty .)


state 42

    (21) asignacion_instr -> ID IGUAL asign_expresion_general . def_instr_prima
    (18) def_instr_prima -> . PTCOMA
    (19) def_instr_prima -> . empty
    (20) empty -> .

    PTCOMA          shift and go to state 40
    LLAVDER         reduce using rule 20 (empty -> .)
    PRINT           reduce using rule 20 (empty -> .)
    VAR             reduce using rule 20 (empty -> .)
    ID              reduce using rule 20 (empty -> .)
    MIENTRAS        reduce using rule 20 (empty -> .)
    IF              reduce using rule 20 (empty -> .)

    def_instr_prima                shift and go to state 62
    empty                          shift and go to state 41

state 43

    (22) asign_expresion_general -> expresion_numerica .
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (43) expresion_cadena -> expresion_numerica .

  ! reduce/reduce conflict for PTCOMA resolved using rule 22 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for LLAVDER resolved using rule 22 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for PRINT resolved using rule 22 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for VAR resolved using rule 22 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for ID resolved using rule 22 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for MIENTRAS resolved using rule 22 (asign_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for IF resolved using rule 22 (asign_expresion_general -> expresion_numerica .)
    PTCOMA          reduce using rule 22 (asign_expresion_general -> expresion_numerica .)
    LLAVDER         reduce using rule 22 (asign_expresion_general -> expresion_numerica .)
    PRINT           reduce using rule 22 (asign_expresion_general -> expresion_numerica .)
    VAR             reduce using rule 22 (asign_expresion_general -> expresion_numerica .)
    ID              reduce using rule 22 (asign_expresion_general -> expresion_numerica .)
    MIENTRAS        reduce using rule 22 (asign_expresion_general -> expresion_numerica .)
    IF              reduce using rule 22 (asign_expresion_general -> expresion_numerica .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53
    POR             shift and go to state 54
    DIVIDIDO        shift and go to state 55
    CONCAT          reduce using rule 43 (expresion_cadena -> expresion_numerica .)

  ! PTCOMA          [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]
  ! LLAVDER         [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]
  ! PRINT           [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]
  ! VAR             [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]
  ! ID              [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]
  ! MIENTRAS        [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]
  ! IF              [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]


state 44

    (23) asign_expresion_general -> expresion_cadena .
    (41) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    PTCOMA          reduce using rule 23 (asign_expresion_general -> expresion_cadena .)
    LLAVDER         reduce using rule 23 (asign_expresion_general -> expresion_cadena .)
    PRINT           reduce using rule 23 (asign_expresion_general -> expresion_cadena .)
    VAR             reduce using rule 23 (asign_expresion_general -> expresion_cadena .)
    ID              reduce using rule 23 (asign_expresion_general -> expresion_cadena .)
    MIENTRAS        reduce using rule 23 (asign_expresion_general -> expresion_cadena .)
    IF              reduce using rule 23 (asign_expresion_general -> expresion_cadena .)
    CONCAT          shift and go to state 56


state 45

    (24) asign_expresion_general -> expresion_id .

    PTCOMA          reduce using rule 24 (asign_expresion_general -> expresion_id .)
    LLAVDER         reduce using rule 24 (asign_expresion_general -> expresion_id .)
    PRINT           reduce using rule 24 (asign_expresion_general -> expresion_id .)
    VAR             reduce using rule 24 (asign_expresion_general -> expresion_id .)
    ID              reduce using rule 24 (asign_expresion_general -> expresion_id .)
    MIENTRAS        reduce using rule 24 (asign_expresion_general -> expresion_id .)
    IF              reduce using rule 24 (asign_expresion_general -> expresion_id .)


state 46

    (29) mientras_instr -> MIENTRAS PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 63


state 47

    (44) expresion_logica -> expresion_numerica . MAYQUE expresion_numerica
    (45) expresion_logica -> expresion_numerica . MENQUE expresion_numerica
    (46) expresion_logica -> expresion_numerica . IGUALQUE expresion_numerica
    (47) expresion_logica -> expresion_numerica . NIGUALQUE expresion_numerica
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAYQUE          shift and go to state 64
    MENQUE          shift and go to state 65
    IGUALQUE        shift and go to state 66
    NIGUALQUE       shift and go to state 67
    MAS             shift and go to state 52
    MENOS           shift and go to state 53
    POR             shift and go to state 54
    DIVIDIDO        shift and go to state 55


state 48

    (40) expresion_numerica -> ID .

    MAYQUE          reduce using rule 40 (expresion_numerica -> ID .)
    MENQUE          reduce using rule 40 (expresion_numerica -> ID .)
    IGUALQUE        reduce using rule 40 (expresion_numerica -> ID .)
    NIGUALQUE       reduce using rule 40 (expresion_numerica -> ID .)
    MAS             reduce using rule 40 (expresion_numerica -> ID .)
    MENOS           reduce using rule 40 (expresion_numerica -> ID .)
    POR             reduce using rule 40 (expresion_numerica -> ID .)
    DIVIDIDO        reduce using rule 40 (expresion_numerica -> ID .)
    PARDER          reduce using rule 40 (expresion_numerica -> ID .)
    CONCAT          reduce using rule 40 (expresion_numerica -> ID .)
    PTCOMA          reduce using rule 40 (expresion_numerica -> ID .)
    LLAVDER         reduce using rule 40 (expresion_numerica -> ID .)
    PRINT           reduce using rule 40 (expresion_numerica -> ID .)
    VAR             reduce using rule 40 (expresion_numerica -> ID .)
    ID              reduce using rule 40 (expresion_numerica -> ID .)
    MIENTRAS        reduce using rule 40 (expresion_numerica -> ID .)
    IF              reduce using rule 40 (expresion_numerica -> ID .)


state 49

    (30) if_instr -> IF PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_else_instr -> IF PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 68


state 50

    (37) expresion_numerica -> PARIZQ expresion_numerica . PARDER
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          shift and go to state 69
    MAS             shift and go to state 52
    MENOS           shift and go to state 53
    POR             shift and go to state 54
    DIVIDIDO        shift and go to state 55


state 51

    (12) imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER . PTCOMA

    PTCOMA          shift and go to state 70


state 52

    (32) expresion_numerica -> expresion_numerica MAS . expresion_numerica
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 48

    expresion_numerica             shift and go to state 71

state 53

    (33) expresion_numerica -> expresion_numerica MENOS . expresion_numerica
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 48

    expresion_numerica             shift and go to state 72

state 54

    (34) expresion_numerica -> expresion_numerica POR . expresion_numerica
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 48

    expresion_numerica             shift and go to state 73

state 55

    (35) expresion_numerica -> expresion_numerica DIVIDIDO . expresion_numerica
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 48

    expresion_numerica             shift and go to state 74

state 56

    (41) expresion_cadena -> expresion_cadena CONCAT . expresion_cadena
    (41) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (42) expresion_cadena -> . CADENA
    (43) expresion_cadena -> . expresion_numerica
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID

    CADENA          shift and go to state 37
    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 48

    expresion_cadena               shift and go to state 75
    expresion_numerica             shift and go to state 76

state 57

    (36) expresion_numerica -> MENOS expresion_numerica .
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    MENOS           reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    POR             reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    DIVIDIDO        reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    PARDER          reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    CONCAT          reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    PTCOMA          reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    LLAVDER         reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    PRINT           reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    VAR             reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    ID              reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    MIENTRAS        reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    IF              reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    MAYQUE          reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    MENQUE          reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    IGUALQUE        reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)
    NIGUALQUE       reduce using rule 36 (expresion_numerica -> MENOS expresion_numerica .)

  ! MAS             [ shift and go to state 52 ]
  ! MENOS           [ shift and go to state 53 ]
  ! POR             [ shift and go to state 54 ]
  ! DIVIDIDO        [ shift and go to state 55 ]


state 58

    (25) def_asig_instr -> VAR ID IGUAL asign_def_expresion_general . def_instr_prima
    (18) def_instr_prima -> . PTCOMA
    (19) def_instr_prima -> . empty
    (20) empty -> .

    PTCOMA          shift and go to state 40
    LLAVDER         reduce using rule 20 (empty -> .)
    PRINT           reduce using rule 20 (empty -> .)
    VAR             reduce using rule 20 (empty -> .)
    ID              reduce using rule 20 (empty -> .)
    MIENTRAS        reduce using rule 20 (empty -> .)
    IF              reduce using rule 20 (empty -> .)

    def_instr_prima                shift and go to state 77
    empty                          shift and go to state 41

state 59

    (26) asign_def_expresion_general -> expresion_numerica .
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (43) expresion_cadena -> expresion_numerica .

  ! reduce/reduce conflict for PTCOMA resolved using rule 26 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for LLAVDER resolved using rule 26 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for PRINT resolved using rule 26 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for VAR resolved using rule 26 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for ID resolved using rule 26 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for MIENTRAS resolved using rule 26 (asign_def_expresion_general -> expresion_numerica .)
  ! reduce/reduce conflict for IF resolved using rule 26 (asign_def_expresion_general -> expresion_numerica .)
    PTCOMA          reduce using rule 26 (asign_def_expresion_general -> expresion_numerica .)
    LLAVDER         reduce using rule 26 (asign_def_expresion_general -> expresion_numerica .)
    PRINT           reduce using rule 26 (asign_def_expresion_general -> expresion_numerica .)
    VAR             reduce using rule 26 (asign_def_expresion_general -> expresion_numerica .)
    ID              reduce using rule 26 (asign_def_expresion_general -> expresion_numerica .)
    MIENTRAS        reduce using rule 26 (asign_def_expresion_general -> expresion_numerica .)
    IF              reduce using rule 26 (asign_def_expresion_general -> expresion_numerica .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53
    POR             shift and go to state 54
    DIVIDIDO        shift and go to state 55
    CONCAT          reduce using rule 43 (expresion_cadena -> expresion_numerica .)

  ! PTCOMA          [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]
  ! LLAVDER         [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]
  ! PRINT           [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]
  ! VAR             [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]
  ! ID              [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]
  ! MIENTRAS        [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]
  ! IF              [ reduce using rule 43 (expresion_cadena -> expresion_numerica .) ]


state 60

    (27) asign_def_expresion_general -> expresion_cadena .
    (41) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    PTCOMA          reduce using rule 27 (asign_def_expresion_general -> expresion_cadena .)
    LLAVDER         reduce using rule 27 (asign_def_expresion_general -> expresion_cadena .)
    PRINT           reduce using rule 27 (asign_def_expresion_general -> expresion_cadena .)
    VAR             reduce using rule 27 (asign_def_expresion_general -> expresion_cadena .)
    ID              reduce using rule 27 (asign_def_expresion_general -> expresion_cadena .)
    MIENTRAS        reduce using rule 27 (asign_def_expresion_general -> expresion_cadena .)
    IF              reduce using rule 27 (asign_def_expresion_general -> expresion_cadena .)
    CONCAT          shift and go to state 56


state 61

    (28) asign_def_expresion_general -> expresion_id .

    PTCOMA          reduce using rule 28 (asign_def_expresion_general -> expresion_id .)
    LLAVDER         reduce using rule 28 (asign_def_expresion_general -> expresion_id .)
    PRINT           reduce using rule 28 (asign_def_expresion_general -> expresion_id .)
    VAR             reduce using rule 28 (asign_def_expresion_general -> expresion_id .)
    ID              reduce using rule 28 (asign_def_expresion_general -> expresion_id .)
    MIENTRAS        reduce using rule 28 (asign_def_expresion_general -> expresion_id .)
    IF              reduce using rule 28 (asign_def_expresion_general -> expresion_id .)


state 62

    (21) asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .

    LLAVDER         reduce using rule 21 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    PRINT           reduce using rule 21 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    VAR             reduce using rule 21 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    ID              reduce using rule 21 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    MIENTRAS        reduce using rule 21 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)
    IF              reduce using rule 21 (asignacion_instr -> ID IGUAL asign_expresion_general def_instr_prima .)


state 63

    (29) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 78


state 64

    (44) expresion_logica -> expresion_numerica MAYQUE . expresion_numerica
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 48

    expresion_numerica             shift and go to state 79

state 65

    (45) expresion_logica -> expresion_numerica MENQUE . expresion_numerica
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 48

    expresion_numerica             shift and go to state 80

state 66

    (46) expresion_logica -> expresion_numerica IGUALQUE . expresion_numerica
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 48

    expresion_numerica             shift and go to state 81

state 67

    (47) expresion_logica -> expresion_numerica NIGUALQUE . expresion_numerica
    (32) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (33) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (34) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (35) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (36) expresion_numerica -> . MENOS expresion_numerica
    (37) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (38) expresion_numerica -> . ENTERO
    (39) expresion_numerica -> . DECIMAL
    (40) expresion_numerica -> . ID

    MENOS           shift and go to state 33
    PARIZQ          shift and go to state 28
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    ID              shift and go to state 48

    expresion_numerica             shift and go to state 82

state 68

    (30) if_instr -> IF PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER
    (31) if_else_instr -> IF PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 83


state 69

    (37) expresion_numerica -> PARIZQ expresion_numerica PARDER .

    MAS             reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENOS           reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    POR             reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    DIVIDIDO        reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PARDER          reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    CONCAT          reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PTCOMA          reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    LLAVDER         reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PRINT           reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    VAR             reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    ID              reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MIENTRAS        reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IF              reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MAYQUE          reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENQUE          reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IGUALQUE        reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    NIGUALQUE       reduce using rule 37 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)


state 70

    (12) imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER PTCOMA .

    LLAVDER         reduce using rule 12 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER PTCOMA .)
    PRINT           reduce using rule 12 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER PTCOMA .)
    VAR             reduce using rule 12 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER PTCOMA .)
    ID              reduce using rule 12 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER PTCOMA .)
    MIENTRAS        reduce using rule 12 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER PTCOMA .)
    IF              reduce using rule 12 (imprimir_instr -> PRINT PARIZQ print_expresion_general PARDER PTCOMA .)


state 71

    (32) expresion_numerica -> expresion_numerica MAS expresion_numerica .
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENOS           reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PARDER          reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    CONCAT          reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PTCOMA          reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    LLAVDER         reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PRINT           reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    VAR             reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    ID              reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MIENTRAS        reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IF              reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MAYQUE          reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENQUE          reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IGUALQUE        reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    NIGUALQUE       reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    POR             shift and go to state 54
    DIVIDIDO        shift and go to state 55

  ! POR             [ reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 32 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! MAS             [ shift and go to state 52 ]
  ! MENOS           [ shift and go to state 53 ]


state 72

    (33) expresion_numerica -> expresion_numerica MENOS expresion_numerica .
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENOS           reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PARDER          reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    CONCAT          reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PTCOMA          reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    LLAVDER         reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PRINT           reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    VAR             reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    ID              reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MIENTRAS        reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IF              reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MAYQUE          reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENQUE          reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IGUALQUE        reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    NIGUALQUE       reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    POR             shift and go to state 54
    DIVIDIDO        shift and go to state 55

  ! POR             [ reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 33 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! MAS             [ shift and go to state 52 ]
  ! MENOS           [ shift and go to state 53 ]


state 73

    (34) expresion_numerica -> expresion_numerica POR expresion_numerica .
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENOS           reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    POR             reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    DIVIDIDO        reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PARDER          reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    CONCAT          reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PTCOMA          reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    LLAVDER         reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PRINT           reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    VAR             reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    ID              reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MIENTRAS        reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IF              reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MAYQUE          reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENQUE          reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IGUALQUE        reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    NIGUALQUE       reduce using rule 34 (expresion_numerica -> expresion_numerica POR expresion_numerica .)

  ! MAS             [ shift and go to state 52 ]
  ! MENOS           [ shift and go to state 53 ]
  ! POR             [ shift and go to state 54 ]
  ! DIVIDIDO        [ shift and go to state 55 ]


state 74

    (35) expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENOS           reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    POR             reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    DIVIDIDO        reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PARDER          reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    CONCAT          reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PTCOMA          reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    LLAVDER         reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PRINT           reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    VAR             reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    ID              reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MIENTRAS        reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IF              reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MAYQUE          reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENQUE          reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IGUALQUE        reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    NIGUALQUE       reduce using rule 35 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)

  ! MAS             [ shift and go to state 52 ]
  ! MENOS           [ shift and go to state 53 ]
  ! POR             [ shift and go to state 54 ]
  ! DIVIDIDO        [ shift and go to state 55 ]


state 75

    (41) expresion_cadena -> expresion_cadena CONCAT expresion_cadena .
    (41) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    CONCAT          reduce using rule 41 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    PARDER          reduce using rule 41 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    PTCOMA          reduce using rule 41 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    LLAVDER         reduce using rule 41 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    PRINT           reduce using rule 41 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    VAR             reduce using rule 41 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    ID              reduce using rule 41 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    MIENTRAS        reduce using rule 41 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    IF              reduce using rule 41 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)

  ! CONCAT          [ shift and go to state 56 ]


state 76

    (43) expresion_cadena -> expresion_numerica .
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    CONCAT          reduce using rule 43 (expresion_cadena -> expresion_numerica .)
    PARDER          reduce using rule 43 (expresion_cadena -> expresion_numerica .)
    PTCOMA          reduce using rule 43 (expresion_cadena -> expresion_numerica .)
    LLAVDER         reduce using rule 43 (expresion_cadena -> expresion_numerica .)
    PRINT           reduce using rule 43 (expresion_cadena -> expresion_numerica .)
    VAR             reduce using rule 43 (expresion_cadena -> expresion_numerica .)
    ID              reduce using rule 43 (expresion_cadena -> expresion_numerica .)
    MIENTRAS        reduce using rule 43 (expresion_cadena -> expresion_numerica .)
    IF              reduce using rule 43 (expresion_cadena -> expresion_numerica .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53
    POR             shift and go to state 54
    DIVIDIDO        shift and go to state 55


state 77

    (25) def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .

    LLAVDER         reduce using rule 25 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    PRINT           reduce using rule 25 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    VAR             reduce using rule 25 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    ID              reduce using rule 25 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    MIENTRAS        reduce using rule 25 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)
    IF              reduce using rule 25 (def_asig_instr -> VAR ID IGUAL asign_def_expresion_general def_instr_prima .)


state 78

    (29) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER
    (3) instrucciones -> . instrucciones instruccion
    (4) instrucciones -> . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (12) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER PTCOMA
    (17) definicion_instr -> . VAR ID def_instr_prima
    (21) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (25) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (29) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    PRINT           shift and go to state 16
    VAR             shift and go to state 17
    ID              shift and go to state 18
    MIENTRAS        shift and go to state 19
    IF              shift and go to state 20

    instrucciones                  shift and go to state 84
    instruccion                    shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    mientras_instr                 shift and go to state 13
    if_instr                       shift and go to state 14
    if_else_instr                  shift and go to state 15

state 79

    (44) expresion_logica -> expresion_numerica MAYQUE expresion_numerica .
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 44 (expresion_logica -> expresion_numerica MAYQUE expresion_numerica .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53
    POR             shift and go to state 54
    DIVIDIDO        shift and go to state 55


state 80

    (45) expresion_logica -> expresion_numerica MENQUE expresion_numerica .
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 45 (expresion_logica -> expresion_numerica MENQUE expresion_numerica .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53
    POR             shift and go to state 54
    DIVIDIDO        shift and go to state 55


state 81

    (46) expresion_logica -> expresion_numerica IGUALQUE expresion_numerica .
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 46 (expresion_logica -> expresion_numerica IGUALQUE expresion_numerica .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53
    POR             shift and go to state 54
    DIVIDIDO        shift and go to state 55


state 82

    (47) expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica .
    (32) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (33) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (34) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (35) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 47 (expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica .)
    MAS             shift and go to state 52
    MENOS           shift and go to state 53
    POR             shift and go to state 54
    DIVIDIDO        shift and go to state 55


state 83

    (30) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER
    (31) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (3) instrucciones -> . instrucciones instruccion
    (4) instrucciones -> . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (12) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER PTCOMA
    (17) definicion_instr -> . VAR ID def_instr_prima
    (21) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (25) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (29) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    PRINT           shift and go to state 16
    VAR             shift and go to state 17
    ID              shift and go to state 18
    MIENTRAS        shift and go to state 19
    IF              shift and go to state 20

    instrucciones                  shift and go to state 85
    instruccion                    shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    mientras_instr                 shift and go to state 13
    if_instr                       shift and go to state 14
    if_else_instr                  shift and go to state 15

state 84

    (29) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER
    (3) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (12) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER PTCOMA
    (17) definicion_instr -> . VAR ID def_instr_prima
    (21) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (25) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (29) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVDER         shift and go to state 86
    PRINT           shift and go to state 16
    VAR             shift and go to state 17
    ID              shift and go to state 18
    MIENTRAS        shift and go to state 19
    IF              shift and go to state 20

    instruccion                    shift and go to state 22
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    mientras_instr                 shift and go to state 13
    if_instr                       shift and go to state 14
    if_else_instr                  shift and go to state 15

state 85

    (30) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER
    (31) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (3) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (12) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER PTCOMA
    (17) definicion_instr -> . VAR ID def_instr_prima
    (21) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (25) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (29) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVDER         shift and go to state 87
    PRINT           shift and go to state 16
    VAR             shift and go to state 17
    ID              shift and go to state 18
    MIENTRAS        shift and go to state 19
    IF              shift and go to state 20

    instruccion                    shift and go to state 22
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    mientras_instr                 shift and go to state 13
    if_instr                       shift and go to state 14
    if_else_instr                  shift and go to state 15

state 86

    (29) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .

    LLAVDER         reduce using rule 29 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 29 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 29 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 29 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 29 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 29 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)


state 87

    (30) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .
    (31) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER . ELSE LLAVIZQ instrucciones LLAVDER

    LLAVDER         reduce using rule 30 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 30 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 30 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 30 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 30 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 30 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    ELSE            shift and go to state 88


state 88

    (31) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 89


state 89

    (31) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ . instrucciones LLAVDER
    (3) instrucciones -> . instrucciones instruccion
    (4) instrucciones -> . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (12) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER PTCOMA
    (17) definicion_instr -> . VAR ID def_instr_prima
    (21) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (25) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (29) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    PRINT           shift and go to state 16
    VAR             shift and go to state 17
    ID              shift and go to state 18
    MIENTRAS        shift and go to state 19
    IF              shift and go to state 20

    instrucciones                  shift and go to state 90
    instruccion                    shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    mientras_instr                 shift and go to state 13
    if_instr                       shift and go to state 14
    if_else_instr                  shift and go to state 15

state 90

    (31) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones . LLAVDER
    (3) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . def_asig_instr
    (9) instruccion -> . mientras_instr
    (10) instruccion -> . if_instr
    (11) instruccion -> . if_else_instr
    (12) imprimir_instr -> . PRINT PARIZQ print_expresion_general PARDER PTCOMA
    (17) definicion_instr -> . VAR ID def_instr_prima
    (21) asignacion_instr -> . ID IGUAL asign_expresion_general def_instr_prima
    (25) def_asig_instr -> . VAR ID IGUAL asign_def_expresion_general def_instr_prima
    (29) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVDER         shift and go to state 91
    PRINT           shift and go to state 16
    VAR             shift and go to state 17
    ID              shift and go to state 18
    MIENTRAS        shift and go to state 19
    IF              shift and go to state 20

    instruccion                    shift and go to state 22
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    mientras_instr                 shift and go to state 13
    if_instr                       shift and go to state 14
    if_else_instr                  shift and go to state 15

state 91

    (31) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .

    LLAVDER         reduce using rule 31 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 31 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 31 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 31 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 31 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 31 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 30 resolved using rule (print_expresion_general -> expresion_numerica)
WARNING: rejected rule (expresion_cadena -> expresion_numerica) in state 30
WARNING: reduce/reduce conflict in state 36 resolved using rule (expresion_id -> ID)
WARNING: rejected rule (expresion_numerica -> ID) in state 36
WARNING: reduce/reduce conflict in state 43 resolved using rule (asign_expresion_general -> expresion_numerica)
WARNING: rejected rule (expresion_cadena -> expresion_numerica) in state 43
WARNING: reduce/reduce conflict in state 59 resolved using rule (asign_def_expresion_general -> expresion_numerica)
WARNING: rejected rule (expresion_cadena -> expresion_numerica) in state 59
