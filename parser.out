Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instrucciones -> empty
Rule 5     instruccion -> func_main
Rule 6     instruccion -> funct_instr
Rule 7     instruccion -> call_instr
Rule 8     instruccion -> return_instr
Rule 9     instruccion -> imprimir_instr
Rule 10    instruccion -> definicion_instr
Rule 11    instruccion -> asignacion_instr
Rule 12    instruccion -> def_asig_instr
Rule 13    instruccion -> while_instr
Rule 14    instruccion -> if_instr
Rule 15    instruccion -> switch_instr
Rule 16    instruccion -> for_instr
Rule 17    instruccion -> expresion
Rule 18    instruccion -> break_instr
Rule 19    instruccion -> continue_instr
Rule 20    def_instr_prima -> PTCOMA
Rule 21    def_instr_prima -> empty
Rule 22    empty -> <empty>
Rule 23    func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
Rule 24    imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima
Rule 25    imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima
Rule 26    definicion_instr -> VAR ID def_instr_prima
Rule 27    asignacion_instr -> ID IGUAL expresion def_instr_prima
Rule 28    def_asig_instr -> VAR ID IGUAL expresion def_instr_prima
Rule 29    def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima
Rule 30    if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
Rule 31    if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
Rule 32    if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
Rule 33    while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
Rule 34    continue_instr -> CONTINUE def_instr_prima
Rule 35    break_instr -> BREAK def_instr_prima
Rule 36    switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
Rule 37    switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
Rule 38    switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
Rule 39    cases -> cases case_instr
Rule 40    cases -> case_instr
Rule 41    case_instr -> CASE expresion DOSPUNTOS instrucciones def_instr_prima
Rule 42    default_instr -> DEFAULT DOSPUNTOS instrucciones def_instr_prima
Rule 43    for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
Rule 44    def_asign_for -> ID
Rule 45    def_asign_for -> asignacion_instr
Rule 46    def_asign_for -> def_asig_instr
Rule 47    expresion -> NULL
Rule 48    expresion -> expresion INCREMENT def_instr_prima
Rule 49    expresion -> expresion DECREMENT def_instr_prima
Rule 50    expresion -> expresion MAS expresion
Rule 51    expresion -> expresion MENOS expresion
Rule 52    expresion -> expresion POR expresion
Rule 53    expresion -> expresion DIVIDIDO expresion
Rule 54    expresion -> expresion ELEVADO expresion
Rule 55    expresion -> expresion MOD expresion
Rule 56    expresion -> expresion AND expresion
Rule 57    expresion -> expresion OR expresion
Rule 58    expresion -> expresion MAYQUE expresion
Rule 59    expresion -> expresion MENQUE expresion
Rule 60    expresion -> expresion MAYIGUALQUE expresion
Rule 61    expresion -> expresion MENIGUALQUE expresion
Rule 62    expresion -> expresion IGUALQUE expresion
Rule 63    expresion -> expresion NIGUALQUE expresion
Rule 64    expresion -> MENOS expresion
Rule 65    expresion -> NOT expresion
Rule 66    expresion -> PARIZQ expresion PARDER
Rule 67    expresion -> ID
Rule 68    expresion -> ENTERO
Rule 69    expresion -> DECIMAL
Rule 70    expresion -> CADENA
Rule 71    expresion -> CHARACTER
Rule 72    expresion -> TRUE
Rule 73    expresion -> FALSE
Rule 74    expresion_data_type -> INT
Rule 75    expresion_data_type -> DOUBLE
Rule 76    expresion_data_type -> STRING
Rule 77    expresion_data_type -> CHAR
Rule 78    expresion_data_type -> BOOLEAN
Rule 79    expresion -> PARIZQ expresion_data_type PARDER expresion
Rule 80    expresion -> call_instr
Rule 81    funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
Rule 82    funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
Rule 83    call_instr -> ID PARIZQ PARDER def_instr_prima
Rule 84    call_instr -> ID PARIZQ params_call PARDER def_instr_prima
Rule 85    params -> params COMA param
Rule 86    params -> param
Rule 87    param -> expresion_data_type ID
Rule 88    params_call -> params_call COMA param_call
Rule 89    params_call -> param_call
Rule 90    param_call -> expresion
Rule 91    return_instr -> RETURN expresion def_instr_prima
Rule 92    return_instr -> RETURN call_instr def_instr_prima

Terminals, with rules where they appear

AND                  : 56
BOOLEAN              : 78
BREAK                : 35
CADENA               : 70
CASE                 : 41
CHAR                 : 77
CHARACTER            : 71
COMA                 : 85 88
CONTINUE             : 34
DECIMAL              : 69
DECREMENT            : 49
DEFAULT              : 42
DIVIDIDO             : 53
DOSPUNTOS            : 41 42
DOUBLE               : 75
ELEVADO              : 54
ELSE                 : 31 32
ENTERO               : 68
FALSE                : 73
FOR                  : 43
FUNC                 : 81 82
ID                   : 26 27 28 29 44 67 81 82 83 84 87
IF                   : 30 31 32
IGUAL                : 27 28 29
IGUALQUE             : 62
INCREMENT            : 48
INT                  : 74
LLAVDER              : 23 30 31 31 32 33 36 37 38 43 81 82
LLAVIZQ              : 23 30 31 31 32 33 36 37 38 43 81 82
MAIN                 : 23
MAS                  : 50
MAYIGUALQUE          : 60
MAYQUE               : 58
MENIGUALQUE          : 61
MENOS                : 51 64
MENQUE               : 59
MOD                  : 55
NIGUALQUE            : 63
NOT                  : 65
NULL                 : 47
OR                   : 57
PARDER               : 23 24 25 30 31 32 33 36 37 38 43 66 79 81 82 83 84
PARIZQ               : 23 24 25 30 31 32 33 36 37 38 43 66 79 81 82 83 84
POR                  : 52
PRINT                : 24 25
PTCOMA               : 20
RETURN               : 91 92
STRING               : 76
SWITCH               : 36 37 38
TRUE                 : 72
VAR                  : 26 28 29
WHILE                : 33
error                : 

Nonterminals, with rules where they appear

asignacion_instr     : 11 45
break_instr          : 18
call_instr           : 7 25 29 80 92
case_instr           : 39 40
cases                : 36 38 39
continue_instr       : 19
def_asig_instr       : 12 46
def_asign_for        : 43
def_instr_prima      : 24 25 26 27 28 29 34 35 41 42 43 43 48 49 83 84 91 92
default_instr        : 37 38
definicion_instr     : 10
empty                : 4 21
expresion            : 17 24 27 28 30 31 32 33 36 37 38 41 43 43 48 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 65 66 79 90 91
expresion_data_type  : 79 87
for_instr            : 16
func_main            : 5
funct_instr          : 6
if_instr             : 14 32
imprimir_instr       : 9
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 23 30 31 31 32 33 41 42 43 81 82
param                : 85 86
param_call           : 88 89
params               : 81 85
params_call          : 84 88
return_instr         : 8
switch_instr         : 15
while_instr          : 13

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (22) empty -> .
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
    $end            reduce using rule 22 (empty -> .)
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

  ! MAIN            [ reduce using rule 22 (empty -> .) ]
  ! FUNC            [ reduce using rule 22 (empty -> .) ]
  ! ID              [ reduce using rule 22 (empty -> .) ]
  ! RETURN          [ reduce using rule 22 (empty -> .) ]
  ! PRINT           [ reduce using rule 22 (empty -> .) ]
  ! VAR             [ reduce using rule 22 (empty -> .) ]
  ! WHILE           [ reduce using rule 22 (empty -> .) ]
  ! IF              [ reduce using rule 22 (empty -> .) ]
  ! SWITCH          [ reduce using rule 22 (empty -> .) ]
  ! FOR             [ reduce using rule 22 (empty -> .) ]
  ! NULL            [ reduce using rule 22 (empty -> .) ]
  ! MENOS           [ reduce using rule 22 (empty -> .) ]
  ! NOT             [ reduce using rule 22 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 22 (empty -> .) ]
  ! ENTERO          [ reduce using rule 22 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 22 (empty -> .) ]
  ! CADENA          [ reduce using rule 22 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 22 (empty -> .) ]
  ! TRUE            [ reduce using rule 22 (empty -> .) ]
  ! FALSE           [ reduce using rule 22 (empty -> .) ]
  ! BREAK           [ reduce using rule 22 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 22 (empty -> .) ]

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    expresion                      shift and go to state 17
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

    $end            reduce using rule 1 (init -> instrucciones .)
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

    instruccion                    shift and go to state 42
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    expresion                      shift and go to state 17
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 3

    (3) instrucciones -> instruccion .

    MAIN            reduce using rule 3 (instrucciones -> instruccion .)
    FUNC            reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    RETURN          reduce using rule 3 (instrucciones -> instruccion .)
    PRINT           reduce using rule 3 (instrucciones -> instruccion .)
    VAR             reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    SWITCH          reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    NULL            reduce using rule 3 (instrucciones -> instruccion .)
    MENOS           reduce using rule 3 (instrucciones -> instruccion .)
    NOT             reduce using rule 3 (instrucciones -> instruccion .)
    PARIZQ          reduce using rule 3 (instrucciones -> instruccion .)
    ENTERO          reduce using rule 3 (instrucciones -> instruccion .)
    DECIMAL         reduce using rule 3 (instrucciones -> instruccion .)
    CADENA          reduce using rule 3 (instrucciones -> instruccion .)
    CHARACTER       reduce using rule 3 (instrucciones -> instruccion .)
    TRUE            reduce using rule 3 (instrucciones -> instruccion .)
    FALSE           reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    CONTINUE        reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    LLAVDER         reduce using rule 3 (instrucciones -> instruccion .)
    PTCOMA          reduce using rule 3 (instrucciones -> instruccion .)
    DEFAULT         reduce using rule 3 (instrucciones -> instruccion .)
    CASE            reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instrucciones -> empty .

    MAIN            reduce using rule 4 (instrucciones -> empty .)
    FUNC            reduce using rule 4 (instrucciones -> empty .)
    ID              reduce using rule 4 (instrucciones -> empty .)
    RETURN          reduce using rule 4 (instrucciones -> empty .)
    PRINT           reduce using rule 4 (instrucciones -> empty .)
    VAR             reduce using rule 4 (instrucciones -> empty .)
    WHILE           reduce using rule 4 (instrucciones -> empty .)
    IF              reduce using rule 4 (instrucciones -> empty .)
    SWITCH          reduce using rule 4 (instrucciones -> empty .)
    FOR             reduce using rule 4 (instrucciones -> empty .)
    NULL            reduce using rule 4 (instrucciones -> empty .)
    MENOS           reduce using rule 4 (instrucciones -> empty .)
    NOT             reduce using rule 4 (instrucciones -> empty .)
    PARIZQ          reduce using rule 4 (instrucciones -> empty .)
    ENTERO          reduce using rule 4 (instrucciones -> empty .)
    DECIMAL         reduce using rule 4 (instrucciones -> empty .)
    CADENA          reduce using rule 4 (instrucciones -> empty .)
    CHARACTER       reduce using rule 4 (instrucciones -> empty .)
    TRUE            reduce using rule 4 (instrucciones -> empty .)
    FALSE           reduce using rule 4 (instrucciones -> empty .)
    BREAK           reduce using rule 4 (instrucciones -> empty .)
    CONTINUE        reduce using rule 4 (instrucciones -> empty .)
    $end            reduce using rule 4 (instrucciones -> empty .)
    LLAVDER         reduce using rule 4 (instrucciones -> empty .)
    PTCOMA          reduce using rule 4 (instrucciones -> empty .)
    DEFAULT         reduce using rule 4 (instrucciones -> empty .)
    CASE            reduce using rule 4 (instrucciones -> empty .)


state 5

    (5) instruccion -> func_main .

    MAIN            reduce using rule 5 (instruccion -> func_main .)
    FUNC            reduce using rule 5 (instruccion -> func_main .)
    ID              reduce using rule 5 (instruccion -> func_main .)
    RETURN          reduce using rule 5 (instruccion -> func_main .)
    PRINT           reduce using rule 5 (instruccion -> func_main .)
    VAR             reduce using rule 5 (instruccion -> func_main .)
    WHILE           reduce using rule 5 (instruccion -> func_main .)
    IF              reduce using rule 5 (instruccion -> func_main .)
    SWITCH          reduce using rule 5 (instruccion -> func_main .)
    FOR             reduce using rule 5 (instruccion -> func_main .)
    NULL            reduce using rule 5 (instruccion -> func_main .)
    MENOS           reduce using rule 5 (instruccion -> func_main .)
    NOT             reduce using rule 5 (instruccion -> func_main .)
    PARIZQ          reduce using rule 5 (instruccion -> func_main .)
    ENTERO          reduce using rule 5 (instruccion -> func_main .)
    DECIMAL         reduce using rule 5 (instruccion -> func_main .)
    CADENA          reduce using rule 5 (instruccion -> func_main .)
    CHARACTER       reduce using rule 5 (instruccion -> func_main .)
    TRUE            reduce using rule 5 (instruccion -> func_main .)
    FALSE           reduce using rule 5 (instruccion -> func_main .)
    BREAK           reduce using rule 5 (instruccion -> func_main .)
    CONTINUE        reduce using rule 5 (instruccion -> func_main .)
    $end            reduce using rule 5 (instruccion -> func_main .)
    LLAVDER         reduce using rule 5 (instruccion -> func_main .)
    PTCOMA          reduce using rule 5 (instruccion -> func_main .)
    DEFAULT         reduce using rule 5 (instruccion -> func_main .)
    CASE            reduce using rule 5 (instruccion -> func_main .)


state 6

    (6) instruccion -> funct_instr .

    MAIN            reduce using rule 6 (instruccion -> funct_instr .)
    FUNC            reduce using rule 6 (instruccion -> funct_instr .)
    ID              reduce using rule 6 (instruccion -> funct_instr .)
    RETURN          reduce using rule 6 (instruccion -> funct_instr .)
    PRINT           reduce using rule 6 (instruccion -> funct_instr .)
    VAR             reduce using rule 6 (instruccion -> funct_instr .)
    WHILE           reduce using rule 6 (instruccion -> funct_instr .)
    IF              reduce using rule 6 (instruccion -> funct_instr .)
    SWITCH          reduce using rule 6 (instruccion -> funct_instr .)
    FOR             reduce using rule 6 (instruccion -> funct_instr .)
    NULL            reduce using rule 6 (instruccion -> funct_instr .)
    MENOS           reduce using rule 6 (instruccion -> funct_instr .)
    NOT             reduce using rule 6 (instruccion -> funct_instr .)
    PARIZQ          reduce using rule 6 (instruccion -> funct_instr .)
    ENTERO          reduce using rule 6 (instruccion -> funct_instr .)
    DECIMAL         reduce using rule 6 (instruccion -> funct_instr .)
    CADENA          reduce using rule 6 (instruccion -> funct_instr .)
    CHARACTER       reduce using rule 6 (instruccion -> funct_instr .)
    TRUE            reduce using rule 6 (instruccion -> funct_instr .)
    FALSE           reduce using rule 6 (instruccion -> funct_instr .)
    BREAK           reduce using rule 6 (instruccion -> funct_instr .)
    CONTINUE        reduce using rule 6 (instruccion -> funct_instr .)
    $end            reduce using rule 6 (instruccion -> funct_instr .)
    LLAVDER         reduce using rule 6 (instruccion -> funct_instr .)
    PTCOMA          reduce using rule 6 (instruccion -> funct_instr .)
    DEFAULT         reduce using rule 6 (instruccion -> funct_instr .)
    CASE            reduce using rule 6 (instruccion -> funct_instr .)


state 7

    (7) instruccion -> call_instr .
    (80) expresion -> call_instr .

  ! reduce/reduce conflict for MENOS resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for MAIN resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for FUNC resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for ID resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for RETURN resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for PRINT resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for VAR resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for WHILE resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for IF resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for SWITCH resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for FOR resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for NULL resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for NOT resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for PARIZQ resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for ENTERO resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for CADENA resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for CHARACTER resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for TRUE resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for FALSE resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for BREAK resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for $end resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for LLAVDER resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for PTCOMA resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 7 (instruccion -> call_instr .)
  ! reduce/reduce conflict for CASE resolved using rule 7 (instruccion -> call_instr .)
    MAIN            reduce using rule 7 (instruccion -> call_instr .)
    FUNC            reduce using rule 7 (instruccion -> call_instr .)
    ID              reduce using rule 7 (instruccion -> call_instr .)
    RETURN          reduce using rule 7 (instruccion -> call_instr .)
    PRINT           reduce using rule 7 (instruccion -> call_instr .)
    VAR             reduce using rule 7 (instruccion -> call_instr .)
    WHILE           reduce using rule 7 (instruccion -> call_instr .)
    IF              reduce using rule 7 (instruccion -> call_instr .)
    SWITCH          reduce using rule 7 (instruccion -> call_instr .)
    FOR             reduce using rule 7 (instruccion -> call_instr .)
    NULL            reduce using rule 7 (instruccion -> call_instr .)
    MENOS           reduce using rule 7 (instruccion -> call_instr .)
    NOT             reduce using rule 7 (instruccion -> call_instr .)
    PARIZQ          reduce using rule 7 (instruccion -> call_instr .)
    ENTERO          reduce using rule 7 (instruccion -> call_instr .)
    DECIMAL         reduce using rule 7 (instruccion -> call_instr .)
    CADENA          reduce using rule 7 (instruccion -> call_instr .)
    CHARACTER       reduce using rule 7 (instruccion -> call_instr .)
    TRUE            reduce using rule 7 (instruccion -> call_instr .)
    FALSE           reduce using rule 7 (instruccion -> call_instr .)
    BREAK           reduce using rule 7 (instruccion -> call_instr .)
    CONTINUE        reduce using rule 7 (instruccion -> call_instr .)
    $end            reduce using rule 7 (instruccion -> call_instr .)
    LLAVDER         reduce using rule 7 (instruccion -> call_instr .)
    PTCOMA          reduce using rule 7 (instruccion -> call_instr .)
    DEFAULT         reduce using rule 7 (instruccion -> call_instr .)
    CASE            reduce using rule 7 (instruccion -> call_instr .)
    INCREMENT       reduce using rule 80 (expresion -> call_instr .)
    DECREMENT       reduce using rule 80 (expresion -> call_instr .)
    MAS             reduce using rule 80 (expresion -> call_instr .)
    POR             reduce using rule 80 (expresion -> call_instr .)
    DIVIDIDO        reduce using rule 80 (expresion -> call_instr .)
    ELEVADO         reduce using rule 80 (expresion -> call_instr .)
    MOD             reduce using rule 80 (expresion -> call_instr .)
    AND             reduce using rule 80 (expresion -> call_instr .)
    OR              reduce using rule 80 (expresion -> call_instr .)
    MAYQUE          reduce using rule 80 (expresion -> call_instr .)
    MENQUE          reduce using rule 80 (expresion -> call_instr .)
    MAYIGUALQUE     reduce using rule 80 (expresion -> call_instr .)
    MENIGUALQUE     reduce using rule 80 (expresion -> call_instr .)
    IGUALQUE        reduce using rule 80 (expresion -> call_instr .)
    NIGUALQUE       reduce using rule 80 (expresion -> call_instr .)

  ! MENOS           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! MAIN            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! FUNC            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! ID              [ reduce using rule 80 (expresion -> call_instr .) ]
  ! RETURN          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! PRINT           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! VAR             [ reduce using rule 80 (expresion -> call_instr .) ]
  ! WHILE           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! IF              [ reduce using rule 80 (expresion -> call_instr .) ]
  ! SWITCH          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! FOR             [ reduce using rule 80 (expresion -> call_instr .) ]
  ! NULL            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! NOT             [ reduce using rule 80 (expresion -> call_instr .) ]
  ! PARIZQ          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! ENTERO          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! DECIMAL         [ reduce using rule 80 (expresion -> call_instr .) ]
  ! CADENA          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! CHARACTER       [ reduce using rule 80 (expresion -> call_instr .) ]
  ! TRUE            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! FALSE           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! BREAK           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! CONTINUE        [ reduce using rule 80 (expresion -> call_instr .) ]
  ! $end            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! LLAVDER         [ reduce using rule 80 (expresion -> call_instr .) ]
  ! PTCOMA          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! DEFAULT         [ reduce using rule 80 (expresion -> call_instr .) ]
  ! CASE            [ reduce using rule 80 (expresion -> call_instr .) ]


state 8

    (8) instruccion -> return_instr .

    MAIN            reduce using rule 8 (instruccion -> return_instr .)
    FUNC            reduce using rule 8 (instruccion -> return_instr .)
    ID              reduce using rule 8 (instruccion -> return_instr .)
    RETURN          reduce using rule 8 (instruccion -> return_instr .)
    PRINT           reduce using rule 8 (instruccion -> return_instr .)
    VAR             reduce using rule 8 (instruccion -> return_instr .)
    WHILE           reduce using rule 8 (instruccion -> return_instr .)
    IF              reduce using rule 8 (instruccion -> return_instr .)
    SWITCH          reduce using rule 8 (instruccion -> return_instr .)
    FOR             reduce using rule 8 (instruccion -> return_instr .)
    NULL            reduce using rule 8 (instruccion -> return_instr .)
    MENOS           reduce using rule 8 (instruccion -> return_instr .)
    NOT             reduce using rule 8 (instruccion -> return_instr .)
    PARIZQ          reduce using rule 8 (instruccion -> return_instr .)
    ENTERO          reduce using rule 8 (instruccion -> return_instr .)
    DECIMAL         reduce using rule 8 (instruccion -> return_instr .)
    CADENA          reduce using rule 8 (instruccion -> return_instr .)
    CHARACTER       reduce using rule 8 (instruccion -> return_instr .)
    TRUE            reduce using rule 8 (instruccion -> return_instr .)
    FALSE           reduce using rule 8 (instruccion -> return_instr .)
    BREAK           reduce using rule 8 (instruccion -> return_instr .)
    CONTINUE        reduce using rule 8 (instruccion -> return_instr .)
    $end            reduce using rule 8 (instruccion -> return_instr .)
    LLAVDER         reduce using rule 8 (instruccion -> return_instr .)
    PTCOMA          reduce using rule 8 (instruccion -> return_instr .)
    DEFAULT         reduce using rule 8 (instruccion -> return_instr .)
    CASE            reduce using rule 8 (instruccion -> return_instr .)


state 9

    (9) instruccion -> imprimir_instr .

    MAIN            reduce using rule 9 (instruccion -> imprimir_instr .)
    FUNC            reduce using rule 9 (instruccion -> imprimir_instr .)
    ID              reduce using rule 9 (instruccion -> imprimir_instr .)
    RETURN          reduce using rule 9 (instruccion -> imprimir_instr .)
    PRINT           reduce using rule 9 (instruccion -> imprimir_instr .)
    VAR             reduce using rule 9 (instruccion -> imprimir_instr .)
    WHILE           reduce using rule 9 (instruccion -> imprimir_instr .)
    IF              reduce using rule 9 (instruccion -> imprimir_instr .)
    SWITCH          reduce using rule 9 (instruccion -> imprimir_instr .)
    FOR             reduce using rule 9 (instruccion -> imprimir_instr .)
    NULL            reduce using rule 9 (instruccion -> imprimir_instr .)
    MENOS           reduce using rule 9 (instruccion -> imprimir_instr .)
    NOT             reduce using rule 9 (instruccion -> imprimir_instr .)
    PARIZQ          reduce using rule 9 (instruccion -> imprimir_instr .)
    ENTERO          reduce using rule 9 (instruccion -> imprimir_instr .)
    DECIMAL         reduce using rule 9 (instruccion -> imprimir_instr .)
    CADENA          reduce using rule 9 (instruccion -> imprimir_instr .)
    CHARACTER       reduce using rule 9 (instruccion -> imprimir_instr .)
    TRUE            reduce using rule 9 (instruccion -> imprimir_instr .)
    FALSE           reduce using rule 9 (instruccion -> imprimir_instr .)
    BREAK           reduce using rule 9 (instruccion -> imprimir_instr .)
    CONTINUE        reduce using rule 9 (instruccion -> imprimir_instr .)
    $end            reduce using rule 9 (instruccion -> imprimir_instr .)
    LLAVDER         reduce using rule 9 (instruccion -> imprimir_instr .)
    PTCOMA          reduce using rule 9 (instruccion -> imprimir_instr .)
    DEFAULT         reduce using rule 9 (instruccion -> imprimir_instr .)
    CASE            reduce using rule 9 (instruccion -> imprimir_instr .)


state 10

    (10) instruccion -> definicion_instr .

    MAIN            reduce using rule 10 (instruccion -> definicion_instr .)
    FUNC            reduce using rule 10 (instruccion -> definicion_instr .)
    ID              reduce using rule 10 (instruccion -> definicion_instr .)
    RETURN          reduce using rule 10 (instruccion -> definicion_instr .)
    PRINT           reduce using rule 10 (instruccion -> definicion_instr .)
    VAR             reduce using rule 10 (instruccion -> definicion_instr .)
    WHILE           reduce using rule 10 (instruccion -> definicion_instr .)
    IF              reduce using rule 10 (instruccion -> definicion_instr .)
    SWITCH          reduce using rule 10 (instruccion -> definicion_instr .)
    FOR             reduce using rule 10 (instruccion -> definicion_instr .)
    NULL            reduce using rule 10 (instruccion -> definicion_instr .)
    MENOS           reduce using rule 10 (instruccion -> definicion_instr .)
    NOT             reduce using rule 10 (instruccion -> definicion_instr .)
    PARIZQ          reduce using rule 10 (instruccion -> definicion_instr .)
    ENTERO          reduce using rule 10 (instruccion -> definicion_instr .)
    DECIMAL         reduce using rule 10 (instruccion -> definicion_instr .)
    CADENA          reduce using rule 10 (instruccion -> definicion_instr .)
    CHARACTER       reduce using rule 10 (instruccion -> definicion_instr .)
    TRUE            reduce using rule 10 (instruccion -> definicion_instr .)
    FALSE           reduce using rule 10 (instruccion -> definicion_instr .)
    BREAK           reduce using rule 10 (instruccion -> definicion_instr .)
    CONTINUE        reduce using rule 10 (instruccion -> definicion_instr .)
    $end            reduce using rule 10 (instruccion -> definicion_instr .)
    LLAVDER         reduce using rule 10 (instruccion -> definicion_instr .)
    PTCOMA          reduce using rule 10 (instruccion -> definicion_instr .)
    DEFAULT         reduce using rule 10 (instruccion -> definicion_instr .)
    CASE            reduce using rule 10 (instruccion -> definicion_instr .)


state 11

    (11) instruccion -> asignacion_instr .

    MAIN            reduce using rule 11 (instruccion -> asignacion_instr .)
    FUNC            reduce using rule 11 (instruccion -> asignacion_instr .)
    ID              reduce using rule 11 (instruccion -> asignacion_instr .)
    RETURN          reduce using rule 11 (instruccion -> asignacion_instr .)
    PRINT           reduce using rule 11 (instruccion -> asignacion_instr .)
    VAR             reduce using rule 11 (instruccion -> asignacion_instr .)
    WHILE           reduce using rule 11 (instruccion -> asignacion_instr .)
    IF              reduce using rule 11 (instruccion -> asignacion_instr .)
    SWITCH          reduce using rule 11 (instruccion -> asignacion_instr .)
    FOR             reduce using rule 11 (instruccion -> asignacion_instr .)
    NULL            reduce using rule 11 (instruccion -> asignacion_instr .)
    MENOS           reduce using rule 11 (instruccion -> asignacion_instr .)
    NOT             reduce using rule 11 (instruccion -> asignacion_instr .)
    PARIZQ          reduce using rule 11 (instruccion -> asignacion_instr .)
    ENTERO          reduce using rule 11 (instruccion -> asignacion_instr .)
    DECIMAL         reduce using rule 11 (instruccion -> asignacion_instr .)
    CADENA          reduce using rule 11 (instruccion -> asignacion_instr .)
    CHARACTER       reduce using rule 11 (instruccion -> asignacion_instr .)
    TRUE            reduce using rule 11 (instruccion -> asignacion_instr .)
    FALSE           reduce using rule 11 (instruccion -> asignacion_instr .)
    BREAK           reduce using rule 11 (instruccion -> asignacion_instr .)
    CONTINUE        reduce using rule 11 (instruccion -> asignacion_instr .)
    $end            reduce using rule 11 (instruccion -> asignacion_instr .)
    LLAVDER         reduce using rule 11 (instruccion -> asignacion_instr .)
    PTCOMA          reduce using rule 11 (instruccion -> asignacion_instr .)
    DEFAULT         reduce using rule 11 (instruccion -> asignacion_instr .)
    CASE            reduce using rule 11 (instruccion -> asignacion_instr .)


state 12

    (12) instruccion -> def_asig_instr .

    MAIN            reduce using rule 12 (instruccion -> def_asig_instr .)
    FUNC            reduce using rule 12 (instruccion -> def_asig_instr .)
    ID              reduce using rule 12 (instruccion -> def_asig_instr .)
    RETURN          reduce using rule 12 (instruccion -> def_asig_instr .)
    PRINT           reduce using rule 12 (instruccion -> def_asig_instr .)
    VAR             reduce using rule 12 (instruccion -> def_asig_instr .)
    WHILE           reduce using rule 12 (instruccion -> def_asig_instr .)
    IF              reduce using rule 12 (instruccion -> def_asig_instr .)
    SWITCH          reduce using rule 12 (instruccion -> def_asig_instr .)
    FOR             reduce using rule 12 (instruccion -> def_asig_instr .)
    NULL            reduce using rule 12 (instruccion -> def_asig_instr .)
    MENOS           reduce using rule 12 (instruccion -> def_asig_instr .)
    NOT             reduce using rule 12 (instruccion -> def_asig_instr .)
    PARIZQ          reduce using rule 12 (instruccion -> def_asig_instr .)
    ENTERO          reduce using rule 12 (instruccion -> def_asig_instr .)
    DECIMAL         reduce using rule 12 (instruccion -> def_asig_instr .)
    CADENA          reduce using rule 12 (instruccion -> def_asig_instr .)
    CHARACTER       reduce using rule 12 (instruccion -> def_asig_instr .)
    TRUE            reduce using rule 12 (instruccion -> def_asig_instr .)
    FALSE           reduce using rule 12 (instruccion -> def_asig_instr .)
    BREAK           reduce using rule 12 (instruccion -> def_asig_instr .)
    CONTINUE        reduce using rule 12 (instruccion -> def_asig_instr .)
    $end            reduce using rule 12 (instruccion -> def_asig_instr .)
    LLAVDER         reduce using rule 12 (instruccion -> def_asig_instr .)
    PTCOMA          reduce using rule 12 (instruccion -> def_asig_instr .)
    DEFAULT         reduce using rule 12 (instruccion -> def_asig_instr .)
    CASE            reduce using rule 12 (instruccion -> def_asig_instr .)


state 13

    (13) instruccion -> while_instr .

    MAIN            reduce using rule 13 (instruccion -> while_instr .)
    FUNC            reduce using rule 13 (instruccion -> while_instr .)
    ID              reduce using rule 13 (instruccion -> while_instr .)
    RETURN          reduce using rule 13 (instruccion -> while_instr .)
    PRINT           reduce using rule 13 (instruccion -> while_instr .)
    VAR             reduce using rule 13 (instruccion -> while_instr .)
    WHILE           reduce using rule 13 (instruccion -> while_instr .)
    IF              reduce using rule 13 (instruccion -> while_instr .)
    SWITCH          reduce using rule 13 (instruccion -> while_instr .)
    FOR             reduce using rule 13 (instruccion -> while_instr .)
    NULL            reduce using rule 13 (instruccion -> while_instr .)
    MENOS           reduce using rule 13 (instruccion -> while_instr .)
    NOT             reduce using rule 13 (instruccion -> while_instr .)
    PARIZQ          reduce using rule 13 (instruccion -> while_instr .)
    ENTERO          reduce using rule 13 (instruccion -> while_instr .)
    DECIMAL         reduce using rule 13 (instruccion -> while_instr .)
    CADENA          reduce using rule 13 (instruccion -> while_instr .)
    CHARACTER       reduce using rule 13 (instruccion -> while_instr .)
    TRUE            reduce using rule 13 (instruccion -> while_instr .)
    FALSE           reduce using rule 13 (instruccion -> while_instr .)
    BREAK           reduce using rule 13 (instruccion -> while_instr .)
    CONTINUE        reduce using rule 13 (instruccion -> while_instr .)
    $end            reduce using rule 13 (instruccion -> while_instr .)
    LLAVDER         reduce using rule 13 (instruccion -> while_instr .)
    PTCOMA          reduce using rule 13 (instruccion -> while_instr .)
    DEFAULT         reduce using rule 13 (instruccion -> while_instr .)
    CASE            reduce using rule 13 (instruccion -> while_instr .)


state 14

    (14) instruccion -> if_instr .

    MAIN            reduce using rule 14 (instruccion -> if_instr .)
    FUNC            reduce using rule 14 (instruccion -> if_instr .)
    ID              reduce using rule 14 (instruccion -> if_instr .)
    RETURN          reduce using rule 14 (instruccion -> if_instr .)
    PRINT           reduce using rule 14 (instruccion -> if_instr .)
    VAR             reduce using rule 14 (instruccion -> if_instr .)
    WHILE           reduce using rule 14 (instruccion -> if_instr .)
    IF              reduce using rule 14 (instruccion -> if_instr .)
    SWITCH          reduce using rule 14 (instruccion -> if_instr .)
    FOR             reduce using rule 14 (instruccion -> if_instr .)
    NULL            reduce using rule 14 (instruccion -> if_instr .)
    MENOS           reduce using rule 14 (instruccion -> if_instr .)
    NOT             reduce using rule 14 (instruccion -> if_instr .)
    PARIZQ          reduce using rule 14 (instruccion -> if_instr .)
    ENTERO          reduce using rule 14 (instruccion -> if_instr .)
    DECIMAL         reduce using rule 14 (instruccion -> if_instr .)
    CADENA          reduce using rule 14 (instruccion -> if_instr .)
    CHARACTER       reduce using rule 14 (instruccion -> if_instr .)
    TRUE            reduce using rule 14 (instruccion -> if_instr .)
    FALSE           reduce using rule 14 (instruccion -> if_instr .)
    BREAK           reduce using rule 14 (instruccion -> if_instr .)
    CONTINUE        reduce using rule 14 (instruccion -> if_instr .)
    $end            reduce using rule 14 (instruccion -> if_instr .)
    LLAVDER         reduce using rule 14 (instruccion -> if_instr .)
    PTCOMA          reduce using rule 14 (instruccion -> if_instr .)
    DEFAULT         reduce using rule 14 (instruccion -> if_instr .)
    CASE            reduce using rule 14 (instruccion -> if_instr .)


state 15

    (15) instruccion -> switch_instr .

    MAIN            reduce using rule 15 (instruccion -> switch_instr .)
    FUNC            reduce using rule 15 (instruccion -> switch_instr .)
    ID              reduce using rule 15 (instruccion -> switch_instr .)
    RETURN          reduce using rule 15 (instruccion -> switch_instr .)
    PRINT           reduce using rule 15 (instruccion -> switch_instr .)
    VAR             reduce using rule 15 (instruccion -> switch_instr .)
    WHILE           reduce using rule 15 (instruccion -> switch_instr .)
    IF              reduce using rule 15 (instruccion -> switch_instr .)
    SWITCH          reduce using rule 15 (instruccion -> switch_instr .)
    FOR             reduce using rule 15 (instruccion -> switch_instr .)
    NULL            reduce using rule 15 (instruccion -> switch_instr .)
    MENOS           reduce using rule 15 (instruccion -> switch_instr .)
    NOT             reduce using rule 15 (instruccion -> switch_instr .)
    PARIZQ          reduce using rule 15 (instruccion -> switch_instr .)
    ENTERO          reduce using rule 15 (instruccion -> switch_instr .)
    DECIMAL         reduce using rule 15 (instruccion -> switch_instr .)
    CADENA          reduce using rule 15 (instruccion -> switch_instr .)
    CHARACTER       reduce using rule 15 (instruccion -> switch_instr .)
    TRUE            reduce using rule 15 (instruccion -> switch_instr .)
    FALSE           reduce using rule 15 (instruccion -> switch_instr .)
    BREAK           reduce using rule 15 (instruccion -> switch_instr .)
    CONTINUE        reduce using rule 15 (instruccion -> switch_instr .)
    $end            reduce using rule 15 (instruccion -> switch_instr .)
    LLAVDER         reduce using rule 15 (instruccion -> switch_instr .)
    PTCOMA          reduce using rule 15 (instruccion -> switch_instr .)
    DEFAULT         reduce using rule 15 (instruccion -> switch_instr .)
    CASE            reduce using rule 15 (instruccion -> switch_instr .)


state 16

    (16) instruccion -> for_instr .

    MAIN            reduce using rule 16 (instruccion -> for_instr .)
    FUNC            reduce using rule 16 (instruccion -> for_instr .)
    ID              reduce using rule 16 (instruccion -> for_instr .)
    RETURN          reduce using rule 16 (instruccion -> for_instr .)
    PRINT           reduce using rule 16 (instruccion -> for_instr .)
    VAR             reduce using rule 16 (instruccion -> for_instr .)
    WHILE           reduce using rule 16 (instruccion -> for_instr .)
    IF              reduce using rule 16 (instruccion -> for_instr .)
    SWITCH          reduce using rule 16 (instruccion -> for_instr .)
    FOR             reduce using rule 16 (instruccion -> for_instr .)
    NULL            reduce using rule 16 (instruccion -> for_instr .)
    MENOS           reduce using rule 16 (instruccion -> for_instr .)
    NOT             reduce using rule 16 (instruccion -> for_instr .)
    PARIZQ          reduce using rule 16 (instruccion -> for_instr .)
    ENTERO          reduce using rule 16 (instruccion -> for_instr .)
    DECIMAL         reduce using rule 16 (instruccion -> for_instr .)
    CADENA          reduce using rule 16 (instruccion -> for_instr .)
    CHARACTER       reduce using rule 16 (instruccion -> for_instr .)
    TRUE            reduce using rule 16 (instruccion -> for_instr .)
    FALSE           reduce using rule 16 (instruccion -> for_instr .)
    BREAK           reduce using rule 16 (instruccion -> for_instr .)
    CONTINUE        reduce using rule 16 (instruccion -> for_instr .)
    $end            reduce using rule 16 (instruccion -> for_instr .)
    LLAVDER         reduce using rule 16 (instruccion -> for_instr .)
    PTCOMA          reduce using rule 16 (instruccion -> for_instr .)
    DEFAULT         reduce using rule 16 (instruccion -> for_instr .)
    CASE            reduce using rule 16 (instruccion -> for_instr .)


state 17

    (17) instruccion -> expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

  ! shift/reduce conflict for MENOS resolved as shift
    MAIN            reduce using rule 17 (instruccion -> expresion .)
    FUNC            reduce using rule 17 (instruccion -> expresion .)
    ID              reduce using rule 17 (instruccion -> expresion .)
    RETURN          reduce using rule 17 (instruccion -> expresion .)
    PRINT           reduce using rule 17 (instruccion -> expresion .)
    VAR             reduce using rule 17 (instruccion -> expresion .)
    WHILE           reduce using rule 17 (instruccion -> expresion .)
    IF              reduce using rule 17 (instruccion -> expresion .)
    SWITCH          reduce using rule 17 (instruccion -> expresion .)
    FOR             reduce using rule 17 (instruccion -> expresion .)
    NULL            reduce using rule 17 (instruccion -> expresion .)
    NOT             reduce using rule 17 (instruccion -> expresion .)
    PARIZQ          reduce using rule 17 (instruccion -> expresion .)
    ENTERO          reduce using rule 17 (instruccion -> expresion .)
    DECIMAL         reduce using rule 17 (instruccion -> expresion .)
    CADENA          reduce using rule 17 (instruccion -> expresion .)
    CHARACTER       reduce using rule 17 (instruccion -> expresion .)
    TRUE            reduce using rule 17 (instruccion -> expresion .)
    FALSE           reduce using rule 17 (instruccion -> expresion .)
    BREAK           reduce using rule 17 (instruccion -> expresion .)
    CONTINUE        reduce using rule 17 (instruccion -> expresion .)
    $end            reduce using rule 17 (instruccion -> expresion .)
    LLAVDER         reduce using rule 17 (instruccion -> expresion .)
    PTCOMA          reduce using rule 17 (instruccion -> expresion .)
    DEFAULT         reduce using rule 17 (instruccion -> expresion .)
    CASE            reduce using rule 17 (instruccion -> expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58

  ! MENOS           [ reduce using rule 17 (instruccion -> expresion .) ]


state 18

    (18) instruccion -> break_instr .

    MAIN            reduce using rule 18 (instruccion -> break_instr .)
    FUNC            reduce using rule 18 (instruccion -> break_instr .)
    ID              reduce using rule 18 (instruccion -> break_instr .)
    RETURN          reduce using rule 18 (instruccion -> break_instr .)
    PRINT           reduce using rule 18 (instruccion -> break_instr .)
    VAR             reduce using rule 18 (instruccion -> break_instr .)
    WHILE           reduce using rule 18 (instruccion -> break_instr .)
    IF              reduce using rule 18 (instruccion -> break_instr .)
    SWITCH          reduce using rule 18 (instruccion -> break_instr .)
    FOR             reduce using rule 18 (instruccion -> break_instr .)
    NULL            reduce using rule 18 (instruccion -> break_instr .)
    MENOS           reduce using rule 18 (instruccion -> break_instr .)
    NOT             reduce using rule 18 (instruccion -> break_instr .)
    PARIZQ          reduce using rule 18 (instruccion -> break_instr .)
    ENTERO          reduce using rule 18 (instruccion -> break_instr .)
    DECIMAL         reduce using rule 18 (instruccion -> break_instr .)
    CADENA          reduce using rule 18 (instruccion -> break_instr .)
    CHARACTER       reduce using rule 18 (instruccion -> break_instr .)
    TRUE            reduce using rule 18 (instruccion -> break_instr .)
    FALSE           reduce using rule 18 (instruccion -> break_instr .)
    BREAK           reduce using rule 18 (instruccion -> break_instr .)
    CONTINUE        reduce using rule 18 (instruccion -> break_instr .)
    $end            reduce using rule 18 (instruccion -> break_instr .)
    LLAVDER         reduce using rule 18 (instruccion -> break_instr .)
    PTCOMA          reduce using rule 18 (instruccion -> break_instr .)
    DEFAULT         reduce using rule 18 (instruccion -> break_instr .)
    CASE            reduce using rule 18 (instruccion -> break_instr .)


state 19

    (19) instruccion -> continue_instr .

    MAIN            reduce using rule 19 (instruccion -> continue_instr .)
    FUNC            reduce using rule 19 (instruccion -> continue_instr .)
    ID              reduce using rule 19 (instruccion -> continue_instr .)
    RETURN          reduce using rule 19 (instruccion -> continue_instr .)
    PRINT           reduce using rule 19 (instruccion -> continue_instr .)
    VAR             reduce using rule 19 (instruccion -> continue_instr .)
    WHILE           reduce using rule 19 (instruccion -> continue_instr .)
    IF              reduce using rule 19 (instruccion -> continue_instr .)
    SWITCH          reduce using rule 19 (instruccion -> continue_instr .)
    FOR             reduce using rule 19 (instruccion -> continue_instr .)
    NULL            reduce using rule 19 (instruccion -> continue_instr .)
    MENOS           reduce using rule 19 (instruccion -> continue_instr .)
    NOT             reduce using rule 19 (instruccion -> continue_instr .)
    PARIZQ          reduce using rule 19 (instruccion -> continue_instr .)
    ENTERO          reduce using rule 19 (instruccion -> continue_instr .)
    DECIMAL         reduce using rule 19 (instruccion -> continue_instr .)
    CADENA          reduce using rule 19 (instruccion -> continue_instr .)
    CHARACTER       reduce using rule 19 (instruccion -> continue_instr .)
    TRUE            reduce using rule 19 (instruccion -> continue_instr .)
    FALSE           reduce using rule 19 (instruccion -> continue_instr .)
    BREAK           reduce using rule 19 (instruccion -> continue_instr .)
    CONTINUE        reduce using rule 19 (instruccion -> continue_instr .)
    $end            reduce using rule 19 (instruccion -> continue_instr .)
    LLAVDER         reduce using rule 19 (instruccion -> continue_instr .)
    PTCOMA          reduce using rule 19 (instruccion -> continue_instr .)
    DEFAULT         reduce using rule 19 (instruccion -> continue_instr .)
    CASE            reduce using rule 19 (instruccion -> continue_instr .)


state 20

    (23) func_main -> MAIN . PARIZQ PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 59


state 21

    (66) expresion -> PARIZQ . expresion PARDER
    (79) expresion -> PARIZQ . expresion_data_type PARDER expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (74) expresion_data_type -> . INT
    (75) expresion_data_type -> . DOUBLE
    (76) expresion_data_type -> . STRING
    (77) expresion_data_type -> . CHAR
    (78) expresion_data_type -> . BOOLEAN
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    INT             shift and go to state 64
    DOUBLE          shift and go to state 65
    STRING          shift and go to state 66
    CHAR            shift and go to state 67
    BOOLEAN         shift and go to state 68

    expresion                      shift and go to state 60
    expresion_data_type            shift and go to state 61
    call_instr                     shift and go to state 63

state 22

    (81) funct_instr -> FUNC . ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> FUNC . ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER

    ID              shift and go to state 69


state 23

    (83) call_instr -> ID . PARIZQ PARDER def_instr_prima
    (84) call_instr -> ID . PARIZQ params_call PARDER def_instr_prima
    (27) asignacion_instr -> ID . IGUAL expresion def_instr_prima
    (67) expresion -> ID .

  ! shift/reduce conflict for PARIZQ resolved as shift
    PARIZQ          shift and go to state 70
    IGUAL           shift and go to state 71
    INCREMENT       reduce using rule 67 (expresion -> ID .)
    DECREMENT       reduce using rule 67 (expresion -> ID .)
    MAS             reduce using rule 67 (expresion -> ID .)
    MENOS           reduce using rule 67 (expresion -> ID .)
    POR             reduce using rule 67 (expresion -> ID .)
    DIVIDIDO        reduce using rule 67 (expresion -> ID .)
    ELEVADO         reduce using rule 67 (expresion -> ID .)
    MOD             reduce using rule 67 (expresion -> ID .)
    AND             reduce using rule 67 (expresion -> ID .)
    OR              reduce using rule 67 (expresion -> ID .)
    MAYQUE          reduce using rule 67 (expresion -> ID .)
    MENQUE          reduce using rule 67 (expresion -> ID .)
    MAYIGUALQUE     reduce using rule 67 (expresion -> ID .)
    MENIGUALQUE     reduce using rule 67 (expresion -> ID .)
    IGUALQUE        reduce using rule 67 (expresion -> ID .)
    NIGUALQUE       reduce using rule 67 (expresion -> ID .)
    MAIN            reduce using rule 67 (expresion -> ID .)
    FUNC            reduce using rule 67 (expresion -> ID .)
    ID              reduce using rule 67 (expresion -> ID .)
    RETURN          reduce using rule 67 (expresion -> ID .)
    PRINT           reduce using rule 67 (expresion -> ID .)
    VAR             reduce using rule 67 (expresion -> ID .)
    WHILE           reduce using rule 67 (expresion -> ID .)
    IF              reduce using rule 67 (expresion -> ID .)
    SWITCH          reduce using rule 67 (expresion -> ID .)
    FOR             reduce using rule 67 (expresion -> ID .)
    NULL            reduce using rule 67 (expresion -> ID .)
    NOT             reduce using rule 67 (expresion -> ID .)
    ENTERO          reduce using rule 67 (expresion -> ID .)
    DECIMAL         reduce using rule 67 (expresion -> ID .)
    CADENA          reduce using rule 67 (expresion -> ID .)
    CHARACTER       reduce using rule 67 (expresion -> ID .)
    TRUE            reduce using rule 67 (expresion -> ID .)
    FALSE           reduce using rule 67 (expresion -> ID .)
    BREAK           reduce using rule 67 (expresion -> ID .)
    CONTINUE        reduce using rule 67 (expresion -> ID .)
    $end            reduce using rule 67 (expresion -> ID .)
    LLAVDER         reduce using rule 67 (expresion -> ID .)
    PTCOMA          reduce using rule 67 (expresion -> ID .)
    DEFAULT         reduce using rule 67 (expresion -> ID .)
    CASE            reduce using rule 67 (expresion -> ID .)

  ! PARIZQ          [ reduce using rule 67 (expresion -> ID .) ]


state 24

    (91) return_instr -> RETURN . expresion def_instr_prima
    (92) return_instr -> RETURN . call_instr def_instr_prima
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 72
    call_instr                     shift and go to state 73

state 25

    (24) imprimir_instr -> PRINT . PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> PRINT . PARIZQ call_instr PARDER def_instr_prima

    PARIZQ          shift and go to state 74


state 26

    (26) definicion_instr -> VAR . ID def_instr_prima
    (28) def_asig_instr -> VAR . ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> VAR . ID IGUAL call_instr def_instr_prima

    ID              shift and go to state 75


state 27

    (33) while_instr -> WHILE . PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 76


state 28

    (30) if_instr -> IF . PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> IF . PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> IF . PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr

    PARIZQ          shift and go to state 77


state 29

    (36) switch_instr -> SWITCH . PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> SWITCH . PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> SWITCH . PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER

    PARIZQ          shift and go to state 78


state 30

    (43) for_instr -> FOR . PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 79


state 31

    (47) expresion -> NULL .

    INCREMENT       reduce using rule 47 (expresion -> NULL .)
    DECREMENT       reduce using rule 47 (expresion -> NULL .)
    MAS             reduce using rule 47 (expresion -> NULL .)
    MENOS           reduce using rule 47 (expresion -> NULL .)
    POR             reduce using rule 47 (expresion -> NULL .)
    DIVIDIDO        reduce using rule 47 (expresion -> NULL .)
    ELEVADO         reduce using rule 47 (expresion -> NULL .)
    MOD             reduce using rule 47 (expresion -> NULL .)
    AND             reduce using rule 47 (expresion -> NULL .)
    OR              reduce using rule 47 (expresion -> NULL .)
    MAYQUE          reduce using rule 47 (expresion -> NULL .)
    MENQUE          reduce using rule 47 (expresion -> NULL .)
    MAYIGUALQUE     reduce using rule 47 (expresion -> NULL .)
    MENIGUALQUE     reduce using rule 47 (expresion -> NULL .)
    IGUALQUE        reduce using rule 47 (expresion -> NULL .)
    NIGUALQUE       reduce using rule 47 (expresion -> NULL .)
    MAIN            reduce using rule 47 (expresion -> NULL .)
    FUNC            reduce using rule 47 (expresion -> NULL .)
    ID              reduce using rule 47 (expresion -> NULL .)
    RETURN          reduce using rule 47 (expresion -> NULL .)
    PRINT           reduce using rule 47 (expresion -> NULL .)
    VAR             reduce using rule 47 (expresion -> NULL .)
    WHILE           reduce using rule 47 (expresion -> NULL .)
    IF              reduce using rule 47 (expresion -> NULL .)
    SWITCH          reduce using rule 47 (expresion -> NULL .)
    FOR             reduce using rule 47 (expresion -> NULL .)
    NULL            reduce using rule 47 (expresion -> NULL .)
    NOT             reduce using rule 47 (expresion -> NULL .)
    PARIZQ          reduce using rule 47 (expresion -> NULL .)
    ENTERO          reduce using rule 47 (expresion -> NULL .)
    DECIMAL         reduce using rule 47 (expresion -> NULL .)
    CADENA          reduce using rule 47 (expresion -> NULL .)
    CHARACTER       reduce using rule 47 (expresion -> NULL .)
    TRUE            reduce using rule 47 (expresion -> NULL .)
    FALSE           reduce using rule 47 (expresion -> NULL .)
    BREAK           reduce using rule 47 (expresion -> NULL .)
    CONTINUE        reduce using rule 47 (expresion -> NULL .)
    $end            reduce using rule 47 (expresion -> NULL .)
    PARDER          reduce using rule 47 (expresion -> NULL .)
    PTCOMA          reduce using rule 47 (expresion -> NULL .)
    LLAVDER         reduce using rule 47 (expresion -> NULL .)
    DEFAULT         reduce using rule 47 (expresion -> NULL .)
    CASE            reduce using rule 47 (expresion -> NULL .)
    COMA            reduce using rule 47 (expresion -> NULL .)
    DOSPUNTOS       reduce using rule 47 (expresion -> NULL .)


state 32

    (64) expresion -> MENOS . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 80
    call_instr                     shift and go to state 63

state 33

    (65) expresion -> NOT . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 81
    call_instr                     shift and go to state 63

state 34

    (68) expresion -> ENTERO .

    INCREMENT       reduce using rule 68 (expresion -> ENTERO .)
    DECREMENT       reduce using rule 68 (expresion -> ENTERO .)
    MAS             reduce using rule 68 (expresion -> ENTERO .)
    MENOS           reduce using rule 68 (expresion -> ENTERO .)
    POR             reduce using rule 68 (expresion -> ENTERO .)
    DIVIDIDO        reduce using rule 68 (expresion -> ENTERO .)
    ELEVADO         reduce using rule 68 (expresion -> ENTERO .)
    MOD             reduce using rule 68 (expresion -> ENTERO .)
    AND             reduce using rule 68 (expresion -> ENTERO .)
    OR              reduce using rule 68 (expresion -> ENTERO .)
    MAYQUE          reduce using rule 68 (expresion -> ENTERO .)
    MENQUE          reduce using rule 68 (expresion -> ENTERO .)
    MAYIGUALQUE     reduce using rule 68 (expresion -> ENTERO .)
    MENIGUALQUE     reduce using rule 68 (expresion -> ENTERO .)
    IGUALQUE        reduce using rule 68 (expresion -> ENTERO .)
    NIGUALQUE       reduce using rule 68 (expresion -> ENTERO .)
    MAIN            reduce using rule 68 (expresion -> ENTERO .)
    FUNC            reduce using rule 68 (expresion -> ENTERO .)
    ID              reduce using rule 68 (expresion -> ENTERO .)
    RETURN          reduce using rule 68 (expresion -> ENTERO .)
    PRINT           reduce using rule 68 (expresion -> ENTERO .)
    VAR             reduce using rule 68 (expresion -> ENTERO .)
    WHILE           reduce using rule 68 (expresion -> ENTERO .)
    IF              reduce using rule 68 (expresion -> ENTERO .)
    SWITCH          reduce using rule 68 (expresion -> ENTERO .)
    FOR             reduce using rule 68 (expresion -> ENTERO .)
    NULL            reduce using rule 68 (expresion -> ENTERO .)
    NOT             reduce using rule 68 (expresion -> ENTERO .)
    PARIZQ          reduce using rule 68 (expresion -> ENTERO .)
    ENTERO          reduce using rule 68 (expresion -> ENTERO .)
    DECIMAL         reduce using rule 68 (expresion -> ENTERO .)
    CADENA          reduce using rule 68 (expresion -> ENTERO .)
    CHARACTER       reduce using rule 68 (expresion -> ENTERO .)
    TRUE            reduce using rule 68 (expresion -> ENTERO .)
    FALSE           reduce using rule 68 (expresion -> ENTERO .)
    BREAK           reduce using rule 68 (expresion -> ENTERO .)
    CONTINUE        reduce using rule 68 (expresion -> ENTERO .)
    $end            reduce using rule 68 (expresion -> ENTERO .)
    PARDER          reduce using rule 68 (expresion -> ENTERO .)
    PTCOMA          reduce using rule 68 (expresion -> ENTERO .)
    LLAVDER         reduce using rule 68 (expresion -> ENTERO .)
    DEFAULT         reduce using rule 68 (expresion -> ENTERO .)
    CASE            reduce using rule 68 (expresion -> ENTERO .)
    COMA            reduce using rule 68 (expresion -> ENTERO .)
    DOSPUNTOS       reduce using rule 68 (expresion -> ENTERO .)


state 35

    (69) expresion -> DECIMAL .

    INCREMENT       reduce using rule 69 (expresion -> DECIMAL .)
    DECREMENT       reduce using rule 69 (expresion -> DECIMAL .)
    MAS             reduce using rule 69 (expresion -> DECIMAL .)
    MENOS           reduce using rule 69 (expresion -> DECIMAL .)
    POR             reduce using rule 69 (expresion -> DECIMAL .)
    DIVIDIDO        reduce using rule 69 (expresion -> DECIMAL .)
    ELEVADO         reduce using rule 69 (expresion -> DECIMAL .)
    MOD             reduce using rule 69 (expresion -> DECIMAL .)
    AND             reduce using rule 69 (expresion -> DECIMAL .)
    OR              reduce using rule 69 (expresion -> DECIMAL .)
    MAYQUE          reduce using rule 69 (expresion -> DECIMAL .)
    MENQUE          reduce using rule 69 (expresion -> DECIMAL .)
    MAYIGUALQUE     reduce using rule 69 (expresion -> DECIMAL .)
    MENIGUALQUE     reduce using rule 69 (expresion -> DECIMAL .)
    IGUALQUE        reduce using rule 69 (expresion -> DECIMAL .)
    NIGUALQUE       reduce using rule 69 (expresion -> DECIMAL .)
    MAIN            reduce using rule 69 (expresion -> DECIMAL .)
    FUNC            reduce using rule 69 (expresion -> DECIMAL .)
    ID              reduce using rule 69 (expresion -> DECIMAL .)
    RETURN          reduce using rule 69 (expresion -> DECIMAL .)
    PRINT           reduce using rule 69 (expresion -> DECIMAL .)
    VAR             reduce using rule 69 (expresion -> DECIMAL .)
    WHILE           reduce using rule 69 (expresion -> DECIMAL .)
    IF              reduce using rule 69 (expresion -> DECIMAL .)
    SWITCH          reduce using rule 69 (expresion -> DECIMAL .)
    FOR             reduce using rule 69 (expresion -> DECIMAL .)
    NULL            reduce using rule 69 (expresion -> DECIMAL .)
    NOT             reduce using rule 69 (expresion -> DECIMAL .)
    PARIZQ          reduce using rule 69 (expresion -> DECIMAL .)
    ENTERO          reduce using rule 69 (expresion -> DECIMAL .)
    DECIMAL         reduce using rule 69 (expresion -> DECIMAL .)
    CADENA          reduce using rule 69 (expresion -> DECIMAL .)
    CHARACTER       reduce using rule 69 (expresion -> DECIMAL .)
    TRUE            reduce using rule 69 (expresion -> DECIMAL .)
    FALSE           reduce using rule 69 (expresion -> DECIMAL .)
    BREAK           reduce using rule 69 (expresion -> DECIMAL .)
    CONTINUE        reduce using rule 69 (expresion -> DECIMAL .)
    $end            reduce using rule 69 (expresion -> DECIMAL .)
    PARDER          reduce using rule 69 (expresion -> DECIMAL .)
    PTCOMA          reduce using rule 69 (expresion -> DECIMAL .)
    LLAVDER         reduce using rule 69 (expresion -> DECIMAL .)
    DEFAULT         reduce using rule 69 (expresion -> DECIMAL .)
    CASE            reduce using rule 69 (expresion -> DECIMAL .)
    COMA            reduce using rule 69 (expresion -> DECIMAL .)
    DOSPUNTOS       reduce using rule 69 (expresion -> DECIMAL .)


state 36

    (70) expresion -> CADENA .

    INCREMENT       reduce using rule 70 (expresion -> CADENA .)
    DECREMENT       reduce using rule 70 (expresion -> CADENA .)
    MAS             reduce using rule 70 (expresion -> CADENA .)
    MENOS           reduce using rule 70 (expresion -> CADENA .)
    POR             reduce using rule 70 (expresion -> CADENA .)
    DIVIDIDO        reduce using rule 70 (expresion -> CADENA .)
    ELEVADO         reduce using rule 70 (expresion -> CADENA .)
    MOD             reduce using rule 70 (expresion -> CADENA .)
    AND             reduce using rule 70 (expresion -> CADENA .)
    OR              reduce using rule 70 (expresion -> CADENA .)
    MAYQUE          reduce using rule 70 (expresion -> CADENA .)
    MENQUE          reduce using rule 70 (expresion -> CADENA .)
    MAYIGUALQUE     reduce using rule 70 (expresion -> CADENA .)
    MENIGUALQUE     reduce using rule 70 (expresion -> CADENA .)
    IGUALQUE        reduce using rule 70 (expresion -> CADENA .)
    NIGUALQUE       reduce using rule 70 (expresion -> CADENA .)
    MAIN            reduce using rule 70 (expresion -> CADENA .)
    FUNC            reduce using rule 70 (expresion -> CADENA .)
    ID              reduce using rule 70 (expresion -> CADENA .)
    RETURN          reduce using rule 70 (expresion -> CADENA .)
    PRINT           reduce using rule 70 (expresion -> CADENA .)
    VAR             reduce using rule 70 (expresion -> CADENA .)
    WHILE           reduce using rule 70 (expresion -> CADENA .)
    IF              reduce using rule 70 (expresion -> CADENA .)
    SWITCH          reduce using rule 70 (expresion -> CADENA .)
    FOR             reduce using rule 70 (expresion -> CADENA .)
    NULL            reduce using rule 70 (expresion -> CADENA .)
    NOT             reduce using rule 70 (expresion -> CADENA .)
    PARIZQ          reduce using rule 70 (expresion -> CADENA .)
    ENTERO          reduce using rule 70 (expresion -> CADENA .)
    DECIMAL         reduce using rule 70 (expresion -> CADENA .)
    CADENA          reduce using rule 70 (expresion -> CADENA .)
    CHARACTER       reduce using rule 70 (expresion -> CADENA .)
    TRUE            reduce using rule 70 (expresion -> CADENA .)
    FALSE           reduce using rule 70 (expresion -> CADENA .)
    BREAK           reduce using rule 70 (expresion -> CADENA .)
    CONTINUE        reduce using rule 70 (expresion -> CADENA .)
    $end            reduce using rule 70 (expresion -> CADENA .)
    PARDER          reduce using rule 70 (expresion -> CADENA .)
    PTCOMA          reduce using rule 70 (expresion -> CADENA .)
    LLAVDER         reduce using rule 70 (expresion -> CADENA .)
    DEFAULT         reduce using rule 70 (expresion -> CADENA .)
    CASE            reduce using rule 70 (expresion -> CADENA .)
    COMA            reduce using rule 70 (expresion -> CADENA .)
    DOSPUNTOS       reduce using rule 70 (expresion -> CADENA .)


state 37

    (71) expresion -> CHARACTER .

    INCREMENT       reduce using rule 71 (expresion -> CHARACTER .)
    DECREMENT       reduce using rule 71 (expresion -> CHARACTER .)
    MAS             reduce using rule 71 (expresion -> CHARACTER .)
    MENOS           reduce using rule 71 (expresion -> CHARACTER .)
    POR             reduce using rule 71 (expresion -> CHARACTER .)
    DIVIDIDO        reduce using rule 71 (expresion -> CHARACTER .)
    ELEVADO         reduce using rule 71 (expresion -> CHARACTER .)
    MOD             reduce using rule 71 (expresion -> CHARACTER .)
    AND             reduce using rule 71 (expresion -> CHARACTER .)
    OR              reduce using rule 71 (expresion -> CHARACTER .)
    MAYQUE          reduce using rule 71 (expresion -> CHARACTER .)
    MENQUE          reduce using rule 71 (expresion -> CHARACTER .)
    MAYIGUALQUE     reduce using rule 71 (expresion -> CHARACTER .)
    MENIGUALQUE     reduce using rule 71 (expresion -> CHARACTER .)
    IGUALQUE        reduce using rule 71 (expresion -> CHARACTER .)
    NIGUALQUE       reduce using rule 71 (expresion -> CHARACTER .)
    MAIN            reduce using rule 71 (expresion -> CHARACTER .)
    FUNC            reduce using rule 71 (expresion -> CHARACTER .)
    ID              reduce using rule 71 (expresion -> CHARACTER .)
    RETURN          reduce using rule 71 (expresion -> CHARACTER .)
    PRINT           reduce using rule 71 (expresion -> CHARACTER .)
    VAR             reduce using rule 71 (expresion -> CHARACTER .)
    WHILE           reduce using rule 71 (expresion -> CHARACTER .)
    IF              reduce using rule 71 (expresion -> CHARACTER .)
    SWITCH          reduce using rule 71 (expresion -> CHARACTER .)
    FOR             reduce using rule 71 (expresion -> CHARACTER .)
    NULL            reduce using rule 71 (expresion -> CHARACTER .)
    NOT             reduce using rule 71 (expresion -> CHARACTER .)
    PARIZQ          reduce using rule 71 (expresion -> CHARACTER .)
    ENTERO          reduce using rule 71 (expresion -> CHARACTER .)
    DECIMAL         reduce using rule 71 (expresion -> CHARACTER .)
    CADENA          reduce using rule 71 (expresion -> CHARACTER .)
    CHARACTER       reduce using rule 71 (expresion -> CHARACTER .)
    TRUE            reduce using rule 71 (expresion -> CHARACTER .)
    FALSE           reduce using rule 71 (expresion -> CHARACTER .)
    BREAK           reduce using rule 71 (expresion -> CHARACTER .)
    CONTINUE        reduce using rule 71 (expresion -> CHARACTER .)
    $end            reduce using rule 71 (expresion -> CHARACTER .)
    PARDER          reduce using rule 71 (expresion -> CHARACTER .)
    PTCOMA          reduce using rule 71 (expresion -> CHARACTER .)
    LLAVDER         reduce using rule 71 (expresion -> CHARACTER .)
    DEFAULT         reduce using rule 71 (expresion -> CHARACTER .)
    CASE            reduce using rule 71 (expresion -> CHARACTER .)
    COMA            reduce using rule 71 (expresion -> CHARACTER .)
    DOSPUNTOS       reduce using rule 71 (expresion -> CHARACTER .)


state 38

    (72) expresion -> TRUE .

    INCREMENT       reduce using rule 72 (expresion -> TRUE .)
    DECREMENT       reduce using rule 72 (expresion -> TRUE .)
    MAS             reduce using rule 72 (expresion -> TRUE .)
    MENOS           reduce using rule 72 (expresion -> TRUE .)
    POR             reduce using rule 72 (expresion -> TRUE .)
    DIVIDIDO        reduce using rule 72 (expresion -> TRUE .)
    ELEVADO         reduce using rule 72 (expresion -> TRUE .)
    MOD             reduce using rule 72 (expresion -> TRUE .)
    AND             reduce using rule 72 (expresion -> TRUE .)
    OR              reduce using rule 72 (expresion -> TRUE .)
    MAYQUE          reduce using rule 72 (expresion -> TRUE .)
    MENQUE          reduce using rule 72 (expresion -> TRUE .)
    MAYIGUALQUE     reduce using rule 72 (expresion -> TRUE .)
    MENIGUALQUE     reduce using rule 72 (expresion -> TRUE .)
    IGUALQUE        reduce using rule 72 (expresion -> TRUE .)
    NIGUALQUE       reduce using rule 72 (expresion -> TRUE .)
    MAIN            reduce using rule 72 (expresion -> TRUE .)
    FUNC            reduce using rule 72 (expresion -> TRUE .)
    ID              reduce using rule 72 (expresion -> TRUE .)
    RETURN          reduce using rule 72 (expresion -> TRUE .)
    PRINT           reduce using rule 72 (expresion -> TRUE .)
    VAR             reduce using rule 72 (expresion -> TRUE .)
    WHILE           reduce using rule 72 (expresion -> TRUE .)
    IF              reduce using rule 72 (expresion -> TRUE .)
    SWITCH          reduce using rule 72 (expresion -> TRUE .)
    FOR             reduce using rule 72 (expresion -> TRUE .)
    NULL            reduce using rule 72 (expresion -> TRUE .)
    NOT             reduce using rule 72 (expresion -> TRUE .)
    PARIZQ          reduce using rule 72 (expresion -> TRUE .)
    ENTERO          reduce using rule 72 (expresion -> TRUE .)
    DECIMAL         reduce using rule 72 (expresion -> TRUE .)
    CADENA          reduce using rule 72 (expresion -> TRUE .)
    CHARACTER       reduce using rule 72 (expresion -> TRUE .)
    TRUE            reduce using rule 72 (expresion -> TRUE .)
    FALSE           reduce using rule 72 (expresion -> TRUE .)
    BREAK           reduce using rule 72 (expresion -> TRUE .)
    CONTINUE        reduce using rule 72 (expresion -> TRUE .)
    $end            reduce using rule 72 (expresion -> TRUE .)
    PARDER          reduce using rule 72 (expresion -> TRUE .)
    PTCOMA          reduce using rule 72 (expresion -> TRUE .)
    LLAVDER         reduce using rule 72 (expresion -> TRUE .)
    DEFAULT         reduce using rule 72 (expresion -> TRUE .)
    CASE            reduce using rule 72 (expresion -> TRUE .)
    COMA            reduce using rule 72 (expresion -> TRUE .)
    DOSPUNTOS       reduce using rule 72 (expresion -> TRUE .)


state 39

    (73) expresion -> FALSE .

    INCREMENT       reduce using rule 73 (expresion -> FALSE .)
    DECREMENT       reduce using rule 73 (expresion -> FALSE .)
    MAS             reduce using rule 73 (expresion -> FALSE .)
    MENOS           reduce using rule 73 (expresion -> FALSE .)
    POR             reduce using rule 73 (expresion -> FALSE .)
    DIVIDIDO        reduce using rule 73 (expresion -> FALSE .)
    ELEVADO         reduce using rule 73 (expresion -> FALSE .)
    MOD             reduce using rule 73 (expresion -> FALSE .)
    AND             reduce using rule 73 (expresion -> FALSE .)
    OR              reduce using rule 73 (expresion -> FALSE .)
    MAYQUE          reduce using rule 73 (expresion -> FALSE .)
    MENQUE          reduce using rule 73 (expresion -> FALSE .)
    MAYIGUALQUE     reduce using rule 73 (expresion -> FALSE .)
    MENIGUALQUE     reduce using rule 73 (expresion -> FALSE .)
    IGUALQUE        reduce using rule 73 (expresion -> FALSE .)
    NIGUALQUE       reduce using rule 73 (expresion -> FALSE .)
    MAIN            reduce using rule 73 (expresion -> FALSE .)
    FUNC            reduce using rule 73 (expresion -> FALSE .)
    ID              reduce using rule 73 (expresion -> FALSE .)
    RETURN          reduce using rule 73 (expresion -> FALSE .)
    PRINT           reduce using rule 73 (expresion -> FALSE .)
    VAR             reduce using rule 73 (expresion -> FALSE .)
    WHILE           reduce using rule 73 (expresion -> FALSE .)
    IF              reduce using rule 73 (expresion -> FALSE .)
    SWITCH          reduce using rule 73 (expresion -> FALSE .)
    FOR             reduce using rule 73 (expresion -> FALSE .)
    NULL            reduce using rule 73 (expresion -> FALSE .)
    NOT             reduce using rule 73 (expresion -> FALSE .)
    PARIZQ          reduce using rule 73 (expresion -> FALSE .)
    ENTERO          reduce using rule 73 (expresion -> FALSE .)
    DECIMAL         reduce using rule 73 (expresion -> FALSE .)
    CADENA          reduce using rule 73 (expresion -> FALSE .)
    CHARACTER       reduce using rule 73 (expresion -> FALSE .)
    TRUE            reduce using rule 73 (expresion -> FALSE .)
    FALSE           reduce using rule 73 (expresion -> FALSE .)
    BREAK           reduce using rule 73 (expresion -> FALSE .)
    CONTINUE        reduce using rule 73 (expresion -> FALSE .)
    $end            reduce using rule 73 (expresion -> FALSE .)
    PARDER          reduce using rule 73 (expresion -> FALSE .)
    PTCOMA          reduce using rule 73 (expresion -> FALSE .)
    LLAVDER         reduce using rule 73 (expresion -> FALSE .)
    DEFAULT         reduce using rule 73 (expresion -> FALSE .)
    CASE            reduce using rule 73 (expresion -> FALSE .)
    COMA            reduce using rule 73 (expresion -> FALSE .)
    DOSPUNTOS       reduce using rule 73 (expresion -> FALSE .)


state 40

    (35) break_instr -> BREAK . def_instr_prima
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
    PTCOMA          shift and go to state 83
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    MENOS           reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)

  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 82
    empty                          shift and go to state 84

state 41

    (34) continue_instr -> CONTINUE . def_instr_prima
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
    PTCOMA          shift and go to state 83
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    MENOS           reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)

  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 85
    empty                          shift and go to state 84

state 42

    (2) instrucciones -> instrucciones instruccion .

    MAIN            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNC            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RETURN          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PRINT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    VAR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    SWITCH          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    NULL            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    MENOS           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    NOT             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PARIZQ          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ENTERO          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    DECIMAL         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CADENA          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CHARACTER       reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    TRUE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FALSE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONTINUE        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LLAVDER         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PTCOMA          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    DEFAULT         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CASE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 43

    (48) expresion -> expresion INCREMENT . def_instr_prima
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
    PTCOMA          shift and go to state 83
    INCREMENT       reduce using rule 22 (empty -> .)
    DECREMENT       reduce using rule 22 (empty -> .)
    MAS             reduce using rule 22 (empty -> .)
    MENOS           reduce using rule 22 (empty -> .)
    POR             reduce using rule 22 (empty -> .)
    DIVIDIDO        reduce using rule 22 (empty -> .)
    ELEVADO         reduce using rule 22 (empty -> .)
    MOD             reduce using rule 22 (empty -> .)
    AND             reduce using rule 22 (empty -> .)
    OR              reduce using rule 22 (empty -> .)
    MAYQUE          reduce using rule 22 (empty -> .)
    MENQUE          reduce using rule 22 (empty -> .)
    MAYIGUALQUE     reduce using rule 22 (empty -> .)
    MENIGUALQUE     reduce using rule 22 (empty -> .)
    IGUALQUE        reduce using rule 22 (empty -> .)
    NIGUALQUE       reduce using rule 22 (empty -> .)
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    PARDER          reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)
    COMA            reduce using rule 22 (empty -> .)
    DOSPUNTOS       reduce using rule 22 (empty -> .)

  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 86
    empty                          shift and go to state 84

state 44

    (49) expresion -> expresion DECREMENT . def_instr_prima
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
    PTCOMA          shift and go to state 83
    INCREMENT       reduce using rule 22 (empty -> .)
    DECREMENT       reduce using rule 22 (empty -> .)
    MAS             reduce using rule 22 (empty -> .)
    MENOS           reduce using rule 22 (empty -> .)
    POR             reduce using rule 22 (empty -> .)
    DIVIDIDO        reduce using rule 22 (empty -> .)
    ELEVADO         reduce using rule 22 (empty -> .)
    MOD             reduce using rule 22 (empty -> .)
    AND             reduce using rule 22 (empty -> .)
    OR              reduce using rule 22 (empty -> .)
    MAYQUE          reduce using rule 22 (empty -> .)
    MENQUE          reduce using rule 22 (empty -> .)
    MAYIGUALQUE     reduce using rule 22 (empty -> .)
    MENIGUALQUE     reduce using rule 22 (empty -> .)
    IGUALQUE        reduce using rule 22 (empty -> .)
    NIGUALQUE       reduce using rule 22 (empty -> .)
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    PARDER          reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)
    COMA            reduce using rule 22 (empty -> .)
    DOSPUNTOS       reduce using rule 22 (empty -> .)

  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 87
    empty                          shift and go to state 84

state 45

    (50) expresion -> expresion MAS . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 88
    call_instr                     shift and go to state 63

state 46

    (51) expresion -> expresion MENOS . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 89
    call_instr                     shift and go to state 63

state 47

    (52) expresion -> expresion POR . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 90
    call_instr                     shift and go to state 63

state 48

    (53) expresion -> expresion DIVIDIDO . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 91
    call_instr                     shift and go to state 63

state 49

    (54) expresion -> expresion ELEVADO . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 92
    call_instr                     shift and go to state 63

state 50

    (55) expresion -> expresion MOD . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 93
    call_instr                     shift and go to state 63

state 51

    (56) expresion -> expresion AND . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 94
    call_instr                     shift and go to state 63

state 52

    (57) expresion -> expresion OR . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 95
    call_instr                     shift and go to state 63

state 53

    (58) expresion -> expresion MAYQUE . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 96
    call_instr                     shift and go to state 63

state 54

    (59) expresion -> expresion MENQUE . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 97
    call_instr                     shift and go to state 63

state 55

    (60) expresion -> expresion MAYIGUALQUE . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 98
    call_instr                     shift and go to state 63

state 56

    (61) expresion -> expresion MENIGUALQUE . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 99
    call_instr                     shift and go to state 63

state 57

    (62) expresion -> expresion IGUALQUE . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 100
    call_instr                     shift and go to state 63

state 58

    (63) expresion -> expresion NIGUALQUE . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 101
    call_instr                     shift and go to state 63

state 59

    (23) func_main -> MAIN PARIZQ . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 102


state 60

    (66) expresion -> PARIZQ expresion . PARDER
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    PARDER          shift and go to state 103
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58


state 61

    (79) expresion -> PARIZQ expresion_data_type . PARDER expresion

    PARDER          shift and go to state 104


state 62

    (67) expresion -> ID .
    (83) call_instr -> ID . PARIZQ PARDER def_instr_prima
    (84) call_instr -> ID . PARIZQ params_call PARDER def_instr_prima

  ! shift/reduce conflict for PARIZQ resolved as shift
    PARDER          reduce using rule 67 (expresion -> ID .)
    INCREMENT       reduce using rule 67 (expresion -> ID .)
    DECREMENT       reduce using rule 67 (expresion -> ID .)
    MAS             reduce using rule 67 (expresion -> ID .)
    MENOS           reduce using rule 67 (expresion -> ID .)
    POR             reduce using rule 67 (expresion -> ID .)
    DIVIDIDO        reduce using rule 67 (expresion -> ID .)
    ELEVADO         reduce using rule 67 (expresion -> ID .)
    MOD             reduce using rule 67 (expresion -> ID .)
    AND             reduce using rule 67 (expresion -> ID .)
    OR              reduce using rule 67 (expresion -> ID .)
    MAYQUE          reduce using rule 67 (expresion -> ID .)
    MENQUE          reduce using rule 67 (expresion -> ID .)
    MAYIGUALQUE     reduce using rule 67 (expresion -> ID .)
    MENIGUALQUE     reduce using rule 67 (expresion -> ID .)
    IGUALQUE        reduce using rule 67 (expresion -> ID .)
    NIGUALQUE       reduce using rule 67 (expresion -> ID .)
    PTCOMA          reduce using rule 67 (expresion -> ID .)
    MAIN            reduce using rule 67 (expresion -> ID .)
    FUNC            reduce using rule 67 (expresion -> ID .)
    ID              reduce using rule 67 (expresion -> ID .)
    RETURN          reduce using rule 67 (expresion -> ID .)
    PRINT           reduce using rule 67 (expresion -> ID .)
    VAR             reduce using rule 67 (expresion -> ID .)
    WHILE           reduce using rule 67 (expresion -> ID .)
    IF              reduce using rule 67 (expresion -> ID .)
    SWITCH          reduce using rule 67 (expresion -> ID .)
    FOR             reduce using rule 67 (expresion -> ID .)
    NULL            reduce using rule 67 (expresion -> ID .)
    NOT             reduce using rule 67 (expresion -> ID .)
    ENTERO          reduce using rule 67 (expresion -> ID .)
    DECIMAL         reduce using rule 67 (expresion -> ID .)
    CADENA          reduce using rule 67 (expresion -> ID .)
    CHARACTER       reduce using rule 67 (expresion -> ID .)
    TRUE            reduce using rule 67 (expresion -> ID .)
    FALSE           reduce using rule 67 (expresion -> ID .)
    BREAK           reduce using rule 67 (expresion -> ID .)
    CONTINUE        reduce using rule 67 (expresion -> ID .)
    $end            reduce using rule 67 (expresion -> ID .)
    LLAVDER         reduce using rule 67 (expresion -> ID .)
    DEFAULT         reduce using rule 67 (expresion -> ID .)
    CASE            reduce using rule 67 (expresion -> ID .)
    COMA            reduce using rule 67 (expresion -> ID .)
    DOSPUNTOS       reduce using rule 67 (expresion -> ID .)
    PARIZQ          shift and go to state 70

  ! PARIZQ          [ reduce using rule 67 (expresion -> ID .) ]


state 63

    (80) expresion -> call_instr .

    PARDER          reduce using rule 80 (expresion -> call_instr .)
    INCREMENT       reduce using rule 80 (expresion -> call_instr .)
    DECREMENT       reduce using rule 80 (expresion -> call_instr .)
    MAS             reduce using rule 80 (expresion -> call_instr .)
    MENOS           reduce using rule 80 (expresion -> call_instr .)
    POR             reduce using rule 80 (expresion -> call_instr .)
    DIVIDIDO        reduce using rule 80 (expresion -> call_instr .)
    ELEVADO         reduce using rule 80 (expresion -> call_instr .)
    MOD             reduce using rule 80 (expresion -> call_instr .)
    AND             reduce using rule 80 (expresion -> call_instr .)
    OR              reduce using rule 80 (expresion -> call_instr .)
    MAYQUE          reduce using rule 80 (expresion -> call_instr .)
    MENQUE          reduce using rule 80 (expresion -> call_instr .)
    MAYIGUALQUE     reduce using rule 80 (expresion -> call_instr .)
    MENIGUALQUE     reduce using rule 80 (expresion -> call_instr .)
    IGUALQUE        reduce using rule 80 (expresion -> call_instr .)
    NIGUALQUE       reduce using rule 80 (expresion -> call_instr .)
    MAIN            reduce using rule 80 (expresion -> call_instr .)
    FUNC            reduce using rule 80 (expresion -> call_instr .)
    ID              reduce using rule 80 (expresion -> call_instr .)
    RETURN          reduce using rule 80 (expresion -> call_instr .)
    PRINT           reduce using rule 80 (expresion -> call_instr .)
    VAR             reduce using rule 80 (expresion -> call_instr .)
    WHILE           reduce using rule 80 (expresion -> call_instr .)
    IF              reduce using rule 80 (expresion -> call_instr .)
    SWITCH          reduce using rule 80 (expresion -> call_instr .)
    FOR             reduce using rule 80 (expresion -> call_instr .)
    NULL            reduce using rule 80 (expresion -> call_instr .)
    NOT             reduce using rule 80 (expresion -> call_instr .)
    PARIZQ          reduce using rule 80 (expresion -> call_instr .)
    ENTERO          reduce using rule 80 (expresion -> call_instr .)
    DECIMAL         reduce using rule 80 (expresion -> call_instr .)
    CADENA          reduce using rule 80 (expresion -> call_instr .)
    CHARACTER       reduce using rule 80 (expresion -> call_instr .)
    TRUE            reduce using rule 80 (expresion -> call_instr .)
    FALSE           reduce using rule 80 (expresion -> call_instr .)
    BREAK           reduce using rule 80 (expresion -> call_instr .)
    CONTINUE        reduce using rule 80 (expresion -> call_instr .)
    $end            reduce using rule 80 (expresion -> call_instr .)
    PTCOMA          reduce using rule 80 (expresion -> call_instr .)
    LLAVDER         reduce using rule 80 (expresion -> call_instr .)
    DEFAULT         reduce using rule 80 (expresion -> call_instr .)
    CASE            reduce using rule 80 (expresion -> call_instr .)
    COMA            reduce using rule 80 (expresion -> call_instr .)
    DOSPUNTOS       reduce using rule 80 (expresion -> call_instr .)


state 64

    (74) expresion_data_type -> INT .

    PARDER          reduce using rule 74 (expresion_data_type -> INT .)
    ID              reduce using rule 74 (expresion_data_type -> INT .)


state 65

    (75) expresion_data_type -> DOUBLE .

    PARDER          reduce using rule 75 (expresion_data_type -> DOUBLE .)
    ID              reduce using rule 75 (expresion_data_type -> DOUBLE .)


state 66

    (76) expresion_data_type -> STRING .

    PARDER          reduce using rule 76 (expresion_data_type -> STRING .)
    ID              reduce using rule 76 (expresion_data_type -> STRING .)


state 67

    (77) expresion_data_type -> CHAR .

    PARDER          reduce using rule 77 (expresion_data_type -> CHAR .)
    ID              reduce using rule 77 (expresion_data_type -> CHAR .)


state 68

    (78) expresion_data_type -> BOOLEAN .

    PARDER          reduce using rule 78 (expresion_data_type -> BOOLEAN .)
    ID              reduce using rule 78 (expresion_data_type -> BOOLEAN .)


state 69

    (81) funct_instr -> FUNC ID . PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> FUNC ID . PARIZQ PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 105


state 70

    (83) call_instr -> ID PARIZQ . PARDER def_instr_prima
    (84) call_instr -> ID PARIZQ . params_call PARDER def_instr_prima
    (88) params_call -> . params_call COMA param_call
    (89) params_call -> . param_call
    (90) param_call -> . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    PARDER          shift and go to state 106
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    params_call                    shift and go to state 107
    param_call                     shift and go to state 108
    expresion                      shift and go to state 109
    call_instr                     shift and go to state 63

state 71

    (27) asignacion_instr -> ID IGUAL . expresion def_instr_prima
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 110
    call_instr                     shift and go to state 63

state 72

    (91) return_instr -> RETURN expresion . def_instr_prima
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for PTCOMA resolved as shift
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58
    PTCOMA          shift and go to state 83
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)

  ! MENOS           [ reduce using rule 22 (empty -> .) ]
  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 111
    empty                          shift and go to state 84

state 73

    (92) return_instr -> RETURN call_instr . def_instr_prima
    (80) expresion -> call_instr .
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
  ! reduce/reduce conflict for MAIN resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for FUNC resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for ID resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for VAR resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for IF resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for SWITCH resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for FOR resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for NULL resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for MENOS resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for NOT resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for PARIZQ resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for ENTERO resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for CADENA resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for CHARACTER resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for TRUE resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for FALSE resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for $end resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for LLAVDER resolved using rule 22 (empty -> .)
  ! shift/reduce conflict for PTCOMA resolved as shift
  ! reduce/reduce conflict for DEFAULT resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for CASE resolved using rule 22 (empty -> .)
    INCREMENT       reduce using rule 80 (expresion -> call_instr .)
    DECREMENT       reduce using rule 80 (expresion -> call_instr .)
    MAS             reduce using rule 80 (expresion -> call_instr .)
    POR             reduce using rule 80 (expresion -> call_instr .)
    DIVIDIDO        reduce using rule 80 (expresion -> call_instr .)
    ELEVADO         reduce using rule 80 (expresion -> call_instr .)
    MOD             reduce using rule 80 (expresion -> call_instr .)
    AND             reduce using rule 80 (expresion -> call_instr .)
    OR              reduce using rule 80 (expresion -> call_instr .)
    MAYQUE          reduce using rule 80 (expresion -> call_instr .)
    MENQUE          reduce using rule 80 (expresion -> call_instr .)
    MAYIGUALQUE     reduce using rule 80 (expresion -> call_instr .)
    MENIGUALQUE     reduce using rule 80 (expresion -> call_instr .)
    IGUALQUE        reduce using rule 80 (expresion -> call_instr .)
    NIGUALQUE       reduce using rule 80 (expresion -> call_instr .)
    PTCOMA          shift and go to state 83
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    MENOS           reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)

  ! MENOS           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! PTCOMA          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! MAIN            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! FUNC            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! ID              [ reduce using rule 80 (expresion -> call_instr .) ]
  ! RETURN          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! PRINT           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! VAR             [ reduce using rule 80 (expresion -> call_instr .) ]
  ! WHILE           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! IF              [ reduce using rule 80 (expresion -> call_instr .) ]
  ! SWITCH          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! FOR             [ reduce using rule 80 (expresion -> call_instr .) ]
  ! NULL            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! NOT             [ reduce using rule 80 (expresion -> call_instr .) ]
  ! PARIZQ          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! ENTERO          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! DECIMAL         [ reduce using rule 80 (expresion -> call_instr .) ]
  ! CADENA          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! CHARACTER       [ reduce using rule 80 (expresion -> call_instr .) ]
  ! TRUE            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! FALSE           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! BREAK           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! CONTINUE        [ reduce using rule 80 (expresion -> call_instr .) ]
  ! $end            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! LLAVDER         [ reduce using rule 80 (expresion -> call_instr .) ]
  ! DEFAULT         [ reduce using rule 80 (expresion -> call_instr .) ]
  ! CASE            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 112
    empty                          shift and go to state 84

state 74

    (24) imprimir_instr -> PRINT PARIZQ . expresion PARDER def_instr_prima
    (25) imprimir_instr -> PRINT PARIZQ . call_instr PARDER def_instr_prima
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 113
    call_instr                     shift and go to state 114

state 75

    (26) definicion_instr -> VAR ID . def_instr_prima
    (28) def_asig_instr -> VAR ID . IGUAL expresion def_instr_prima
    (29) def_asig_instr -> VAR ID . IGUAL call_instr def_instr_prima
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
    IGUAL           shift and go to state 116
    PTCOMA          shift and go to state 83
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    MENOS           reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)

  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 115
    empty                          shift and go to state 84

state 76

    (33) while_instr -> WHILE PARIZQ . expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 117
    call_instr                     shift and go to state 63

state 77

    (30) if_instr -> IF PARIZQ . expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> IF PARIZQ . expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> IF PARIZQ . expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 118
    call_instr                     shift and go to state 63

state 78

    (36) switch_instr -> SWITCH PARIZQ . expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> SWITCH PARIZQ . expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> SWITCH PARIZQ . expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 119
    call_instr                     shift and go to state 63

state 79

    (43) for_instr -> FOR PARIZQ . def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (44) def_asign_for -> . ID
    (45) def_asign_for -> . asignacion_instr
    (46) def_asign_for -> . def_asig_instr
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima

    ID              shift and go to state 121
    VAR             shift and go to state 124

    def_asign_for                  shift and go to state 120
    asignacion_instr               shift and go to state 122
    def_asig_instr                 shift and go to state 123

state 80

    (64) expresion -> MENOS expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 64 (expresion -> MENOS expresion .)
    MENOS           reduce using rule 64 (expresion -> MENOS expresion .)
    POR             reduce using rule 64 (expresion -> MENOS expresion .)
    DIVIDIDO        reduce using rule 64 (expresion -> MENOS expresion .)
    ELEVADO         reduce using rule 64 (expresion -> MENOS expresion .)
    MOD             reduce using rule 64 (expresion -> MENOS expresion .)
    AND             reduce using rule 64 (expresion -> MENOS expresion .)
    OR              reduce using rule 64 (expresion -> MENOS expresion .)
    MAYQUE          reduce using rule 64 (expresion -> MENOS expresion .)
    MENQUE          reduce using rule 64 (expresion -> MENOS expresion .)
    MAYIGUALQUE     reduce using rule 64 (expresion -> MENOS expresion .)
    MENIGUALQUE     reduce using rule 64 (expresion -> MENOS expresion .)
    IGUALQUE        reduce using rule 64 (expresion -> MENOS expresion .)
    NIGUALQUE       reduce using rule 64 (expresion -> MENOS expresion .)
    MAIN            reduce using rule 64 (expresion -> MENOS expresion .)
    FUNC            reduce using rule 64 (expresion -> MENOS expresion .)
    ID              reduce using rule 64 (expresion -> MENOS expresion .)
    RETURN          reduce using rule 64 (expresion -> MENOS expresion .)
    PRINT           reduce using rule 64 (expresion -> MENOS expresion .)
    VAR             reduce using rule 64 (expresion -> MENOS expresion .)
    WHILE           reduce using rule 64 (expresion -> MENOS expresion .)
    IF              reduce using rule 64 (expresion -> MENOS expresion .)
    SWITCH          reduce using rule 64 (expresion -> MENOS expresion .)
    FOR             reduce using rule 64 (expresion -> MENOS expresion .)
    NULL            reduce using rule 64 (expresion -> MENOS expresion .)
    NOT             reduce using rule 64 (expresion -> MENOS expresion .)
    PARIZQ          reduce using rule 64 (expresion -> MENOS expresion .)
    ENTERO          reduce using rule 64 (expresion -> MENOS expresion .)
    DECIMAL         reduce using rule 64 (expresion -> MENOS expresion .)
    CADENA          reduce using rule 64 (expresion -> MENOS expresion .)
    CHARACTER       reduce using rule 64 (expresion -> MENOS expresion .)
    TRUE            reduce using rule 64 (expresion -> MENOS expresion .)
    FALSE           reduce using rule 64 (expresion -> MENOS expresion .)
    BREAK           reduce using rule 64 (expresion -> MENOS expresion .)
    CONTINUE        reduce using rule 64 (expresion -> MENOS expresion .)
    $end            reduce using rule 64 (expresion -> MENOS expresion .)
    PARDER          reduce using rule 64 (expresion -> MENOS expresion .)
    PTCOMA          reduce using rule 64 (expresion -> MENOS expresion .)
    LLAVDER         reduce using rule 64 (expresion -> MENOS expresion .)
    DEFAULT         reduce using rule 64 (expresion -> MENOS expresion .)
    CASE            reduce using rule 64 (expresion -> MENOS expresion .)
    COMA            reduce using rule 64 (expresion -> MENOS expresion .)
    DOSPUNTOS       reduce using rule 64 (expresion -> MENOS expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44

  ! INCREMENT       [ reduce using rule 64 (expresion -> MENOS expresion .) ]
  ! DECREMENT       [ reduce using rule 64 (expresion -> MENOS expresion .) ]
  ! MAS             [ shift and go to state 45 ]
  ! MENOS           [ shift and go to state 46 ]
  ! POR             [ shift and go to state 47 ]
  ! DIVIDIDO        [ shift and go to state 48 ]
  ! ELEVADO         [ shift and go to state 49 ]
  ! MOD             [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! MAYQUE          [ shift and go to state 53 ]
  ! MENQUE          [ shift and go to state 54 ]
  ! MAYIGUALQUE     [ shift and go to state 55 ]
  ! MENIGUALQUE     [ shift and go to state 56 ]
  ! IGUALQUE        [ shift and go to state 57 ]
  ! NIGUALQUE       [ shift and go to state 58 ]


state 81

    (65) expresion -> NOT expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 65 (expresion -> NOT expresion .)
    OR              reduce using rule 65 (expresion -> NOT expresion .)
    MAIN            reduce using rule 65 (expresion -> NOT expresion .)
    FUNC            reduce using rule 65 (expresion -> NOT expresion .)
    ID              reduce using rule 65 (expresion -> NOT expresion .)
    RETURN          reduce using rule 65 (expresion -> NOT expresion .)
    PRINT           reduce using rule 65 (expresion -> NOT expresion .)
    VAR             reduce using rule 65 (expresion -> NOT expresion .)
    WHILE           reduce using rule 65 (expresion -> NOT expresion .)
    IF              reduce using rule 65 (expresion -> NOT expresion .)
    SWITCH          reduce using rule 65 (expresion -> NOT expresion .)
    FOR             reduce using rule 65 (expresion -> NOT expresion .)
    NULL            reduce using rule 65 (expresion -> NOT expresion .)
    NOT             reduce using rule 65 (expresion -> NOT expresion .)
    PARIZQ          reduce using rule 65 (expresion -> NOT expresion .)
    ENTERO          reduce using rule 65 (expresion -> NOT expresion .)
    DECIMAL         reduce using rule 65 (expresion -> NOT expresion .)
    CADENA          reduce using rule 65 (expresion -> NOT expresion .)
    CHARACTER       reduce using rule 65 (expresion -> NOT expresion .)
    TRUE            reduce using rule 65 (expresion -> NOT expresion .)
    FALSE           reduce using rule 65 (expresion -> NOT expresion .)
    BREAK           reduce using rule 65 (expresion -> NOT expresion .)
    CONTINUE        reduce using rule 65 (expresion -> NOT expresion .)
    $end            reduce using rule 65 (expresion -> NOT expresion .)
    PARDER          reduce using rule 65 (expresion -> NOT expresion .)
    PTCOMA          reduce using rule 65 (expresion -> NOT expresion .)
    LLAVDER         reduce using rule 65 (expresion -> NOT expresion .)
    DEFAULT         reduce using rule 65 (expresion -> NOT expresion .)
    CASE            reduce using rule 65 (expresion -> NOT expresion .)
    COMA            reduce using rule 65 (expresion -> NOT expresion .)
    DOSPUNTOS       reduce using rule 65 (expresion -> NOT expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58

  ! INCREMENT       [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! DECREMENT       [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! MAS             [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! MENOS           [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! POR             [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! DIVIDIDO        [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! ELEVADO         [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! MOD             [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! MAYQUE          [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! MENQUE          [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! MAYIGUALQUE     [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! MENIGUALQUE     [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! IGUALQUE        [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! NIGUALQUE       [ reduce using rule 65 (expresion -> NOT expresion .) ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 82

    (35) break_instr -> BREAK def_instr_prima .

    MAIN            reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    FUNC            reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    ID              reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    RETURN          reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    PRINT           reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    VAR             reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    WHILE           reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    IF              reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    SWITCH          reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    FOR             reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    NULL            reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    MENOS           reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    NOT             reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    PARIZQ          reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    ENTERO          reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    DECIMAL         reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    CADENA          reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    CHARACTER       reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    TRUE            reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    FALSE           reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    BREAK           reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    CONTINUE        reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    $end            reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    LLAVDER         reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    PTCOMA          reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    DEFAULT         reduce using rule 35 (break_instr -> BREAK def_instr_prima .)
    CASE            reduce using rule 35 (break_instr -> BREAK def_instr_prima .)


state 83

    (20) def_instr_prima -> PTCOMA .

    MAIN            reduce using rule 20 (def_instr_prima -> PTCOMA .)
    FUNC            reduce using rule 20 (def_instr_prima -> PTCOMA .)
    ID              reduce using rule 20 (def_instr_prima -> PTCOMA .)
    RETURN          reduce using rule 20 (def_instr_prima -> PTCOMA .)
    PRINT           reduce using rule 20 (def_instr_prima -> PTCOMA .)
    VAR             reduce using rule 20 (def_instr_prima -> PTCOMA .)
    WHILE           reduce using rule 20 (def_instr_prima -> PTCOMA .)
    IF              reduce using rule 20 (def_instr_prima -> PTCOMA .)
    SWITCH          reduce using rule 20 (def_instr_prima -> PTCOMA .)
    FOR             reduce using rule 20 (def_instr_prima -> PTCOMA .)
    NULL            reduce using rule 20 (def_instr_prima -> PTCOMA .)
    MENOS           reduce using rule 20 (def_instr_prima -> PTCOMA .)
    NOT             reduce using rule 20 (def_instr_prima -> PTCOMA .)
    PARIZQ          reduce using rule 20 (def_instr_prima -> PTCOMA .)
    ENTERO          reduce using rule 20 (def_instr_prima -> PTCOMA .)
    DECIMAL         reduce using rule 20 (def_instr_prima -> PTCOMA .)
    CADENA          reduce using rule 20 (def_instr_prima -> PTCOMA .)
    CHARACTER       reduce using rule 20 (def_instr_prima -> PTCOMA .)
    TRUE            reduce using rule 20 (def_instr_prima -> PTCOMA .)
    FALSE           reduce using rule 20 (def_instr_prima -> PTCOMA .)
    BREAK           reduce using rule 20 (def_instr_prima -> PTCOMA .)
    CONTINUE        reduce using rule 20 (def_instr_prima -> PTCOMA .)
    $end            reduce using rule 20 (def_instr_prima -> PTCOMA .)
    LLAVDER         reduce using rule 20 (def_instr_prima -> PTCOMA .)
    PTCOMA          reduce using rule 20 (def_instr_prima -> PTCOMA .)
    DEFAULT         reduce using rule 20 (def_instr_prima -> PTCOMA .)
    CASE            reduce using rule 20 (def_instr_prima -> PTCOMA .)
    INCREMENT       reduce using rule 20 (def_instr_prima -> PTCOMA .)
    DECREMENT       reduce using rule 20 (def_instr_prima -> PTCOMA .)
    MAS             reduce using rule 20 (def_instr_prima -> PTCOMA .)
    POR             reduce using rule 20 (def_instr_prima -> PTCOMA .)
    DIVIDIDO        reduce using rule 20 (def_instr_prima -> PTCOMA .)
    ELEVADO         reduce using rule 20 (def_instr_prima -> PTCOMA .)
    MOD             reduce using rule 20 (def_instr_prima -> PTCOMA .)
    AND             reduce using rule 20 (def_instr_prima -> PTCOMA .)
    OR              reduce using rule 20 (def_instr_prima -> PTCOMA .)
    MAYQUE          reduce using rule 20 (def_instr_prima -> PTCOMA .)
    MENQUE          reduce using rule 20 (def_instr_prima -> PTCOMA .)
    MAYIGUALQUE     reduce using rule 20 (def_instr_prima -> PTCOMA .)
    MENIGUALQUE     reduce using rule 20 (def_instr_prima -> PTCOMA .)
    IGUALQUE        reduce using rule 20 (def_instr_prima -> PTCOMA .)
    NIGUALQUE       reduce using rule 20 (def_instr_prima -> PTCOMA .)
    PARDER          reduce using rule 20 (def_instr_prima -> PTCOMA .)
    COMA            reduce using rule 20 (def_instr_prima -> PTCOMA .)
    DOSPUNTOS       reduce using rule 20 (def_instr_prima -> PTCOMA .)


state 84

    (21) def_instr_prima -> empty .

    MAIN            reduce using rule 21 (def_instr_prima -> empty .)
    FUNC            reduce using rule 21 (def_instr_prima -> empty .)
    ID              reduce using rule 21 (def_instr_prima -> empty .)
    RETURN          reduce using rule 21 (def_instr_prima -> empty .)
    PRINT           reduce using rule 21 (def_instr_prima -> empty .)
    VAR             reduce using rule 21 (def_instr_prima -> empty .)
    WHILE           reduce using rule 21 (def_instr_prima -> empty .)
    IF              reduce using rule 21 (def_instr_prima -> empty .)
    SWITCH          reduce using rule 21 (def_instr_prima -> empty .)
    FOR             reduce using rule 21 (def_instr_prima -> empty .)
    NULL            reduce using rule 21 (def_instr_prima -> empty .)
    MENOS           reduce using rule 21 (def_instr_prima -> empty .)
    NOT             reduce using rule 21 (def_instr_prima -> empty .)
    PARIZQ          reduce using rule 21 (def_instr_prima -> empty .)
    ENTERO          reduce using rule 21 (def_instr_prima -> empty .)
    DECIMAL         reduce using rule 21 (def_instr_prima -> empty .)
    CADENA          reduce using rule 21 (def_instr_prima -> empty .)
    CHARACTER       reduce using rule 21 (def_instr_prima -> empty .)
    TRUE            reduce using rule 21 (def_instr_prima -> empty .)
    FALSE           reduce using rule 21 (def_instr_prima -> empty .)
    BREAK           reduce using rule 21 (def_instr_prima -> empty .)
    CONTINUE        reduce using rule 21 (def_instr_prima -> empty .)
    $end            reduce using rule 21 (def_instr_prima -> empty .)
    LLAVDER         reduce using rule 21 (def_instr_prima -> empty .)
    PTCOMA          reduce using rule 21 (def_instr_prima -> empty .)
    DEFAULT         reduce using rule 21 (def_instr_prima -> empty .)
    CASE            reduce using rule 21 (def_instr_prima -> empty .)
    INCREMENT       reduce using rule 21 (def_instr_prima -> empty .)
    DECREMENT       reduce using rule 21 (def_instr_prima -> empty .)
    MAS             reduce using rule 21 (def_instr_prima -> empty .)
    POR             reduce using rule 21 (def_instr_prima -> empty .)
    DIVIDIDO        reduce using rule 21 (def_instr_prima -> empty .)
    ELEVADO         reduce using rule 21 (def_instr_prima -> empty .)
    MOD             reduce using rule 21 (def_instr_prima -> empty .)
    AND             reduce using rule 21 (def_instr_prima -> empty .)
    OR              reduce using rule 21 (def_instr_prima -> empty .)
    MAYQUE          reduce using rule 21 (def_instr_prima -> empty .)
    MENQUE          reduce using rule 21 (def_instr_prima -> empty .)
    MAYIGUALQUE     reduce using rule 21 (def_instr_prima -> empty .)
    MENIGUALQUE     reduce using rule 21 (def_instr_prima -> empty .)
    IGUALQUE        reduce using rule 21 (def_instr_prima -> empty .)
    NIGUALQUE       reduce using rule 21 (def_instr_prima -> empty .)
    PARDER          reduce using rule 21 (def_instr_prima -> empty .)
    COMA            reduce using rule 21 (def_instr_prima -> empty .)
    DOSPUNTOS       reduce using rule 21 (def_instr_prima -> empty .)


state 85

    (34) continue_instr -> CONTINUE def_instr_prima .

    MAIN            reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    FUNC            reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    ID              reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    RETURN          reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    PRINT           reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    VAR             reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    WHILE           reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    IF              reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    SWITCH          reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    FOR             reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    NULL            reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    MENOS           reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    NOT             reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    PARIZQ          reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    ENTERO          reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    DECIMAL         reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    CADENA          reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    CHARACTER       reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    TRUE            reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    FALSE           reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    BREAK           reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    CONTINUE        reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    $end            reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    LLAVDER         reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    PTCOMA          reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    DEFAULT         reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)
    CASE            reduce using rule 34 (continue_instr -> CONTINUE def_instr_prima .)


state 86

    (48) expresion -> expresion INCREMENT def_instr_prima .

    INCREMENT       reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    DECREMENT       reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    MAS             reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    MENOS           reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    POR             reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    DIVIDIDO        reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    ELEVADO         reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    MOD             reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    AND             reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    OR              reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    MAYQUE          reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    MENQUE          reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    MAYIGUALQUE     reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    MENIGUALQUE     reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    IGUALQUE        reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    NIGUALQUE       reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    MAIN            reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    FUNC            reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    ID              reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    RETURN          reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    PRINT           reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    VAR             reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    WHILE           reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    IF              reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    SWITCH          reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    FOR             reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    NULL            reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    NOT             reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    PARIZQ          reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    ENTERO          reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    DECIMAL         reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    CADENA          reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    CHARACTER       reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    TRUE            reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    FALSE           reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    BREAK           reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    CONTINUE        reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    $end            reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    PARDER          reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    PTCOMA          reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    LLAVDER         reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    DEFAULT         reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    CASE            reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    COMA            reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)
    DOSPUNTOS       reduce using rule 48 (expresion -> expresion INCREMENT def_instr_prima .)


state 87

    (49) expresion -> expresion DECREMENT def_instr_prima .

    INCREMENT       reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    DECREMENT       reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    MAS             reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    MENOS           reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    POR             reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    DIVIDIDO        reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    ELEVADO         reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    MOD             reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    AND             reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    OR              reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    MAYQUE          reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    MENQUE          reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    MAYIGUALQUE     reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    MENIGUALQUE     reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    IGUALQUE        reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    NIGUALQUE       reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    MAIN            reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    FUNC            reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    ID              reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    RETURN          reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    PRINT           reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    VAR             reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    WHILE           reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    IF              reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    SWITCH          reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    FOR             reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    NULL            reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    NOT             reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    PARIZQ          reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    ENTERO          reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    DECIMAL         reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    CADENA          reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    CHARACTER       reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    TRUE            reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    FALSE           reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    BREAK           reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    CONTINUE        reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    $end            reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    PARDER          reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    PTCOMA          reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    LLAVDER         reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    DEFAULT         reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    CASE            reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    COMA            reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)
    DOSPUNTOS       reduce using rule 49 (expresion -> expresion DECREMENT def_instr_prima .)


state 88

    (50) expresion -> expresion MAS expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 50 (expresion -> expresion MAS expresion .)
    MENOS           reduce using rule 50 (expresion -> expresion MAS expresion .)
    AND             reduce using rule 50 (expresion -> expresion MAS expresion .)
    OR              reduce using rule 50 (expresion -> expresion MAS expresion .)
    MAYQUE          reduce using rule 50 (expresion -> expresion MAS expresion .)
    MENQUE          reduce using rule 50 (expresion -> expresion MAS expresion .)
    MAYIGUALQUE     reduce using rule 50 (expresion -> expresion MAS expresion .)
    MENIGUALQUE     reduce using rule 50 (expresion -> expresion MAS expresion .)
    IGUALQUE        reduce using rule 50 (expresion -> expresion MAS expresion .)
    NIGUALQUE       reduce using rule 50 (expresion -> expresion MAS expresion .)
    MAIN            reduce using rule 50 (expresion -> expresion MAS expresion .)
    FUNC            reduce using rule 50 (expresion -> expresion MAS expresion .)
    ID              reduce using rule 50 (expresion -> expresion MAS expresion .)
    RETURN          reduce using rule 50 (expresion -> expresion MAS expresion .)
    PRINT           reduce using rule 50 (expresion -> expresion MAS expresion .)
    VAR             reduce using rule 50 (expresion -> expresion MAS expresion .)
    WHILE           reduce using rule 50 (expresion -> expresion MAS expresion .)
    IF              reduce using rule 50 (expresion -> expresion MAS expresion .)
    SWITCH          reduce using rule 50 (expresion -> expresion MAS expresion .)
    FOR             reduce using rule 50 (expresion -> expresion MAS expresion .)
    NULL            reduce using rule 50 (expresion -> expresion MAS expresion .)
    NOT             reduce using rule 50 (expresion -> expresion MAS expresion .)
    PARIZQ          reduce using rule 50 (expresion -> expresion MAS expresion .)
    ENTERO          reduce using rule 50 (expresion -> expresion MAS expresion .)
    DECIMAL         reduce using rule 50 (expresion -> expresion MAS expresion .)
    CADENA          reduce using rule 50 (expresion -> expresion MAS expresion .)
    CHARACTER       reduce using rule 50 (expresion -> expresion MAS expresion .)
    TRUE            reduce using rule 50 (expresion -> expresion MAS expresion .)
    FALSE           reduce using rule 50 (expresion -> expresion MAS expresion .)
    BREAK           reduce using rule 50 (expresion -> expresion MAS expresion .)
    CONTINUE        reduce using rule 50 (expresion -> expresion MAS expresion .)
    $end            reduce using rule 50 (expresion -> expresion MAS expresion .)
    PARDER          reduce using rule 50 (expresion -> expresion MAS expresion .)
    PTCOMA          reduce using rule 50 (expresion -> expresion MAS expresion .)
    LLAVDER         reduce using rule 50 (expresion -> expresion MAS expresion .)
    DEFAULT         reduce using rule 50 (expresion -> expresion MAS expresion .)
    CASE            reduce using rule 50 (expresion -> expresion MAS expresion .)
    COMA            reduce using rule 50 (expresion -> expresion MAS expresion .)
    DOSPUNTOS       reduce using rule 50 (expresion -> expresion MAS expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50

  ! INCREMENT       [ reduce using rule 50 (expresion -> expresion MAS expresion .) ]
  ! DECREMENT       [ reduce using rule 50 (expresion -> expresion MAS expresion .) ]
  ! POR             [ reduce using rule 50 (expresion -> expresion MAS expresion .) ]
  ! DIVIDIDO        [ reduce using rule 50 (expresion -> expresion MAS expresion .) ]
  ! ELEVADO         [ reduce using rule 50 (expresion -> expresion MAS expresion .) ]
  ! MOD             [ reduce using rule 50 (expresion -> expresion MAS expresion .) ]
  ! MAS             [ shift and go to state 45 ]
  ! MENOS           [ shift and go to state 46 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! MAYQUE          [ shift and go to state 53 ]
  ! MENQUE          [ shift and go to state 54 ]
  ! MAYIGUALQUE     [ shift and go to state 55 ]
  ! MENIGUALQUE     [ shift and go to state 56 ]
  ! IGUALQUE        [ shift and go to state 57 ]
  ! NIGUALQUE       [ shift and go to state 58 ]


state 89

    (51) expresion -> expresion MENOS expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 51 (expresion -> expresion MENOS expresion .)
    MENOS           reduce using rule 51 (expresion -> expresion MENOS expresion .)
    AND             reduce using rule 51 (expresion -> expresion MENOS expresion .)
    OR              reduce using rule 51 (expresion -> expresion MENOS expresion .)
    MAYQUE          reduce using rule 51 (expresion -> expresion MENOS expresion .)
    MENQUE          reduce using rule 51 (expresion -> expresion MENOS expresion .)
    MAYIGUALQUE     reduce using rule 51 (expresion -> expresion MENOS expresion .)
    MENIGUALQUE     reduce using rule 51 (expresion -> expresion MENOS expresion .)
    IGUALQUE        reduce using rule 51 (expresion -> expresion MENOS expresion .)
    NIGUALQUE       reduce using rule 51 (expresion -> expresion MENOS expresion .)
    MAIN            reduce using rule 51 (expresion -> expresion MENOS expresion .)
    FUNC            reduce using rule 51 (expresion -> expresion MENOS expresion .)
    ID              reduce using rule 51 (expresion -> expresion MENOS expresion .)
    RETURN          reduce using rule 51 (expresion -> expresion MENOS expresion .)
    PRINT           reduce using rule 51 (expresion -> expresion MENOS expresion .)
    VAR             reduce using rule 51 (expresion -> expresion MENOS expresion .)
    WHILE           reduce using rule 51 (expresion -> expresion MENOS expresion .)
    IF              reduce using rule 51 (expresion -> expresion MENOS expresion .)
    SWITCH          reduce using rule 51 (expresion -> expresion MENOS expresion .)
    FOR             reduce using rule 51 (expresion -> expresion MENOS expresion .)
    NULL            reduce using rule 51 (expresion -> expresion MENOS expresion .)
    NOT             reduce using rule 51 (expresion -> expresion MENOS expresion .)
    PARIZQ          reduce using rule 51 (expresion -> expresion MENOS expresion .)
    ENTERO          reduce using rule 51 (expresion -> expresion MENOS expresion .)
    DECIMAL         reduce using rule 51 (expresion -> expresion MENOS expresion .)
    CADENA          reduce using rule 51 (expresion -> expresion MENOS expresion .)
    CHARACTER       reduce using rule 51 (expresion -> expresion MENOS expresion .)
    TRUE            reduce using rule 51 (expresion -> expresion MENOS expresion .)
    FALSE           reduce using rule 51 (expresion -> expresion MENOS expresion .)
    BREAK           reduce using rule 51 (expresion -> expresion MENOS expresion .)
    CONTINUE        reduce using rule 51 (expresion -> expresion MENOS expresion .)
    $end            reduce using rule 51 (expresion -> expresion MENOS expresion .)
    PARDER          reduce using rule 51 (expresion -> expresion MENOS expresion .)
    PTCOMA          reduce using rule 51 (expresion -> expresion MENOS expresion .)
    LLAVDER         reduce using rule 51 (expresion -> expresion MENOS expresion .)
    DEFAULT         reduce using rule 51 (expresion -> expresion MENOS expresion .)
    CASE            reduce using rule 51 (expresion -> expresion MENOS expresion .)
    COMA            reduce using rule 51 (expresion -> expresion MENOS expresion .)
    DOSPUNTOS       reduce using rule 51 (expresion -> expresion MENOS expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50

  ! INCREMENT       [ reduce using rule 51 (expresion -> expresion MENOS expresion .) ]
  ! DECREMENT       [ reduce using rule 51 (expresion -> expresion MENOS expresion .) ]
  ! POR             [ reduce using rule 51 (expresion -> expresion MENOS expresion .) ]
  ! DIVIDIDO        [ reduce using rule 51 (expresion -> expresion MENOS expresion .) ]
  ! ELEVADO         [ reduce using rule 51 (expresion -> expresion MENOS expresion .) ]
  ! MOD             [ reduce using rule 51 (expresion -> expresion MENOS expresion .) ]
  ! MAS             [ shift and go to state 45 ]
  ! MENOS           [ shift and go to state 46 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! MAYQUE          [ shift and go to state 53 ]
  ! MENQUE          [ shift and go to state 54 ]
  ! MAYIGUALQUE     [ shift and go to state 55 ]
  ! MENIGUALQUE     [ shift and go to state 56 ]
  ! IGUALQUE        [ shift and go to state 57 ]
  ! NIGUALQUE       [ shift and go to state 58 ]


state 90

    (52) expresion -> expresion POR expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 52 (expresion -> expresion POR expresion .)
    MENOS           reduce using rule 52 (expresion -> expresion POR expresion .)
    POR             reduce using rule 52 (expresion -> expresion POR expresion .)
    DIVIDIDO        reduce using rule 52 (expresion -> expresion POR expresion .)
    MOD             reduce using rule 52 (expresion -> expresion POR expresion .)
    AND             reduce using rule 52 (expresion -> expresion POR expresion .)
    OR              reduce using rule 52 (expresion -> expresion POR expresion .)
    MAYQUE          reduce using rule 52 (expresion -> expresion POR expresion .)
    MENQUE          reduce using rule 52 (expresion -> expresion POR expresion .)
    MAYIGUALQUE     reduce using rule 52 (expresion -> expresion POR expresion .)
    MENIGUALQUE     reduce using rule 52 (expresion -> expresion POR expresion .)
    IGUALQUE        reduce using rule 52 (expresion -> expresion POR expresion .)
    NIGUALQUE       reduce using rule 52 (expresion -> expresion POR expresion .)
    MAIN            reduce using rule 52 (expresion -> expresion POR expresion .)
    FUNC            reduce using rule 52 (expresion -> expresion POR expresion .)
    ID              reduce using rule 52 (expresion -> expresion POR expresion .)
    RETURN          reduce using rule 52 (expresion -> expresion POR expresion .)
    PRINT           reduce using rule 52 (expresion -> expresion POR expresion .)
    VAR             reduce using rule 52 (expresion -> expresion POR expresion .)
    WHILE           reduce using rule 52 (expresion -> expresion POR expresion .)
    IF              reduce using rule 52 (expresion -> expresion POR expresion .)
    SWITCH          reduce using rule 52 (expresion -> expresion POR expresion .)
    FOR             reduce using rule 52 (expresion -> expresion POR expresion .)
    NULL            reduce using rule 52 (expresion -> expresion POR expresion .)
    NOT             reduce using rule 52 (expresion -> expresion POR expresion .)
    PARIZQ          reduce using rule 52 (expresion -> expresion POR expresion .)
    ENTERO          reduce using rule 52 (expresion -> expresion POR expresion .)
    DECIMAL         reduce using rule 52 (expresion -> expresion POR expresion .)
    CADENA          reduce using rule 52 (expresion -> expresion POR expresion .)
    CHARACTER       reduce using rule 52 (expresion -> expresion POR expresion .)
    TRUE            reduce using rule 52 (expresion -> expresion POR expresion .)
    FALSE           reduce using rule 52 (expresion -> expresion POR expresion .)
    BREAK           reduce using rule 52 (expresion -> expresion POR expresion .)
    CONTINUE        reduce using rule 52 (expresion -> expresion POR expresion .)
    $end            reduce using rule 52 (expresion -> expresion POR expresion .)
    PARDER          reduce using rule 52 (expresion -> expresion POR expresion .)
    PTCOMA          reduce using rule 52 (expresion -> expresion POR expresion .)
    LLAVDER         reduce using rule 52 (expresion -> expresion POR expresion .)
    DEFAULT         reduce using rule 52 (expresion -> expresion POR expresion .)
    CASE            reduce using rule 52 (expresion -> expresion POR expresion .)
    COMA            reduce using rule 52 (expresion -> expresion POR expresion .)
    DOSPUNTOS       reduce using rule 52 (expresion -> expresion POR expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    ELEVADO         shift and go to state 49

  ! INCREMENT       [ reduce using rule 52 (expresion -> expresion POR expresion .) ]
  ! DECREMENT       [ reduce using rule 52 (expresion -> expresion POR expresion .) ]
  ! ELEVADO         [ reduce using rule 52 (expresion -> expresion POR expresion .) ]
  ! MAS             [ shift and go to state 45 ]
  ! MENOS           [ shift and go to state 46 ]
  ! POR             [ shift and go to state 47 ]
  ! DIVIDIDO        [ shift and go to state 48 ]
  ! MOD             [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! MAYQUE          [ shift and go to state 53 ]
  ! MENQUE          [ shift and go to state 54 ]
  ! MAYIGUALQUE     [ shift and go to state 55 ]
  ! MENIGUALQUE     [ shift and go to state 56 ]
  ! IGUALQUE        [ shift and go to state 57 ]
  ! NIGUALQUE       [ shift and go to state 58 ]


state 91

    (53) expresion -> expresion DIVIDIDO expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    MENOS           reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    POR             reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    DIVIDIDO        reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    MOD             reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    AND             reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    OR              reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    MAYQUE          reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    MENQUE          reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    MAYIGUALQUE     reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    MENIGUALQUE     reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    IGUALQUE        reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    NIGUALQUE       reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    MAIN            reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    FUNC            reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    ID              reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    RETURN          reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    PRINT           reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    VAR             reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    WHILE           reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    IF              reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    SWITCH          reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    FOR             reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    NULL            reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    NOT             reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    PARIZQ          reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    ENTERO          reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    DECIMAL         reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    CADENA          reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    CHARACTER       reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    TRUE            reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    FALSE           reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    BREAK           reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    CONTINUE        reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    $end            reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    PARDER          reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    PTCOMA          reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    LLAVDER         reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    DEFAULT         reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    CASE            reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    COMA            reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    DOSPUNTOS       reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    ELEVADO         shift and go to state 49

  ! INCREMENT       [ reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .) ]
  ! DECREMENT       [ reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .) ]
  ! ELEVADO         [ reduce using rule 53 (expresion -> expresion DIVIDIDO expresion .) ]
  ! MAS             [ shift and go to state 45 ]
  ! MENOS           [ shift and go to state 46 ]
  ! POR             [ shift and go to state 47 ]
  ! DIVIDIDO        [ shift and go to state 48 ]
  ! MOD             [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! MAYQUE          [ shift and go to state 53 ]
  ! MENQUE          [ shift and go to state 54 ]
  ! MAYIGUALQUE     [ shift and go to state 55 ]
  ! MENIGUALQUE     [ shift and go to state 56 ]
  ! IGUALQUE        [ shift and go to state 57 ]
  ! NIGUALQUE       [ shift and go to state 58 ]


state 92

    (54) expresion -> expresion ELEVADO expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    MENOS           reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    POR             reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    DIVIDIDO        reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    ELEVADO         reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    MOD             reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    AND             reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    OR              reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    MAYQUE          reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    MENQUE          reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    MAYIGUALQUE     reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    MENIGUALQUE     reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    IGUALQUE        reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    NIGUALQUE       reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    MAIN            reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    FUNC            reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    ID              reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    RETURN          reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    PRINT           reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    VAR             reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    WHILE           reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    IF              reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    SWITCH          reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    FOR             reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    NULL            reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    NOT             reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    PARIZQ          reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    ENTERO          reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    DECIMAL         reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    CADENA          reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    CHARACTER       reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    TRUE            reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    FALSE           reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    BREAK           reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    CONTINUE        reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    $end            reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    PARDER          reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    PTCOMA          reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    LLAVDER         reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    DEFAULT         reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    CASE            reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    COMA            reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    DOSPUNTOS       reduce using rule 54 (expresion -> expresion ELEVADO expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44

  ! INCREMENT       [ reduce using rule 54 (expresion -> expresion ELEVADO expresion .) ]
  ! DECREMENT       [ reduce using rule 54 (expresion -> expresion ELEVADO expresion .) ]
  ! MAS             [ shift and go to state 45 ]
  ! MENOS           [ shift and go to state 46 ]
  ! POR             [ shift and go to state 47 ]
  ! DIVIDIDO        [ shift and go to state 48 ]
  ! ELEVADO         [ shift and go to state 49 ]
  ! MOD             [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! MAYQUE          [ shift and go to state 53 ]
  ! MENQUE          [ shift and go to state 54 ]
  ! MAYIGUALQUE     [ shift and go to state 55 ]
  ! MENIGUALQUE     [ shift and go to state 56 ]
  ! IGUALQUE        [ shift and go to state 57 ]
  ! NIGUALQUE       [ shift and go to state 58 ]


state 93

    (55) expresion -> expresion MOD expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    MAS             reduce using rule 55 (expresion -> expresion MOD expresion .)
    MENOS           reduce using rule 55 (expresion -> expresion MOD expresion .)
    POR             reduce using rule 55 (expresion -> expresion MOD expresion .)
    DIVIDIDO        reduce using rule 55 (expresion -> expresion MOD expresion .)
    MOD             reduce using rule 55 (expresion -> expresion MOD expresion .)
    AND             reduce using rule 55 (expresion -> expresion MOD expresion .)
    OR              reduce using rule 55 (expresion -> expresion MOD expresion .)
    MAYQUE          reduce using rule 55 (expresion -> expresion MOD expresion .)
    MENQUE          reduce using rule 55 (expresion -> expresion MOD expresion .)
    MAYIGUALQUE     reduce using rule 55 (expresion -> expresion MOD expresion .)
    MENIGUALQUE     reduce using rule 55 (expresion -> expresion MOD expresion .)
    IGUALQUE        reduce using rule 55 (expresion -> expresion MOD expresion .)
    NIGUALQUE       reduce using rule 55 (expresion -> expresion MOD expresion .)
    MAIN            reduce using rule 55 (expresion -> expresion MOD expresion .)
    FUNC            reduce using rule 55 (expresion -> expresion MOD expresion .)
    ID              reduce using rule 55 (expresion -> expresion MOD expresion .)
    RETURN          reduce using rule 55 (expresion -> expresion MOD expresion .)
    PRINT           reduce using rule 55 (expresion -> expresion MOD expresion .)
    VAR             reduce using rule 55 (expresion -> expresion MOD expresion .)
    WHILE           reduce using rule 55 (expresion -> expresion MOD expresion .)
    IF              reduce using rule 55 (expresion -> expresion MOD expresion .)
    SWITCH          reduce using rule 55 (expresion -> expresion MOD expresion .)
    FOR             reduce using rule 55 (expresion -> expresion MOD expresion .)
    NULL            reduce using rule 55 (expresion -> expresion MOD expresion .)
    NOT             reduce using rule 55 (expresion -> expresion MOD expresion .)
    PARIZQ          reduce using rule 55 (expresion -> expresion MOD expresion .)
    ENTERO          reduce using rule 55 (expresion -> expresion MOD expresion .)
    DECIMAL         reduce using rule 55 (expresion -> expresion MOD expresion .)
    CADENA          reduce using rule 55 (expresion -> expresion MOD expresion .)
    CHARACTER       reduce using rule 55 (expresion -> expresion MOD expresion .)
    TRUE            reduce using rule 55 (expresion -> expresion MOD expresion .)
    FALSE           reduce using rule 55 (expresion -> expresion MOD expresion .)
    BREAK           reduce using rule 55 (expresion -> expresion MOD expresion .)
    CONTINUE        reduce using rule 55 (expresion -> expresion MOD expresion .)
    $end            reduce using rule 55 (expresion -> expresion MOD expresion .)
    PARDER          reduce using rule 55 (expresion -> expresion MOD expresion .)
    PTCOMA          reduce using rule 55 (expresion -> expresion MOD expresion .)
    LLAVDER         reduce using rule 55 (expresion -> expresion MOD expresion .)
    DEFAULT         reduce using rule 55 (expresion -> expresion MOD expresion .)
    CASE            reduce using rule 55 (expresion -> expresion MOD expresion .)
    COMA            reduce using rule 55 (expresion -> expresion MOD expresion .)
    DOSPUNTOS       reduce using rule 55 (expresion -> expresion MOD expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    ELEVADO         shift and go to state 49

  ! INCREMENT       [ reduce using rule 55 (expresion -> expresion MOD expresion .) ]
  ! DECREMENT       [ reduce using rule 55 (expresion -> expresion MOD expresion .) ]
  ! ELEVADO         [ reduce using rule 55 (expresion -> expresion MOD expresion .) ]
  ! MAS             [ shift and go to state 45 ]
  ! MENOS           [ shift and go to state 46 ]
  ! POR             [ shift and go to state 47 ]
  ! DIVIDIDO        [ shift and go to state 48 ]
  ! MOD             [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! MAYQUE          [ shift and go to state 53 ]
  ! MENQUE          [ shift and go to state 54 ]
  ! MAYIGUALQUE     [ shift and go to state 55 ]
  ! MENIGUALQUE     [ shift and go to state 56 ]
  ! IGUALQUE        [ shift and go to state 57 ]
  ! NIGUALQUE       [ shift and go to state 58 ]


state 94

    (56) expresion -> expresion AND expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 56 (expresion -> expresion AND expresion .)
    OR              reduce using rule 56 (expresion -> expresion AND expresion .)
    MAIN            reduce using rule 56 (expresion -> expresion AND expresion .)
    FUNC            reduce using rule 56 (expresion -> expresion AND expresion .)
    ID              reduce using rule 56 (expresion -> expresion AND expresion .)
    RETURN          reduce using rule 56 (expresion -> expresion AND expresion .)
    PRINT           reduce using rule 56 (expresion -> expresion AND expresion .)
    VAR             reduce using rule 56 (expresion -> expresion AND expresion .)
    WHILE           reduce using rule 56 (expresion -> expresion AND expresion .)
    IF              reduce using rule 56 (expresion -> expresion AND expresion .)
    SWITCH          reduce using rule 56 (expresion -> expresion AND expresion .)
    FOR             reduce using rule 56 (expresion -> expresion AND expresion .)
    NULL            reduce using rule 56 (expresion -> expresion AND expresion .)
    NOT             reduce using rule 56 (expresion -> expresion AND expresion .)
    PARIZQ          reduce using rule 56 (expresion -> expresion AND expresion .)
    ENTERO          reduce using rule 56 (expresion -> expresion AND expresion .)
    DECIMAL         reduce using rule 56 (expresion -> expresion AND expresion .)
    CADENA          reduce using rule 56 (expresion -> expresion AND expresion .)
    CHARACTER       reduce using rule 56 (expresion -> expresion AND expresion .)
    TRUE            reduce using rule 56 (expresion -> expresion AND expresion .)
    FALSE           reduce using rule 56 (expresion -> expresion AND expresion .)
    BREAK           reduce using rule 56 (expresion -> expresion AND expresion .)
    CONTINUE        reduce using rule 56 (expresion -> expresion AND expresion .)
    $end            reduce using rule 56 (expresion -> expresion AND expresion .)
    PARDER          reduce using rule 56 (expresion -> expresion AND expresion .)
    PTCOMA          reduce using rule 56 (expresion -> expresion AND expresion .)
    LLAVDER         reduce using rule 56 (expresion -> expresion AND expresion .)
    DEFAULT         reduce using rule 56 (expresion -> expresion AND expresion .)
    CASE            reduce using rule 56 (expresion -> expresion AND expresion .)
    COMA            reduce using rule 56 (expresion -> expresion AND expresion .)
    DOSPUNTOS       reduce using rule 56 (expresion -> expresion AND expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58

  ! INCREMENT       [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! DECREMENT       [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! MAS             [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! MENOS           [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! POR             [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! DIVIDIDO        [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! ELEVADO         [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! MOD             [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! MAYQUE          [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! MENQUE          [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! MAYIGUALQUE     [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! MENIGUALQUE     [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! IGUALQUE        [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! NIGUALQUE       [ reduce using rule 56 (expresion -> expresion AND expresion .) ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 95

    (57) expresion -> expresion OR expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 57 (expresion -> expresion OR expresion .)
    OR              reduce using rule 57 (expresion -> expresion OR expresion .)
    MAIN            reduce using rule 57 (expresion -> expresion OR expresion .)
    FUNC            reduce using rule 57 (expresion -> expresion OR expresion .)
    ID              reduce using rule 57 (expresion -> expresion OR expresion .)
    RETURN          reduce using rule 57 (expresion -> expresion OR expresion .)
    PRINT           reduce using rule 57 (expresion -> expresion OR expresion .)
    VAR             reduce using rule 57 (expresion -> expresion OR expresion .)
    WHILE           reduce using rule 57 (expresion -> expresion OR expresion .)
    IF              reduce using rule 57 (expresion -> expresion OR expresion .)
    SWITCH          reduce using rule 57 (expresion -> expresion OR expresion .)
    FOR             reduce using rule 57 (expresion -> expresion OR expresion .)
    NULL            reduce using rule 57 (expresion -> expresion OR expresion .)
    NOT             reduce using rule 57 (expresion -> expresion OR expresion .)
    PARIZQ          reduce using rule 57 (expresion -> expresion OR expresion .)
    ENTERO          reduce using rule 57 (expresion -> expresion OR expresion .)
    DECIMAL         reduce using rule 57 (expresion -> expresion OR expresion .)
    CADENA          reduce using rule 57 (expresion -> expresion OR expresion .)
    CHARACTER       reduce using rule 57 (expresion -> expresion OR expresion .)
    TRUE            reduce using rule 57 (expresion -> expresion OR expresion .)
    FALSE           reduce using rule 57 (expresion -> expresion OR expresion .)
    BREAK           reduce using rule 57 (expresion -> expresion OR expresion .)
    CONTINUE        reduce using rule 57 (expresion -> expresion OR expresion .)
    $end            reduce using rule 57 (expresion -> expresion OR expresion .)
    PARDER          reduce using rule 57 (expresion -> expresion OR expresion .)
    PTCOMA          reduce using rule 57 (expresion -> expresion OR expresion .)
    LLAVDER         reduce using rule 57 (expresion -> expresion OR expresion .)
    DEFAULT         reduce using rule 57 (expresion -> expresion OR expresion .)
    CASE            reduce using rule 57 (expresion -> expresion OR expresion .)
    COMA            reduce using rule 57 (expresion -> expresion OR expresion .)
    DOSPUNTOS       reduce using rule 57 (expresion -> expresion OR expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58

  ! INCREMENT       [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! DECREMENT       [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! MAS             [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! MENOS           [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! POR             [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! DIVIDIDO        [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! ELEVADO         [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! MOD             [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! MAYQUE          [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! MENQUE          [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! MAYIGUALQUE     [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! MENIGUALQUE     [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! IGUALQUE        [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! NIGUALQUE       [ reduce using rule 57 (expresion -> expresion OR expresion .) ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 96

    (58) expresion -> expresion MAYQUE expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    OR              reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    MAYQUE          reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    MENQUE          reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    MAYIGUALQUE     reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    MENIGUALQUE     reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    IGUALQUE        reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    NIGUALQUE       reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    MAIN            reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    FUNC            reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    ID              reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    RETURN          reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    PRINT           reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    VAR             reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    WHILE           reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    IF              reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    SWITCH          reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    FOR             reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    NULL            reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    NOT             reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    PARIZQ          reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    ENTERO          reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    DECIMAL         reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    CADENA          reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    CHARACTER       reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    TRUE            reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    FALSE           reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    BREAK           reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    CONTINUE        reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    $end            reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    PARDER          reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    PTCOMA          reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    LLAVDER         reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    DEFAULT         reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    CASE            reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    COMA            reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    DOSPUNTOS       reduce using rule 58 (expresion -> expresion MAYQUE expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50

  ! INCREMENT       [ reduce using rule 58 (expresion -> expresion MAYQUE expresion .) ]
  ! DECREMENT       [ reduce using rule 58 (expresion -> expresion MAYQUE expresion .) ]
  ! MAS             [ reduce using rule 58 (expresion -> expresion MAYQUE expresion .) ]
  ! MENOS           [ reduce using rule 58 (expresion -> expresion MAYQUE expresion .) ]
  ! POR             [ reduce using rule 58 (expresion -> expresion MAYQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 58 (expresion -> expresion MAYQUE expresion .) ]
  ! ELEVADO         [ reduce using rule 58 (expresion -> expresion MAYQUE expresion .) ]
  ! MOD             [ reduce using rule 58 (expresion -> expresion MAYQUE expresion .) ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! MAYQUE          [ shift and go to state 53 ]
  ! MENQUE          [ shift and go to state 54 ]
  ! MAYIGUALQUE     [ shift and go to state 55 ]
  ! MENIGUALQUE     [ shift and go to state 56 ]
  ! IGUALQUE        [ shift and go to state 57 ]
  ! NIGUALQUE       [ shift and go to state 58 ]


state 97

    (59) expresion -> expresion MENQUE expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    OR              reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    MAYQUE          reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    MENQUE          reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    MAYIGUALQUE     reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    MENIGUALQUE     reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    IGUALQUE        reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    NIGUALQUE       reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    MAIN            reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    FUNC            reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    ID              reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    RETURN          reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    PRINT           reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    VAR             reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    WHILE           reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    IF              reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    SWITCH          reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    FOR             reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    NULL            reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    NOT             reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    PARIZQ          reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    ENTERO          reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    DECIMAL         reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    CADENA          reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    CHARACTER       reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    TRUE            reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    FALSE           reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    BREAK           reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    CONTINUE        reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    $end            reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    PARDER          reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    PTCOMA          reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    LLAVDER         reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    DEFAULT         reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    CASE            reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    COMA            reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    DOSPUNTOS       reduce using rule 59 (expresion -> expresion MENQUE expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50

  ! INCREMENT       [ reduce using rule 59 (expresion -> expresion MENQUE expresion .) ]
  ! DECREMENT       [ reduce using rule 59 (expresion -> expresion MENQUE expresion .) ]
  ! MAS             [ reduce using rule 59 (expresion -> expresion MENQUE expresion .) ]
  ! MENOS           [ reduce using rule 59 (expresion -> expresion MENQUE expresion .) ]
  ! POR             [ reduce using rule 59 (expresion -> expresion MENQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 59 (expresion -> expresion MENQUE expresion .) ]
  ! ELEVADO         [ reduce using rule 59 (expresion -> expresion MENQUE expresion .) ]
  ! MOD             [ reduce using rule 59 (expresion -> expresion MENQUE expresion .) ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! MAYQUE          [ shift and go to state 53 ]
  ! MENQUE          [ shift and go to state 54 ]
  ! MAYIGUALQUE     [ shift and go to state 55 ]
  ! MENIGUALQUE     [ shift and go to state 56 ]
  ! IGUALQUE        [ shift and go to state 57 ]
  ! NIGUALQUE       [ shift and go to state 58 ]


state 98

    (60) expresion -> expresion MAYIGUALQUE expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    OR              reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    MAYQUE          reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    MENQUE          reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    MAYIGUALQUE     reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    MENIGUALQUE     reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    IGUALQUE        reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    NIGUALQUE       reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    MAIN            reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    FUNC            reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    ID              reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    RETURN          reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    PRINT           reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    VAR             reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    WHILE           reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    IF              reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    SWITCH          reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    FOR             reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    NULL            reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    NOT             reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    PARIZQ          reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    ENTERO          reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    DECIMAL         reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    CADENA          reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    CHARACTER       reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    TRUE            reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    FALSE           reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    BREAK           reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    CONTINUE        reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    $end            reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    PARDER          reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    PTCOMA          reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    LLAVDER         reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    DEFAULT         reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    CASE            reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    COMA            reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    DOSPUNTOS       reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50

  ! INCREMENT       [ reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! DECREMENT       [ reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! MAS             [ reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! MENOS           [ reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! POR             [ reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! ELEVADO         [ reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! MOD             [ reduce using rule 60 (expresion -> expresion MAYIGUALQUE expresion .) ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! MAYQUE          [ shift and go to state 53 ]
  ! MENQUE          [ shift and go to state 54 ]
  ! MAYIGUALQUE     [ shift and go to state 55 ]
  ! MENIGUALQUE     [ shift and go to state 56 ]
  ! IGUALQUE        [ shift and go to state 57 ]
  ! NIGUALQUE       [ shift and go to state 58 ]


state 99

    (61) expresion -> expresion MENIGUALQUE expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    OR              reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    MAYQUE          reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    MENQUE          reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    MAYIGUALQUE     reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    MENIGUALQUE     reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    IGUALQUE        reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    NIGUALQUE       reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    MAIN            reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    FUNC            reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    ID              reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    RETURN          reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    PRINT           reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    VAR             reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    WHILE           reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    IF              reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    SWITCH          reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    FOR             reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    NULL            reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    NOT             reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    PARIZQ          reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    ENTERO          reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    DECIMAL         reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    CADENA          reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    CHARACTER       reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    TRUE            reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    FALSE           reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    BREAK           reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    CONTINUE        reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    $end            reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    PARDER          reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    PTCOMA          reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    LLAVDER         reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    DEFAULT         reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    CASE            reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    COMA            reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    DOSPUNTOS       reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50

  ! INCREMENT       [ reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! DECREMENT       [ reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! MAS             [ reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! MENOS           [ reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! POR             [ reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! ELEVADO         [ reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! MOD             [ reduce using rule 61 (expresion -> expresion MENIGUALQUE expresion .) ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! MAYQUE          [ shift and go to state 53 ]
  ! MENQUE          [ shift and go to state 54 ]
  ! MAYIGUALQUE     [ shift and go to state 55 ]
  ! MENIGUALQUE     [ shift and go to state 56 ]
  ! IGUALQUE        [ shift and go to state 57 ]
  ! NIGUALQUE       [ shift and go to state 58 ]


state 100

    (62) expresion -> expresion IGUALQUE expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    OR              reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    MAYQUE          reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    MENQUE          reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    MAYIGUALQUE     reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    MENIGUALQUE     reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    IGUALQUE        reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    NIGUALQUE       reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    MAIN            reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    FUNC            reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    ID              reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    RETURN          reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    PRINT           reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    VAR             reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    WHILE           reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    IF              reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    SWITCH          reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    FOR             reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    NULL            reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    NOT             reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    PARIZQ          reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    ENTERO          reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    DECIMAL         reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    CADENA          reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    CHARACTER       reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    TRUE            reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    FALSE           reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    BREAK           reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    CONTINUE        reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    $end            reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    PARDER          reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    PTCOMA          reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    LLAVDER         reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    DEFAULT         reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    CASE            reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    COMA            reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    DOSPUNTOS       reduce using rule 62 (expresion -> expresion IGUALQUE expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50

  ! INCREMENT       [ reduce using rule 62 (expresion -> expresion IGUALQUE expresion .) ]
  ! DECREMENT       [ reduce using rule 62 (expresion -> expresion IGUALQUE expresion .) ]
  ! MAS             [ reduce using rule 62 (expresion -> expresion IGUALQUE expresion .) ]
  ! MENOS           [ reduce using rule 62 (expresion -> expresion IGUALQUE expresion .) ]
  ! POR             [ reduce using rule 62 (expresion -> expresion IGUALQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 62 (expresion -> expresion IGUALQUE expresion .) ]
  ! ELEVADO         [ reduce using rule 62 (expresion -> expresion IGUALQUE expresion .) ]
  ! MOD             [ reduce using rule 62 (expresion -> expresion IGUALQUE expresion .) ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! MAYQUE          [ shift and go to state 53 ]
  ! MENQUE          [ shift and go to state 54 ]
  ! MAYIGUALQUE     [ shift and go to state 55 ]
  ! MENIGUALQUE     [ shift and go to state 56 ]
  ! IGUALQUE        [ shift and go to state 57 ]
  ! NIGUALQUE       [ shift and go to state 58 ]


state 101

    (63) expresion -> expresion NIGUALQUE expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    AND             reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    OR              reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    MAYQUE          reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    MENQUE          reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    MAYIGUALQUE     reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    MENIGUALQUE     reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    IGUALQUE        reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    NIGUALQUE       reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    MAIN            reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    FUNC            reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    ID              reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    RETURN          reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    PRINT           reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    VAR             reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    WHILE           reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    IF              reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    SWITCH          reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    FOR             reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    NULL            reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    NOT             reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    PARIZQ          reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    ENTERO          reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    DECIMAL         reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    CADENA          reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    CHARACTER       reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    TRUE            reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    FALSE           reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    BREAK           reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    CONTINUE        reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    $end            reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    PARDER          reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    PTCOMA          reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    LLAVDER         reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    DEFAULT         reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    CASE            reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    COMA            reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    DOSPUNTOS       reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50

  ! INCREMENT       [ reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .) ]
  ! DECREMENT       [ reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .) ]
  ! MAS             [ reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .) ]
  ! MENOS           [ reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .) ]
  ! POR             [ reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .) ]
  ! ELEVADO         [ reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .) ]
  ! MOD             [ reduce using rule 63 (expresion -> expresion NIGUALQUE expresion .) ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! MAYQUE          [ shift and go to state 53 ]
  ! MENQUE          [ shift and go to state 54 ]
  ! MAYIGUALQUE     [ shift and go to state 55 ]
  ! MENIGUALQUE     [ shift and go to state 56 ]
  ! IGUALQUE        [ shift and go to state 57 ]
  ! NIGUALQUE       [ shift and go to state 58 ]


state 102

    (23) func_main -> MAIN PARIZQ PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 125


state 103

    (66) expresion -> PARIZQ expresion PARDER .

    INCREMENT       reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    DECREMENT       reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    POR             reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    ELEVADO         reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    MOD             reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    AND             reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    OR              reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    MAYQUE          reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    MAYIGUALQUE     reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    MENIGUALQUE     reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    MAIN            reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    FUNC            reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    ID              reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    RETURN          reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    PRINT           reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    VAR             reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    WHILE           reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    IF              reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    SWITCH          reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    FOR             reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    NULL            reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    NOT             reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    PARIZQ          reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    ENTERO          reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    DECIMAL         reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    CADENA          reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    CHARACTER       reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    TRUE            reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    FALSE           reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    BREAK           reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    $end            reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    LLAVDER         reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    DEFAULT         reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    CASE            reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)
    DOSPUNTOS       reduce using rule 66 (expresion -> PARIZQ expresion PARDER .)


state 104

    (79) expresion -> PARIZQ expresion_data_type PARDER . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 126
    call_instr                     shift and go to state 63

state 105

    (81) funct_instr -> FUNC ID PARIZQ . params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> FUNC ID PARIZQ . PARDER LLAVIZQ instrucciones LLAVDER
    (85) params -> . params COMA param
    (86) params -> . param
    (87) param -> . expresion_data_type ID
    (74) expresion_data_type -> . INT
    (75) expresion_data_type -> . DOUBLE
    (76) expresion_data_type -> . STRING
    (77) expresion_data_type -> . CHAR
    (78) expresion_data_type -> . BOOLEAN

    PARDER          shift and go to state 128
    INT             shift and go to state 64
    DOUBLE          shift and go to state 65
    STRING          shift and go to state 66
    CHAR            shift and go to state 67
    BOOLEAN         shift and go to state 68

    params                         shift and go to state 127
    param                          shift and go to state 129
    expresion_data_type            shift and go to state 130

state 106

    (83) call_instr -> ID PARIZQ PARDER . def_instr_prima
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
    PTCOMA          shift and go to state 83
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    MENOS           reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    INCREMENT       reduce using rule 22 (empty -> .)
    DECREMENT       reduce using rule 22 (empty -> .)
    MAS             reduce using rule 22 (empty -> .)
    POR             reduce using rule 22 (empty -> .)
    DIVIDIDO        reduce using rule 22 (empty -> .)
    ELEVADO         reduce using rule 22 (empty -> .)
    MOD             reduce using rule 22 (empty -> .)
    AND             reduce using rule 22 (empty -> .)
    OR              reduce using rule 22 (empty -> .)
    MAYQUE          reduce using rule 22 (empty -> .)
    MENQUE          reduce using rule 22 (empty -> .)
    MAYIGUALQUE     reduce using rule 22 (empty -> .)
    MENIGUALQUE     reduce using rule 22 (empty -> .)
    IGUALQUE        reduce using rule 22 (empty -> .)
    NIGUALQUE       reduce using rule 22 (empty -> .)
    PARDER          reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)
    COMA            reduce using rule 22 (empty -> .)
    DOSPUNTOS       reduce using rule 22 (empty -> .)

  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 131
    empty                          shift and go to state 84

state 107

    (84) call_instr -> ID PARIZQ params_call . PARDER def_instr_prima
    (88) params_call -> params_call . COMA param_call

    PARDER          shift and go to state 132
    COMA            shift and go to state 133


state 108

    (89) params_call -> param_call .

    PARDER          reduce using rule 89 (params_call -> param_call .)
    COMA            reduce using rule 89 (params_call -> param_call .)


state 109

    (90) param_call -> expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    PARDER          reduce using rule 90 (param_call -> expresion .)
    COMA            reduce using rule 90 (param_call -> expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58


state 110

    (27) asignacion_instr -> ID IGUAL expresion . def_instr_prima
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for PTCOMA resolved as shift
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58
    PTCOMA          shift and go to state 83
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)

  ! MENOS           [ reduce using rule 22 (empty -> .) ]
  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 134
    empty                          shift and go to state 84

state 111

    (91) return_instr -> RETURN expresion def_instr_prima .

    MAIN            reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    FUNC            reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    ID              reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    RETURN          reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    PRINT           reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    VAR             reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    WHILE           reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    IF              reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    SWITCH          reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    FOR             reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    NULL            reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    MENOS           reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    NOT             reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    PARIZQ          reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    ENTERO          reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    DECIMAL         reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    CADENA          reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    CHARACTER       reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    TRUE            reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    FALSE           reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    BREAK           reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    CONTINUE        reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    $end            reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    LLAVDER         reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    PTCOMA          reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    DEFAULT         reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)
    CASE            reduce using rule 91 (return_instr -> RETURN expresion def_instr_prima .)


state 112

    (92) return_instr -> RETURN call_instr def_instr_prima .

    MAIN            reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    FUNC            reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    ID              reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    RETURN          reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    PRINT           reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    VAR             reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    WHILE           reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    IF              reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    SWITCH          reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    FOR             reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    NULL            reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    MENOS           reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    NOT             reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    PARIZQ          reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    ENTERO          reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    DECIMAL         reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    CADENA          reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    CHARACTER       reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    TRUE            reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    FALSE           reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    BREAK           reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    CONTINUE        reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    $end            reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    LLAVDER         reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    PTCOMA          reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    DEFAULT         reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)
    CASE            reduce using rule 92 (return_instr -> RETURN call_instr def_instr_prima .)


state 113

    (24) imprimir_instr -> PRINT PARIZQ expresion . PARDER def_instr_prima
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    PARDER          shift and go to state 135
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58


state 114

    (25) imprimir_instr -> PRINT PARIZQ call_instr . PARDER def_instr_prima
    (80) expresion -> call_instr .

  ! shift/reduce conflict for PARDER resolved as shift
    PARDER          shift and go to state 136
    INCREMENT       reduce using rule 80 (expresion -> call_instr .)
    DECREMENT       reduce using rule 80 (expresion -> call_instr .)
    MAS             reduce using rule 80 (expresion -> call_instr .)
    MENOS           reduce using rule 80 (expresion -> call_instr .)
    POR             reduce using rule 80 (expresion -> call_instr .)
    DIVIDIDO        reduce using rule 80 (expresion -> call_instr .)
    ELEVADO         reduce using rule 80 (expresion -> call_instr .)
    MOD             reduce using rule 80 (expresion -> call_instr .)
    AND             reduce using rule 80 (expresion -> call_instr .)
    OR              reduce using rule 80 (expresion -> call_instr .)
    MAYQUE          reduce using rule 80 (expresion -> call_instr .)
    MENQUE          reduce using rule 80 (expresion -> call_instr .)
    MAYIGUALQUE     reduce using rule 80 (expresion -> call_instr .)
    MENIGUALQUE     reduce using rule 80 (expresion -> call_instr .)
    IGUALQUE        reduce using rule 80 (expresion -> call_instr .)
    NIGUALQUE       reduce using rule 80 (expresion -> call_instr .)

  ! PARDER          [ reduce using rule 80 (expresion -> call_instr .) ]


state 115

    (26) definicion_instr -> VAR ID def_instr_prima .

    MAIN            reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    FUNC            reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    ID              reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    RETURN          reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    PRINT           reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    VAR             reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    WHILE           reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    IF              reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    SWITCH          reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    FOR             reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    NULL            reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    MENOS           reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    NOT             reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    PARIZQ          reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    ENTERO          reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    DECIMAL         reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    CADENA          reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    CHARACTER       reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    TRUE            reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    FALSE           reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    BREAK           reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    CONTINUE        reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    $end            reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    LLAVDER         reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    PTCOMA          reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    DEFAULT         reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)
    CASE            reduce using rule 26 (definicion_instr -> VAR ID def_instr_prima .)


state 116

    (28) def_asig_instr -> VAR ID IGUAL . expresion def_instr_prima
    (29) def_asig_instr -> VAR ID IGUAL . call_instr def_instr_prima
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 137
    call_instr                     shift and go to state 138

state 117

    (33) while_instr -> WHILE PARIZQ expresion . PARDER LLAVIZQ instrucciones LLAVDER
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    PARDER          shift and go to state 139
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58


state 118

    (30) if_instr -> IF PARIZQ expresion . PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> IF PARIZQ expresion . PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> IF PARIZQ expresion . PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    PARDER          shift and go to state 140
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58


state 119

    (36) switch_instr -> SWITCH PARIZQ expresion . PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> SWITCH PARIZQ expresion . PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> SWITCH PARIZQ expresion . PARDER LLAVIZQ cases default_instr LLAVDER
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    PARDER          shift and go to state 141
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58


state 120

    (43) for_instr -> FOR PARIZQ def_asign_for . def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

    PTCOMA          shift and go to state 83
    NULL            reduce using rule 22 (empty -> .)
    MENOS           reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)

    def_instr_prima                shift and go to state 142
    empty                          shift and go to state 84

state 121

    (44) def_asign_for -> ID .
    (27) asignacion_instr -> ID . IGUAL expresion def_instr_prima

    PTCOMA          reduce using rule 44 (def_asign_for -> ID .)
    NULL            reduce using rule 44 (def_asign_for -> ID .)
    MENOS           reduce using rule 44 (def_asign_for -> ID .)
    NOT             reduce using rule 44 (def_asign_for -> ID .)
    PARIZQ          reduce using rule 44 (def_asign_for -> ID .)
    ID              reduce using rule 44 (def_asign_for -> ID .)
    ENTERO          reduce using rule 44 (def_asign_for -> ID .)
    DECIMAL         reduce using rule 44 (def_asign_for -> ID .)
    CADENA          reduce using rule 44 (def_asign_for -> ID .)
    CHARACTER       reduce using rule 44 (def_asign_for -> ID .)
    TRUE            reduce using rule 44 (def_asign_for -> ID .)
    FALSE           reduce using rule 44 (def_asign_for -> ID .)
    IGUAL           shift and go to state 71


state 122

    (45) def_asign_for -> asignacion_instr .

    PTCOMA          reduce using rule 45 (def_asign_for -> asignacion_instr .)
    NULL            reduce using rule 45 (def_asign_for -> asignacion_instr .)
    MENOS           reduce using rule 45 (def_asign_for -> asignacion_instr .)
    NOT             reduce using rule 45 (def_asign_for -> asignacion_instr .)
    PARIZQ          reduce using rule 45 (def_asign_for -> asignacion_instr .)
    ID              reduce using rule 45 (def_asign_for -> asignacion_instr .)
    ENTERO          reduce using rule 45 (def_asign_for -> asignacion_instr .)
    DECIMAL         reduce using rule 45 (def_asign_for -> asignacion_instr .)
    CADENA          reduce using rule 45 (def_asign_for -> asignacion_instr .)
    CHARACTER       reduce using rule 45 (def_asign_for -> asignacion_instr .)
    TRUE            reduce using rule 45 (def_asign_for -> asignacion_instr .)
    FALSE           reduce using rule 45 (def_asign_for -> asignacion_instr .)


state 123

    (46) def_asign_for -> def_asig_instr .

    PTCOMA          reduce using rule 46 (def_asign_for -> def_asig_instr .)
    NULL            reduce using rule 46 (def_asign_for -> def_asig_instr .)
    MENOS           reduce using rule 46 (def_asign_for -> def_asig_instr .)
    NOT             reduce using rule 46 (def_asign_for -> def_asig_instr .)
    PARIZQ          reduce using rule 46 (def_asign_for -> def_asig_instr .)
    ID              reduce using rule 46 (def_asign_for -> def_asig_instr .)
    ENTERO          reduce using rule 46 (def_asign_for -> def_asig_instr .)
    DECIMAL         reduce using rule 46 (def_asign_for -> def_asig_instr .)
    CADENA          reduce using rule 46 (def_asign_for -> def_asig_instr .)
    CHARACTER       reduce using rule 46 (def_asign_for -> def_asig_instr .)
    TRUE            reduce using rule 46 (def_asign_for -> def_asig_instr .)
    FALSE           reduce using rule 46 (def_asign_for -> def_asig_instr .)


state 124

    (28) def_asig_instr -> VAR . ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> VAR . ID IGUAL call_instr def_instr_prima

    ID              shift and go to state 143


state 125

    (23) func_main -> MAIN PARIZQ PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (22) empty -> .
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
    LLAVDER         reduce using rule 22 (empty -> .)
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

  ! MAIN            [ reduce using rule 22 (empty -> .) ]
  ! FUNC            [ reduce using rule 22 (empty -> .) ]
  ! ID              [ reduce using rule 22 (empty -> .) ]
  ! RETURN          [ reduce using rule 22 (empty -> .) ]
  ! PRINT           [ reduce using rule 22 (empty -> .) ]
  ! VAR             [ reduce using rule 22 (empty -> .) ]
  ! WHILE           [ reduce using rule 22 (empty -> .) ]
  ! IF              [ reduce using rule 22 (empty -> .) ]
  ! SWITCH          [ reduce using rule 22 (empty -> .) ]
  ! FOR             [ reduce using rule 22 (empty -> .) ]
  ! NULL            [ reduce using rule 22 (empty -> .) ]
  ! MENOS           [ reduce using rule 22 (empty -> .) ]
  ! NOT             [ reduce using rule 22 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 22 (empty -> .) ]
  ! ENTERO          [ reduce using rule 22 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 22 (empty -> .) ]
  ! CADENA          [ reduce using rule 22 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 22 (empty -> .) ]
  ! TRUE            [ reduce using rule 22 (empty -> .) ]
  ! FALSE           [ reduce using rule 22 (empty -> .) ]
  ! BREAK           [ reduce using rule 22 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 22 (empty -> .) ]

    instrucciones                  shift and go to state 144
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    expresion                      shift and go to state 17
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 126

    (79) expresion -> PARIZQ expresion_data_type PARDER expresion .
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for ELEVADO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for MAYQUE resolved as shift
  ! shift/reduce conflict for MENQUE resolved as shift
  ! shift/reduce conflict for MAYIGUALQUE resolved as shift
  ! shift/reduce conflict for MENIGUALQUE resolved as shift
  ! shift/reduce conflict for IGUALQUE resolved as shift
  ! shift/reduce conflict for NIGUALQUE resolved as shift
    MAIN            reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    FUNC            reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    ID              reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    RETURN          reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    PRINT           reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    VAR             reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    WHILE           reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    IF              reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    SWITCH          reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    FOR             reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    NULL            reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    NOT             reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    PARIZQ          reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    ENTERO          reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    DECIMAL         reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    CADENA          reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    CHARACTER       reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    TRUE            reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    FALSE           reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    BREAK           reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    CONTINUE        reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    $end            reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    PARDER          reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    PTCOMA          reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    LLAVDER         reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    DEFAULT         reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    CASE            reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    COMA            reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    DOSPUNTOS       reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .)
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58

  ! INCREMENT       [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! DECREMENT       [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MAS             [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MENOS           [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! POR             [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! DIVIDIDO        [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! ELEVADO         [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MOD             [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! AND             [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! OR              [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MAYQUE          [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MENQUE          [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MAYIGUALQUE     [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! MENIGUALQUE     [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! IGUALQUE        [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]
  ! NIGUALQUE       [ reduce using rule 79 (expresion -> PARIZQ expresion_data_type PARDER expresion .) ]


state 127

    (81) funct_instr -> FUNC ID PARIZQ params . PARDER LLAVIZQ instrucciones LLAVDER
    (85) params -> params . COMA param

    PARDER          shift and go to state 145
    COMA            shift and go to state 146


state 128

    (82) funct_instr -> FUNC ID PARIZQ PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 147


state 129

    (86) params -> param .

    PARDER          reduce using rule 86 (params -> param .)
    COMA            reduce using rule 86 (params -> param .)


state 130

    (87) param -> expresion_data_type . ID

    ID              shift and go to state 148


state 131

    (83) call_instr -> ID PARIZQ PARDER def_instr_prima .

    MAIN            reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    FUNC            reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    ID              reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    RETURN          reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    PRINT           reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    VAR             reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    WHILE           reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    IF              reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    SWITCH          reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    FOR             reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    NULL            reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    MENOS           reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    NOT             reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    PARIZQ          reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    ENTERO          reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    DECIMAL         reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    CADENA          reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    CHARACTER       reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    TRUE            reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    FALSE           reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    BREAK           reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    CONTINUE        reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    $end            reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    INCREMENT       reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    DECREMENT       reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    MAS             reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    POR             reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    DIVIDIDO        reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    ELEVADO         reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    MOD             reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    AND             reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    OR              reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    MAYQUE          reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    MENQUE          reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    MAYIGUALQUE     reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    MENIGUALQUE     reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    IGUALQUE        reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    NIGUALQUE       reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    PARDER          reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    PTCOMA          reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    LLAVDER         reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    DEFAULT         reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    CASE            reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    COMA            reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)
    DOSPUNTOS       reduce using rule 83 (call_instr -> ID PARIZQ PARDER def_instr_prima .)


state 132

    (84) call_instr -> ID PARIZQ params_call PARDER . def_instr_prima
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
    PTCOMA          shift and go to state 83
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    MENOS           reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    INCREMENT       reduce using rule 22 (empty -> .)
    DECREMENT       reduce using rule 22 (empty -> .)
    MAS             reduce using rule 22 (empty -> .)
    POR             reduce using rule 22 (empty -> .)
    DIVIDIDO        reduce using rule 22 (empty -> .)
    ELEVADO         reduce using rule 22 (empty -> .)
    MOD             reduce using rule 22 (empty -> .)
    AND             reduce using rule 22 (empty -> .)
    OR              reduce using rule 22 (empty -> .)
    MAYQUE          reduce using rule 22 (empty -> .)
    MENQUE          reduce using rule 22 (empty -> .)
    MAYIGUALQUE     reduce using rule 22 (empty -> .)
    MENIGUALQUE     reduce using rule 22 (empty -> .)
    IGUALQUE        reduce using rule 22 (empty -> .)
    NIGUALQUE       reduce using rule 22 (empty -> .)
    PARDER          reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)
    COMA            reduce using rule 22 (empty -> .)
    DOSPUNTOS       reduce using rule 22 (empty -> .)

  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 149
    empty                          shift and go to state 84

state 133

    (88) params_call -> params_call COMA . param_call
    (90) param_call -> . expresion
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    param_call                     shift and go to state 150
    expresion                      shift and go to state 109
    call_instr                     shift and go to state 63

state 134

    (27) asignacion_instr -> ID IGUAL expresion def_instr_prima .

    MAIN            reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    FUNC            reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    ID              reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    RETURN          reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    PRINT           reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    VAR             reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    WHILE           reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    IF              reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    SWITCH          reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    FOR             reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    NULL            reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    MENOS           reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    NOT             reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    PARIZQ          reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    ENTERO          reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    DECIMAL         reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    CADENA          reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    CHARACTER       reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    TRUE            reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    FALSE           reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    BREAK           reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    CONTINUE        reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    $end            reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    PTCOMA          reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    LLAVDER         reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    DEFAULT         reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)
    CASE            reduce using rule 27 (asignacion_instr -> ID IGUAL expresion def_instr_prima .)


state 135

    (24) imprimir_instr -> PRINT PARIZQ expresion PARDER . def_instr_prima
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
    PTCOMA          shift and go to state 83
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    MENOS           reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)

  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 151
    empty                          shift and go to state 84

state 136

    (25) imprimir_instr -> PRINT PARIZQ call_instr PARDER . def_instr_prima
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
    PTCOMA          shift and go to state 83
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    MENOS           reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)

  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 152
    empty                          shift and go to state 84

state 137

    (28) def_asig_instr -> VAR ID IGUAL expresion . def_instr_prima
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for PTCOMA resolved as shift
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58
    PTCOMA          shift and go to state 83
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)

  ! MENOS           [ reduce using rule 22 (empty -> .) ]
  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 153
    empty                          shift and go to state 84

state 138

    (29) def_asig_instr -> VAR ID IGUAL call_instr . def_instr_prima
    (80) expresion -> call_instr .
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for PTCOMA resolved as shift
  ! reduce/reduce conflict for MAIN resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for FUNC resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for ID resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for VAR resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for IF resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for SWITCH resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for FOR resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for NULL resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for MENOS resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for NOT resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for PARIZQ resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for ENTERO resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for DECIMAL resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for CADENA resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for CHARACTER resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for TRUE resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for FALSE resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for $end resolved using rule 22 (empty -> .)
  ! shift/reduce conflict for PTCOMA resolved as shift
  ! reduce/reduce conflict for LLAVDER resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for CASE resolved using rule 22 (empty -> .)
    INCREMENT       reduce using rule 80 (expresion -> call_instr .)
    DECREMENT       reduce using rule 80 (expresion -> call_instr .)
    MAS             reduce using rule 80 (expresion -> call_instr .)
    POR             reduce using rule 80 (expresion -> call_instr .)
    DIVIDIDO        reduce using rule 80 (expresion -> call_instr .)
    ELEVADO         reduce using rule 80 (expresion -> call_instr .)
    MOD             reduce using rule 80 (expresion -> call_instr .)
    AND             reduce using rule 80 (expresion -> call_instr .)
    OR              reduce using rule 80 (expresion -> call_instr .)
    MAYQUE          reduce using rule 80 (expresion -> call_instr .)
    MENQUE          reduce using rule 80 (expresion -> call_instr .)
    MAYIGUALQUE     reduce using rule 80 (expresion -> call_instr .)
    MENIGUALQUE     reduce using rule 80 (expresion -> call_instr .)
    IGUALQUE        reduce using rule 80 (expresion -> call_instr .)
    NIGUALQUE       reduce using rule 80 (expresion -> call_instr .)
    PTCOMA          shift and go to state 83
    MAIN            reduce using rule 22 (empty -> .)
    FUNC            reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    RETURN          reduce using rule 22 (empty -> .)
    PRINT           reduce using rule 22 (empty -> .)
    VAR             reduce using rule 22 (empty -> .)
    WHILE           reduce using rule 22 (empty -> .)
    IF              reduce using rule 22 (empty -> .)
    SWITCH          reduce using rule 22 (empty -> .)
    FOR             reduce using rule 22 (empty -> .)
    NULL            reduce using rule 22 (empty -> .)
    MENOS           reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)
    BREAK           reduce using rule 22 (empty -> .)
    CONTINUE        reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)

  ! MENOS           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! PTCOMA          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! MAIN            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! FUNC            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! ID              [ reduce using rule 80 (expresion -> call_instr .) ]
  ! RETURN          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! PRINT           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! VAR             [ reduce using rule 80 (expresion -> call_instr .) ]
  ! WHILE           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! IF              [ reduce using rule 80 (expresion -> call_instr .) ]
  ! SWITCH          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! FOR             [ reduce using rule 80 (expresion -> call_instr .) ]
  ! NULL            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! NOT             [ reduce using rule 80 (expresion -> call_instr .) ]
  ! PARIZQ          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! ENTERO          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! DECIMAL         [ reduce using rule 80 (expresion -> call_instr .) ]
  ! CADENA          [ reduce using rule 80 (expresion -> call_instr .) ]
  ! CHARACTER       [ reduce using rule 80 (expresion -> call_instr .) ]
  ! TRUE            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! FALSE           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! BREAK           [ reduce using rule 80 (expresion -> call_instr .) ]
  ! CONTINUE        [ reduce using rule 80 (expresion -> call_instr .) ]
  ! $end            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! LLAVDER         [ reduce using rule 80 (expresion -> call_instr .) ]
  ! DEFAULT         [ reduce using rule 80 (expresion -> call_instr .) ]
  ! CASE            [ reduce using rule 80 (expresion -> call_instr .) ]
  ! PTCOMA          [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 154
    empty                          shift and go to state 84

state 139

    (33) while_instr -> WHILE PARIZQ expresion PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 155


state 140

    (30) if_instr -> IF PARIZQ expresion PARDER . LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> IF PARIZQ expresion PARDER . LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> IF PARIZQ expresion PARDER . LLAVIZQ instrucciones LLAVDER ELSE if_instr

    LLAVIZQ         shift and go to state 156


state 141

    (36) switch_instr -> SWITCH PARIZQ expresion PARDER . LLAVIZQ cases LLAVDER
    (37) switch_instr -> SWITCH PARIZQ expresion PARDER . LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> SWITCH PARIZQ expresion PARDER . LLAVIZQ cases default_instr LLAVDER

    LLAVIZQ         shift and go to state 157


state 142

    (43) for_instr -> FOR PARIZQ def_asign_for def_instr_prima . expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 158
    call_instr                     shift and go to state 63

state 143

    (28) def_asig_instr -> VAR ID . IGUAL expresion def_instr_prima
    (29) def_asig_instr -> VAR ID . IGUAL call_instr def_instr_prima

    IGUAL           shift and go to state 116


state 144

    (23) func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

    LLAVDER         shift and go to state 159
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

    instruccion                    shift and go to state 42
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    expresion                      shift and go to state 17
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 145

    (81) funct_instr -> FUNC ID PARIZQ params PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 160


state 146

    (85) params -> params COMA . param
    (87) param -> . expresion_data_type ID
    (74) expresion_data_type -> . INT
    (75) expresion_data_type -> . DOUBLE
    (76) expresion_data_type -> . STRING
    (77) expresion_data_type -> . CHAR
    (78) expresion_data_type -> . BOOLEAN

    INT             shift and go to state 64
    DOUBLE          shift and go to state 65
    STRING          shift and go to state 66
    CHAR            shift and go to state 67
    BOOLEAN         shift and go to state 68

    param                          shift and go to state 161
    expresion_data_type            shift and go to state 130

state 147

    (82) funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (22) empty -> .
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
    LLAVDER         reduce using rule 22 (empty -> .)
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

  ! MAIN            [ reduce using rule 22 (empty -> .) ]
  ! FUNC            [ reduce using rule 22 (empty -> .) ]
  ! ID              [ reduce using rule 22 (empty -> .) ]
  ! RETURN          [ reduce using rule 22 (empty -> .) ]
  ! PRINT           [ reduce using rule 22 (empty -> .) ]
  ! VAR             [ reduce using rule 22 (empty -> .) ]
  ! WHILE           [ reduce using rule 22 (empty -> .) ]
  ! IF              [ reduce using rule 22 (empty -> .) ]
  ! SWITCH          [ reduce using rule 22 (empty -> .) ]
  ! FOR             [ reduce using rule 22 (empty -> .) ]
  ! NULL            [ reduce using rule 22 (empty -> .) ]
  ! MENOS           [ reduce using rule 22 (empty -> .) ]
  ! NOT             [ reduce using rule 22 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 22 (empty -> .) ]
  ! ENTERO          [ reduce using rule 22 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 22 (empty -> .) ]
  ! CADENA          [ reduce using rule 22 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 22 (empty -> .) ]
  ! TRUE            [ reduce using rule 22 (empty -> .) ]
  ! FALSE           [ reduce using rule 22 (empty -> .) ]
  ! BREAK           [ reduce using rule 22 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 22 (empty -> .) ]

    instrucciones                  shift and go to state 162
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    expresion                      shift and go to state 17
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 148

    (87) param -> expresion_data_type ID .

    PARDER          reduce using rule 87 (param -> expresion_data_type ID .)
    COMA            reduce using rule 87 (param -> expresion_data_type ID .)


state 149

    (84) call_instr -> ID PARIZQ params_call PARDER def_instr_prima .

    MAIN            reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    FUNC            reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    ID              reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    RETURN          reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    PRINT           reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    VAR             reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    WHILE           reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    IF              reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    SWITCH          reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    FOR             reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    NULL            reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    MENOS           reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    NOT             reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    PARIZQ          reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    ENTERO          reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    DECIMAL         reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    CADENA          reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    CHARACTER       reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    TRUE            reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    FALSE           reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    BREAK           reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    CONTINUE        reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    $end            reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    INCREMENT       reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    DECREMENT       reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    MAS             reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    POR             reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    DIVIDIDO        reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    ELEVADO         reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    MOD             reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    AND             reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    OR              reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    MAYQUE          reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    MENQUE          reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    MAYIGUALQUE     reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    MENIGUALQUE     reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    IGUALQUE        reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    NIGUALQUE       reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    PARDER          reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    PTCOMA          reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    LLAVDER         reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    DEFAULT         reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    CASE            reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    COMA            reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)
    DOSPUNTOS       reduce using rule 84 (call_instr -> ID PARIZQ params_call PARDER def_instr_prima .)


state 150

    (88) params_call -> params_call COMA param_call .

    PARDER          reduce using rule 88 (params_call -> params_call COMA param_call .)
    COMA            reduce using rule 88 (params_call -> params_call COMA param_call .)


state 151

    (24) imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .

    MAIN            reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    FUNC            reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    ID              reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    RETURN          reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    PRINT           reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    VAR             reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    WHILE           reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    IF              reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    SWITCH          reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    FOR             reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    NULL            reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    MENOS           reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    NOT             reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    PARIZQ          reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    ENTERO          reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    DECIMAL         reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    CADENA          reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    CHARACTER       reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    TRUE            reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    FALSE           reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    BREAK           reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    CONTINUE        reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    $end            reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    LLAVDER         reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    PTCOMA          reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    DEFAULT         reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)
    CASE            reduce using rule 24 (imprimir_instr -> PRINT PARIZQ expresion PARDER def_instr_prima .)


state 152

    (25) imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .

    MAIN            reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    FUNC            reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    ID              reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    RETURN          reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    PRINT           reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    VAR             reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    WHILE           reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    IF              reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    SWITCH          reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    FOR             reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    NULL            reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    MENOS           reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    NOT             reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    PARIZQ          reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    ENTERO          reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    DECIMAL         reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    CADENA          reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    CHARACTER       reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    TRUE            reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    FALSE           reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    BREAK           reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    CONTINUE        reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    $end            reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    LLAVDER         reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    PTCOMA          reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    DEFAULT         reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)
    CASE            reduce using rule 25 (imprimir_instr -> PRINT PARIZQ call_instr PARDER def_instr_prima .)


state 153

    (28) def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .

    MAIN            reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    FUNC            reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    ID              reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    RETURN          reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    PRINT           reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    VAR             reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    WHILE           reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    IF              reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    SWITCH          reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    FOR             reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    NULL            reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    MENOS           reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    NOT             reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    PARIZQ          reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    ENTERO          reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    DECIMAL         reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    CADENA          reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    CHARACTER       reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    TRUE            reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    FALSE           reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    BREAK           reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    CONTINUE        reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    $end            reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    PTCOMA          reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    LLAVDER         reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    DEFAULT         reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)
    CASE            reduce using rule 28 (def_asig_instr -> VAR ID IGUAL expresion def_instr_prima .)


state 154

    (29) def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .

    MAIN            reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    FUNC            reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    ID              reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    RETURN          reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    PRINT           reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    VAR             reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    WHILE           reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    IF              reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    SWITCH          reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    FOR             reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    NULL            reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    MENOS           reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    NOT             reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    PARIZQ          reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    ENTERO          reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    DECIMAL         reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    CADENA          reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    CHARACTER       reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    TRUE            reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    FALSE           reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    BREAK           reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    CONTINUE        reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    $end            reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    PTCOMA          reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    LLAVDER         reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    DEFAULT         reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)
    CASE            reduce using rule 29 (def_asig_instr -> VAR ID IGUAL call_instr def_instr_prima .)


state 155

    (33) while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (22) empty -> .
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
    LLAVDER         reduce using rule 22 (empty -> .)
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

  ! MAIN            [ reduce using rule 22 (empty -> .) ]
  ! FUNC            [ reduce using rule 22 (empty -> .) ]
  ! ID              [ reduce using rule 22 (empty -> .) ]
  ! RETURN          [ reduce using rule 22 (empty -> .) ]
  ! PRINT           [ reduce using rule 22 (empty -> .) ]
  ! VAR             [ reduce using rule 22 (empty -> .) ]
  ! WHILE           [ reduce using rule 22 (empty -> .) ]
  ! IF              [ reduce using rule 22 (empty -> .) ]
  ! SWITCH          [ reduce using rule 22 (empty -> .) ]
  ! FOR             [ reduce using rule 22 (empty -> .) ]
  ! NULL            [ reduce using rule 22 (empty -> .) ]
  ! MENOS           [ reduce using rule 22 (empty -> .) ]
  ! NOT             [ reduce using rule 22 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 22 (empty -> .) ]
  ! ENTERO          [ reduce using rule 22 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 22 (empty -> .) ]
  ! CADENA          [ reduce using rule 22 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 22 (empty -> .) ]
  ! TRUE            [ reduce using rule 22 (empty -> .) ]
  ! FALSE           [ reduce using rule 22 (empty -> .) ]
  ! BREAK           [ reduce using rule 22 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 22 (empty -> .) ]

    expresion                      shift and go to state 17
    instrucciones                  shift and go to state 163
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 156

    (30) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ . instrucciones LLAVDER
    (31) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ . instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ . instrucciones LLAVDER ELSE if_instr
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (22) empty -> .
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
    LLAVDER         reduce using rule 22 (empty -> .)
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

  ! MAIN            [ reduce using rule 22 (empty -> .) ]
  ! FUNC            [ reduce using rule 22 (empty -> .) ]
  ! ID              [ reduce using rule 22 (empty -> .) ]
  ! RETURN          [ reduce using rule 22 (empty -> .) ]
  ! PRINT           [ reduce using rule 22 (empty -> .) ]
  ! VAR             [ reduce using rule 22 (empty -> .) ]
  ! WHILE           [ reduce using rule 22 (empty -> .) ]
  ! IF              [ reduce using rule 22 (empty -> .) ]
  ! SWITCH          [ reduce using rule 22 (empty -> .) ]
  ! FOR             [ reduce using rule 22 (empty -> .) ]
  ! NULL            [ reduce using rule 22 (empty -> .) ]
  ! MENOS           [ reduce using rule 22 (empty -> .) ]
  ! NOT             [ reduce using rule 22 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 22 (empty -> .) ]
  ! ENTERO          [ reduce using rule 22 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 22 (empty -> .) ]
  ! CADENA          [ reduce using rule 22 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 22 (empty -> .) ]
  ! TRUE            [ reduce using rule 22 (empty -> .) ]
  ! FALSE           [ reduce using rule 22 (empty -> .) ]
  ! BREAK           [ reduce using rule 22 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 22 (empty -> .) ]

    expresion                      shift and go to state 17
    instrucciones                  shift and go to state 164
    if_instr                       shift and go to state 14
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 157

    (36) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ . cases LLAVDER
    (37) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ . default_instr LLAVDER
    (38) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ . cases default_instr LLAVDER
    (39) cases -> . cases case_instr
    (40) cases -> . case_instr
    (42) default_instr -> . DEFAULT DOSPUNTOS instrucciones def_instr_prima
    (41) case_instr -> . CASE expresion DOSPUNTOS instrucciones def_instr_prima

    DEFAULT         shift and go to state 168
    CASE            shift and go to state 169

    cases                          shift and go to state 165
    default_instr                  shift and go to state 166
    case_instr                     shift and go to state 167

state 158

    (43) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion . def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (22) empty -> .

  ! shift/reduce conflict for MENOS resolved as shift
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58
    PTCOMA          shift and go to state 83
    NULL            reduce using rule 22 (empty -> .)
    NOT             reduce using rule 22 (empty -> .)
    PARIZQ          reduce using rule 22 (empty -> .)
    ID              reduce using rule 22 (empty -> .)
    ENTERO          reduce using rule 22 (empty -> .)
    DECIMAL         reduce using rule 22 (empty -> .)
    CADENA          reduce using rule 22 (empty -> .)
    CHARACTER       reduce using rule 22 (empty -> .)
    TRUE            reduce using rule 22 (empty -> .)
    FALSE           reduce using rule 22 (empty -> .)

  ! MENOS           [ reduce using rule 22 (empty -> .) ]

    def_instr_prima                shift and go to state 170
    empty                          shift and go to state 84

state 159

    (23) func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    FUNC            reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    NULL            reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    MENOS           reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    NOT             reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    PARIZQ          reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    ENTERO          reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    DECIMAL         reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    CADENA          reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    CHARACTER       reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    TRUE            reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    FALSE           reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    PTCOMA          reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 23 (func_main -> MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)


state 160

    (81) funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (22) empty -> .
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
    LLAVDER         reduce using rule 22 (empty -> .)
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

  ! MAIN            [ reduce using rule 22 (empty -> .) ]
  ! FUNC            [ reduce using rule 22 (empty -> .) ]
  ! ID              [ reduce using rule 22 (empty -> .) ]
  ! RETURN          [ reduce using rule 22 (empty -> .) ]
  ! PRINT           [ reduce using rule 22 (empty -> .) ]
  ! VAR             [ reduce using rule 22 (empty -> .) ]
  ! WHILE           [ reduce using rule 22 (empty -> .) ]
  ! IF              [ reduce using rule 22 (empty -> .) ]
  ! SWITCH          [ reduce using rule 22 (empty -> .) ]
  ! FOR             [ reduce using rule 22 (empty -> .) ]
  ! NULL            [ reduce using rule 22 (empty -> .) ]
  ! MENOS           [ reduce using rule 22 (empty -> .) ]
  ! NOT             [ reduce using rule 22 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 22 (empty -> .) ]
  ! ENTERO          [ reduce using rule 22 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 22 (empty -> .) ]
  ! CADENA          [ reduce using rule 22 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 22 (empty -> .) ]
  ! TRUE            [ reduce using rule 22 (empty -> .) ]
  ! FALSE           [ reduce using rule 22 (empty -> .) ]
  ! BREAK           [ reduce using rule 22 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 22 (empty -> .) ]

    instrucciones                  shift and go to state 171
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    expresion                      shift and go to state 17
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 161

    (85) params -> params COMA param .

    PARDER          reduce using rule 85 (params -> params COMA param .)
    COMA            reduce using rule 85 (params -> params COMA param .)


state 162

    (82) funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

    LLAVDER         shift and go to state 172
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

    instruccion                    shift and go to state 42
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    expresion                      shift and go to state 17
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 163

    (33) while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

    LLAVDER         shift and go to state 173
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

    expresion                      shift and go to state 17
    instruccion                    shift and go to state 42
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 164

    (30) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones . LLAVDER
    (31) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones . LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones . LLAVDER ELSE if_instr
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

    LLAVDER         shift and go to state 174
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

    expresion                      shift and go to state 17
    if_instr                       shift and go to state 14
    instruccion                    shift and go to state 42
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 165

    (36) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases . LLAVDER
    (38) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases . default_instr LLAVDER
    (39) cases -> cases . case_instr
    (42) default_instr -> . DEFAULT DOSPUNTOS instrucciones def_instr_prima
    (41) case_instr -> . CASE expresion DOSPUNTOS instrucciones def_instr_prima

    LLAVDER         shift and go to state 175
    DEFAULT         shift and go to state 168
    CASE            shift and go to state 169

    default_instr                  shift and go to state 176
    case_instr                     shift and go to state 177

state 166

    (37) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr . LLAVDER

    LLAVDER         shift and go to state 178


state 167

    (40) cases -> case_instr .

    LLAVDER         reduce using rule 40 (cases -> case_instr .)
    DEFAULT         reduce using rule 40 (cases -> case_instr .)
    CASE            reduce using rule 40 (cases -> case_instr .)


state 168

    (42) default_instr -> DEFAULT . DOSPUNTOS instrucciones def_instr_prima

    DOSPUNTOS       shift and go to state 179


state 169

    (41) case_instr -> CASE . expresion DOSPUNTOS instrucciones def_instr_prima
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 180
    call_instr                     shift and go to state 63

state 170

    (43) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima . expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima

    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ID              shift and go to state 62
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 181
    call_instr                     shift and go to state 63

state 171

    (81) funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

    LLAVDER         shift and go to state 182
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

    instruccion                    shift and go to state 42
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    expresion                      shift and go to state 17
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 172

    (82) funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    FUNC            reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    NULL            reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    MENOS           reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    NOT             reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    PARIZQ          reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    ENTERO          reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    DECIMAL         reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    CADENA          reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    CHARACTER       reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    TRUE            reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    FALSE           reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    PTCOMA          reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 82 (funct_instr -> FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER .)


state 173

    (33) while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FUNC            reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    NULL            reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    MENOS           reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    NOT             reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PARIZQ          reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ENTERO          reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    DECIMAL         reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CADENA          reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CHARACTER       reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    TRUE            reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FALSE           reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PTCOMA          reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 33 (while_instr -> WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)


state 174

    (30) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .
    (31) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER . ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER . ELSE if_instr

    MAIN            reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FUNC            reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    NULL            reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    MENOS           reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    NOT             reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PARIZQ          reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ENTERO          reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    DECIMAL         reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CADENA          reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CHARACTER       reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    TRUE            reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FALSE           reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PTCOMA          reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 30 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ELSE            shift and go to state 183


state 175

    (36) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .

    MAIN            reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    FUNC            reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    ID              reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    RETURN          reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    PRINT           reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    VAR             reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    WHILE           reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    IF              reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    SWITCH          reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    FOR             reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    NULL            reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    MENOS           reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    NOT             reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    PARIZQ          reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    ENTERO          reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    DECIMAL         reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    CADENA          reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    CHARACTER       reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    TRUE            reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    FALSE           reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    BREAK           reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    CONTINUE        reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    $end            reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    LLAVDER         reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    PTCOMA          reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    DEFAULT         reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)
    CASE            reduce using rule 36 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER .)


state 176

    (38) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr . LLAVDER

    LLAVDER         shift and go to state 184


state 177

    (39) cases -> cases case_instr .

    LLAVDER         reduce using rule 39 (cases -> cases case_instr .)
    DEFAULT         reduce using rule 39 (cases -> cases case_instr .)
    CASE            reduce using rule 39 (cases -> cases case_instr .)


state 178

    (37) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .

    MAIN            reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    FUNC            reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    ID              reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    RETURN          reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    PRINT           reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    VAR             reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    WHILE           reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    IF              reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    SWITCH          reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    FOR             reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    NULL            reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    MENOS           reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    NOT             reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    PARIZQ          reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    ENTERO          reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    DECIMAL         reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    CADENA          reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    CHARACTER       reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    TRUE            reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    FALSE           reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    BREAK           reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    CONTINUE        reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    $end            reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    LLAVDER         reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    PTCOMA          reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    DEFAULT         reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)
    CASE            reduce using rule 37 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER .)


state 179

    (42) default_instr -> DEFAULT DOSPUNTOS . instrucciones def_instr_prima
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (22) empty -> .
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
    PTCOMA          reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

  ! MAIN            [ reduce using rule 22 (empty -> .) ]
  ! FUNC            [ reduce using rule 22 (empty -> .) ]
  ! ID              [ reduce using rule 22 (empty -> .) ]
  ! RETURN          [ reduce using rule 22 (empty -> .) ]
  ! PRINT           [ reduce using rule 22 (empty -> .) ]
  ! VAR             [ reduce using rule 22 (empty -> .) ]
  ! WHILE           [ reduce using rule 22 (empty -> .) ]
  ! IF              [ reduce using rule 22 (empty -> .) ]
  ! SWITCH          [ reduce using rule 22 (empty -> .) ]
  ! FOR             [ reduce using rule 22 (empty -> .) ]
  ! NULL            [ reduce using rule 22 (empty -> .) ]
  ! MENOS           [ reduce using rule 22 (empty -> .) ]
  ! NOT             [ reduce using rule 22 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 22 (empty -> .) ]
  ! ENTERO          [ reduce using rule 22 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 22 (empty -> .) ]
  ! CADENA          [ reduce using rule 22 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 22 (empty -> .) ]
  ! TRUE            [ reduce using rule 22 (empty -> .) ]
  ! FALSE           [ reduce using rule 22 (empty -> .) ]
  ! BREAK           [ reduce using rule 22 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 22 (empty -> .) ]

    instrucciones                  shift and go to state 185
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    expresion                      shift and go to state 17
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 180

    (41) case_instr -> CASE expresion . DOSPUNTOS instrucciones def_instr_prima
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    DOSPUNTOS       shift and go to state 186
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58


state 181

    (43) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion . PARDER LLAVIZQ instrucciones LLAVDER
    (48) expresion -> expresion . INCREMENT def_instr_prima
    (49) expresion -> expresion . DECREMENT def_instr_prima
    (50) expresion -> expresion . MAS expresion
    (51) expresion -> expresion . MENOS expresion
    (52) expresion -> expresion . POR expresion
    (53) expresion -> expresion . DIVIDIDO expresion
    (54) expresion -> expresion . ELEVADO expresion
    (55) expresion -> expresion . MOD expresion
    (56) expresion -> expresion . AND expresion
    (57) expresion -> expresion . OR expresion
    (58) expresion -> expresion . MAYQUE expresion
    (59) expresion -> expresion . MENQUE expresion
    (60) expresion -> expresion . MAYIGUALQUE expresion
    (61) expresion -> expresion . MENIGUALQUE expresion
    (62) expresion -> expresion . IGUALQUE expresion
    (63) expresion -> expresion . NIGUALQUE expresion

    PARDER          shift and go to state 187
    INCREMENT       shift and go to state 43
    DECREMENT       shift and go to state 44
    MAS             shift and go to state 45
    MENOS           shift and go to state 46
    POR             shift and go to state 47
    DIVIDIDO        shift and go to state 48
    ELEVADO         shift and go to state 49
    MOD             shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    MAYQUE          shift and go to state 53
    MENQUE          shift and go to state 54
    MAYIGUALQUE     shift and go to state 55
    MENIGUALQUE     shift and go to state 56
    IGUALQUE        shift and go to state 57
    NIGUALQUE       shift and go to state 58


state 182

    (81) funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    FUNC            reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    NULL            reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    MENOS           reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    NOT             reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    PARIZQ          reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    ENTERO          reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    DECIMAL         reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    CADENA          reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    CHARACTER       reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    TRUE            reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    FALSE           reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    PTCOMA          reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 81 (funct_instr -> FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER .)


state 183

    (31) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE . LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE . if_instr
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr

    LLAVIZQ         shift and go to state 188
    IF              shift and go to state 28

    if_instr                       shift and go to state 189

state 184

    (38) switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .

    MAIN            reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    FUNC            reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    ID              reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    RETURN          reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    PRINT           reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    VAR             reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    WHILE           reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    IF              reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    SWITCH          reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    FOR             reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    NULL            reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    MENOS           reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    NOT             reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    PARIZQ          reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    ENTERO          reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    DECIMAL         reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    CADENA          reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    CHARACTER       reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    TRUE            reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    FALSE           reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    BREAK           reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    CONTINUE        reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    $end            reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    LLAVDER         reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    PTCOMA          reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    DEFAULT         reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)
    CASE            reduce using rule 38 (switch_instr -> SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER .)


state 185

    (42) default_instr -> DEFAULT DOSPUNTOS instrucciones . def_instr_prima
    (2) instrucciones -> instrucciones . instruccion
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (22) empty -> .
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

    PTCOMA          shift and go to state 83
    LLAVDER         reduce using rule 22 (empty -> .)
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

    def_instr_prima                shift and go to state 190
    instruccion                    shift and go to state 42
    empty                          shift and go to state 84
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    expresion                      shift and go to state 17
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 186

    (41) case_instr -> CASE expresion DOSPUNTOS . instrucciones def_instr_prima
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (22) empty -> .
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
    PTCOMA          reduce using rule 22 (empty -> .)
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

  ! MAIN            [ reduce using rule 22 (empty -> .) ]
  ! FUNC            [ reduce using rule 22 (empty -> .) ]
  ! ID              [ reduce using rule 22 (empty -> .) ]
  ! RETURN          [ reduce using rule 22 (empty -> .) ]
  ! PRINT           [ reduce using rule 22 (empty -> .) ]
  ! VAR             [ reduce using rule 22 (empty -> .) ]
  ! WHILE           [ reduce using rule 22 (empty -> .) ]
  ! IF              [ reduce using rule 22 (empty -> .) ]
  ! SWITCH          [ reduce using rule 22 (empty -> .) ]
  ! FOR             [ reduce using rule 22 (empty -> .) ]
  ! NULL            [ reduce using rule 22 (empty -> .) ]
  ! MENOS           [ reduce using rule 22 (empty -> .) ]
  ! NOT             [ reduce using rule 22 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 22 (empty -> .) ]
  ! ENTERO          [ reduce using rule 22 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 22 (empty -> .) ]
  ! CADENA          [ reduce using rule 22 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 22 (empty -> .) ]
  ! TRUE            [ reduce using rule 22 (empty -> .) ]
  ! FALSE           [ reduce using rule 22 (empty -> .) ]
  ! BREAK           [ reduce using rule 22 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 22 (empty -> .) ]

    expresion                      shift and go to state 17
    instrucciones                  shift and go to state 191
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 187

    (43) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 192


state 188

    (31) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (22) empty -> .
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
    LLAVDER         reduce using rule 22 (empty -> .)
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

  ! MAIN            [ reduce using rule 22 (empty -> .) ]
  ! FUNC            [ reduce using rule 22 (empty -> .) ]
  ! ID              [ reduce using rule 22 (empty -> .) ]
  ! RETURN          [ reduce using rule 22 (empty -> .) ]
  ! PRINT           [ reduce using rule 22 (empty -> .) ]
  ! VAR             [ reduce using rule 22 (empty -> .) ]
  ! WHILE           [ reduce using rule 22 (empty -> .) ]
  ! IF              [ reduce using rule 22 (empty -> .) ]
  ! SWITCH          [ reduce using rule 22 (empty -> .) ]
  ! FOR             [ reduce using rule 22 (empty -> .) ]
  ! NULL            [ reduce using rule 22 (empty -> .) ]
  ! MENOS           [ reduce using rule 22 (empty -> .) ]
  ! NOT             [ reduce using rule 22 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 22 (empty -> .) ]
  ! ENTERO          [ reduce using rule 22 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 22 (empty -> .) ]
  ! CADENA          [ reduce using rule 22 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 22 (empty -> .) ]
  ! TRUE            [ reduce using rule 22 (empty -> .) ]
  ! FALSE           [ reduce using rule 22 (empty -> .) ]
  ! BREAK           [ reduce using rule 22 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 22 (empty -> .) ]

    expresion                      shift and go to state 17
    instrucciones                  shift and go to state 193
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 189

    (32) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .

    MAIN            reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    FUNC            reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    ID              reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    RETURN          reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    PRINT           reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    VAR             reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    WHILE           reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    IF              reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    SWITCH          reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    FOR             reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    NULL            reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    MENOS           reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    NOT             reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    PARIZQ          reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    ENTERO          reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    DECIMAL         reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    CADENA          reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    CHARACTER       reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    TRUE            reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    FALSE           reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    BREAK           reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    CONTINUE        reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    $end            reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    LLAVDER         reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    PTCOMA          reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    DEFAULT         reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)
    CASE            reduce using rule 32 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr .)


state 190

    (42) default_instr -> DEFAULT DOSPUNTOS instrucciones def_instr_prima .

    LLAVDER         reduce using rule 42 (default_instr -> DEFAULT DOSPUNTOS instrucciones def_instr_prima .)


state 191

    (41) case_instr -> CASE expresion DOSPUNTOS instrucciones . def_instr_prima
    (2) instrucciones -> instrucciones . instruccion
    (20) def_instr_prima -> . PTCOMA
    (21) def_instr_prima -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (22) empty -> .
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

    PTCOMA          shift and go to state 83
    LLAVDER         reduce using rule 22 (empty -> .)
    DEFAULT         reduce using rule 22 (empty -> .)
    CASE            reduce using rule 22 (empty -> .)
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

    expresion                      shift and go to state 17
    def_instr_prima                shift and go to state 194
    instruccion                    shift and go to state 42
    empty                          shift and go to state 84
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 192

    (43) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instrucciones -> . empty
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (22) empty -> .
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PARIZQ resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
    LLAVDER         reduce using rule 22 (empty -> .)
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

  ! MAIN            [ reduce using rule 22 (empty -> .) ]
  ! FUNC            [ reduce using rule 22 (empty -> .) ]
  ! ID              [ reduce using rule 22 (empty -> .) ]
  ! RETURN          [ reduce using rule 22 (empty -> .) ]
  ! PRINT           [ reduce using rule 22 (empty -> .) ]
  ! VAR             [ reduce using rule 22 (empty -> .) ]
  ! WHILE           [ reduce using rule 22 (empty -> .) ]
  ! IF              [ reduce using rule 22 (empty -> .) ]
  ! SWITCH          [ reduce using rule 22 (empty -> .) ]
  ! FOR             [ reduce using rule 22 (empty -> .) ]
  ! NULL            [ reduce using rule 22 (empty -> .) ]
  ! MENOS           [ reduce using rule 22 (empty -> .) ]
  ! NOT             [ reduce using rule 22 (empty -> .) ]
  ! PARIZQ          [ reduce using rule 22 (empty -> .) ]
  ! ENTERO          [ reduce using rule 22 (empty -> .) ]
  ! DECIMAL         [ reduce using rule 22 (empty -> .) ]
  ! CADENA          [ reduce using rule 22 (empty -> .) ]
  ! CHARACTER       [ reduce using rule 22 (empty -> .) ]
  ! TRUE            [ reduce using rule 22 (empty -> .) ]
  ! FALSE           [ reduce using rule 22 (empty -> .) ]
  ! BREAK           [ reduce using rule 22 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 22 (empty -> .) ]

    expresion                      shift and go to state 17
    instrucciones                  shift and go to state 195
    instruccion                    shift and go to state 3
    empty                          shift and go to state 4
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 193

    (31) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

    LLAVDER         shift and go to state 196
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

    expresion                      shift and go to state 17
    instruccion                    shift and go to state 42
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 194

    (41) case_instr -> CASE expresion DOSPUNTOS instrucciones def_instr_prima .

    LLAVDER         reduce using rule 41 (case_instr -> CASE expresion DOSPUNTOS instrucciones def_instr_prima .)
    DEFAULT         reduce using rule 41 (case_instr -> CASE expresion DOSPUNTOS instrucciones def_instr_prima .)
    CASE            reduce using rule 41 (case_instr -> CASE expresion DOSPUNTOS instrucciones def_instr_prima .)


state 195

    (43) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . func_main
    (6) instruccion -> . funct_instr
    (7) instruccion -> . call_instr
    (8) instruccion -> . return_instr
    (9) instruccion -> . imprimir_instr
    (10) instruccion -> . definicion_instr
    (11) instruccion -> . asignacion_instr
    (12) instruccion -> . def_asig_instr
    (13) instruccion -> . while_instr
    (14) instruccion -> . if_instr
    (15) instruccion -> . switch_instr
    (16) instruccion -> . for_instr
    (17) instruccion -> . expresion
    (18) instruccion -> . break_instr
    (19) instruccion -> . continue_instr
    (23) func_main -> . MAIN PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (81) funct_instr -> . FUNC ID PARIZQ params PARDER LLAVIZQ instrucciones LLAVDER
    (82) funct_instr -> . FUNC ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER
    (83) call_instr -> . ID PARIZQ PARDER def_instr_prima
    (84) call_instr -> . ID PARIZQ params_call PARDER def_instr_prima
    (91) return_instr -> . RETURN expresion def_instr_prima
    (92) return_instr -> . RETURN call_instr def_instr_prima
    (24) imprimir_instr -> . PRINT PARIZQ expresion PARDER def_instr_prima
    (25) imprimir_instr -> . PRINT PARIZQ call_instr PARDER def_instr_prima
    (26) definicion_instr -> . VAR ID def_instr_prima
    (27) asignacion_instr -> . ID IGUAL expresion def_instr_prima
    (28) def_asig_instr -> . VAR ID IGUAL expresion def_instr_prima
    (29) def_asig_instr -> . VAR ID IGUAL call_instr def_instr_prima
    (33) while_instr -> . WHILE PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (30) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER
    (31) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (32) if_instr -> . IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE if_instr
    (36) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases LLAVDER
    (37) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ default_instr LLAVDER
    (38) switch_instr -> . SWITCH PARIZQ expresion PARDER LLAVIZQ cases default_instr LLAVDER
    (43) for_instr -> . FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER
    (47) expresion -> . NULL
    (48) expresion -> . expresion INCREMENT def_instr_prima
    (49) expresion -> . expresion DECREMENT def_instr_prima
    (50) expresion -> . expresion MAS expresion
    (51) expresion -> . expresion MENOS expresion
    (52) expresion -> . expresion POR expresion
    (53) expresion -> . expresion DIVIDIDO expresion
    (54) expresion -> . expresion ELEVADO expresion
    (55) expresion -> . expresion MOD expresion
    (56) expresion -> . expresion AND expresion
    (57) expresion -> . expresion OR expresion
    (58) expresion -> . expresion MAYQUE expresion
    (59) expresion -> . expresion MENQUE expresion
    (60) expresion -> . expresion MAYIGUALQUE expresion
    (61) expresion -> . expresion MENIGUALQUE expresion
    (62) expresion -> . expresion IGUALQUE expresion
    (63) expresion -> . expresion NIGUALQUE expresion
    (64) expresion -> . MENOS expresion
    (65) expresion -> . NOT expresion
    (66) expresion -> . PARIZQ expresion PARDER
    (67) expresion -> . ID
    (68) expresion -> . ENTERO
    (69) expresion -> . DECIMAL
    (70) expresion -> . CADENA
    (71) expresion -> . CHARACTER
    (72) expresion -> . TRUE
    (73) expresion -> . FALSE
    (79) expresion -> . PARIZQ expresion_data_type PARDER expresion
    (80) expresion -> . call_instr
    (35) break_instr -> . BREAK def_instr_prima
    (34) continue_instr -> . CONTINUE def_instr_prima

    LLAVDER         shift and go to state 197
    MAIN            shift and go to state 20
    FUNC            shift and go to state 22
    ID              shift and go to state 23
    RETURN          shift and go to state 24
    PRINT           shift and go to state 25
    VAR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    SWITCH          shift and go to state 29
    FOR             shift and go to state 30
    NULL            shift and go to state 31
    MENOS           shift and go to state 32
    NOT             shift and go to state 33
    PARIZQ          shift and go to state 21
    ENTERO          shift and go to state 34
    DECIMAL         shift and go to state 35
    CADENA          shift and go to state 36
    CHARACTER       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41

    expresion                      shift and go to state 17
    instruccion                    shift and go to state 42
    func_main                      shift and go to state 5
    funct_instr                    shift and go to state 6
    call_instr                     shift and go to state 7
    return_instr                   shift and go to state 8
    imprimir_instr                 shift and go to state 9
    definicion_instr               shift and go to state 10
    asignacion_instr               shift and go to state 11
    def_asig_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    if_instr                       shift and go to state 14
    switch_instr                   shift and go to state 15
    for_instr                      shift and go to state 16
    break_instr                    shift and go to state 18
    continue_instr                 shift and go to state 19

state 196

    (31) if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    FUNC            reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    NULL            reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    MENOS           reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    NOT             reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    PARIZQ          reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    ENTERO          reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    DECIMAL         reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    CADENA          reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    CHARACTER       reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    TRUE            reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    FALSE           reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    PTCOMA          reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 31 (if_instr -> IF PARIZQ expresion PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)


state 197

    (43) for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .

    MAIN            reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FUNC            reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PRINT           reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    NULL            reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    MENOS           reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    NOT             reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PARIZQ          reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    ENTERO          reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    DECIMAL         reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CADENA          reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CHARACTER       reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    TRUE            reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    FALSE           reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    PTCOMA          reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 43 (for_instr -> FOR PARIZQ def_asign_for def_instr_prima expresion def_instr_prima expresion PARDER LLAVIZQ instrucciones LLAVDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for NULL in state 0 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 0 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 0 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 0 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 0 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 0 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 0 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 0 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 0 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 0 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 17 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 23 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 40 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 41 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 43 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 44 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 62 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 72 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 72 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 73 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 73 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 75 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 106 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 110 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 110 resolved as shift
WARNING: shift/reduce conflict for PARDER in state 114 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 125 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 125 resolved as shift
WARNING: shift/reduce conflict for ID in state 125 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 125 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 125 resolved as shift
WARNING: shift/reduce conflict for VAR in state 125 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 125 resolved as shift
WARNING: shift/reduce conflict for IF in state 125 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 125 resolved as shift
WARNING: shift/reduce conflict for FOR in state 125 resolved as shift
WARNING: shift/reduce conflict for NULL in state 125 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 125 resolved as shift
WARNING: shift/reduce conflict for NOT in state 125 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 125 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 125 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 125 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 125 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 125 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 125 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 125 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 125 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 125 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 126 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 126 resolved as shift
WARNING: shift/reduce conflict for MAS in state 126 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 126 resolved as shift
WARNING: shift/reduce conflict for POR in state 126 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 126 resolved as shift
WARNING: shift/reduce conflict for ELEVADO in state 126 resolved as shift
WARNING: shift/reduce conflict for MOD in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 126 resolved as shift
WARNING: shift/reduce conflict for MAYQUE in state 126 resolved as shift
WARNING: shift/reduce conflict for MENQUE in state 126 resolved as shift
WARNING: shift/reduce conflict for MAYIGUALQUE in state 126 resolved as shift
WARNING: shift/reduce conflict for MENIGUALQUE in state 126 resolved as shift
WARNING: shift/reduce conflict for IGUALQUE in state 126 resolved as shift
WARNING: shift/reduce conflict for NIGUALQUE in state 126 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 132 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 135 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 136 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 137 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 137 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 138 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 138 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 147 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 147 resolved as shift
WARNING: shift/reduce conflict for ID in state 147 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 147 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 147 resolved as shift
WARNING: shift/reduce conflict for VAR in state 147 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 147 resolved as shift
WARNING: shift/reduce conflict for IF in state 147 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 147 resolved as shift
WARNING: shift/reduce conflict for FOR in state 147 resolved as shift
WARNING: shift/reduce conflict for NULL in state 147 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 147 resolved as shift
WARNING: shift/reduce conflict for NOT in state 147 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 147 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 147 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 147 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 147 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 147 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 147 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 147 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 147 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 147 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 155 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 155 resolved as shift
WARNING: shift/reduce conflict for ID in state 155 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 155 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 155 resolved as shift
WARNING: shift/reduce conflict for VAR in state 155 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 155 resolved as shift
WARNING: shift/reduce conflict for IF in state 155 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 155 resolved as shift
WARNING: shift/reduce conflict for FOR in state 155 resolved as shift
WARNING: shift/reduce conflict for NULL in state 155 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 155 resolved as shift
WARNING: shift/reduce conflict for NOT in state 155 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 155 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 155 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 155 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 155 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 155 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 155 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 155 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 155 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 155 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 156 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 156 resolved as shift
WARNING: shift/reduce conflict for ID in state 156 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 156 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 156 resolved as shift
WARNING: shift/reduce conflict for VAR in state 156 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 156 resolved as shift
WARNING: shift/reduce conflict for IF in state 156 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 156 resolved as shift
WARNING: shift/reduce conflict for FOR in state 156 resolved as shift
WARNING: shift/reduce conflict for NULL in state 156 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 156 resolved as shift
WARNING: shift/reduce conflict for NOT in state 156 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 156 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 156 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 156 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 156 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 156 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 156 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 156 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 156 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 156 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 158 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 160 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 160 resolved as shift
WARNING: shift/reduce conflict for ID in state 160 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 160 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 160 resolved as shift
WARNING: shift/reduce conflict for VAR in state 160 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 160 resolved as shift
WARNING: shift/reduce conflict for IF in state 160 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 160 resolved as shift
WARNING: shift/reduce conflict for FOR in state 160 resolved as shift
WARNING: shift/reduce conflict for NULL in state 160 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 160 resolved as shift
WARNING: shift/reduce conflict for NOT in state 160 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 160 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 160 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 160 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 160 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 160 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 160 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 160 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 160 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 160 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 179 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 179 resolved as shift
WARNING: shift/reduce conflict for ID in state 179 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 179 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 179 resolved as shift
WARNING: shift/reduce conflict for VAR in state 179 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 179 resolved as shift
WARNING: shift/reduce conflict for IF in state 179 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 179 resolved as shift
WARNING: shift/reduce conflict for FOR in state 179 resolved as shift
WARNING: shift/reduce conflict for NULL in state 179 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 179 resolved as shift
WARNING: shift/reduce conflict for NOT in state 179 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 179 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 179 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 179 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 179 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 179 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 179 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 179 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 179 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 179 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 186 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 186 resolved as shift
WARNING: shift/reduce conflict for ID in state 186 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 186 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 186 resolved as shift
WARNING: shift/reduce conflict for VAR in state 186 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 186 resolved as shift
WARNING: shift/reduce conflict for IF in state 186 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 186 resolved as shift
WARNING: shift/reduce conflict for FOR in state 186 resolved as shift
WARNING: shift/reduce conflict for NULL in state 186 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 186 resolved as shift
WARNING: shift/reduce conflict for NOT in state 186 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 186 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 186 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 186 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 186 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 186 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 186 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 186 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 186 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 186 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 188 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 188 resolved as shift
WARNING: shift/reduce conflict for ID in state 188 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 188 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 188 resolved as shift
WARNING: shift/reduce conflict for VAR in state 188 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 188 resolved as shift
WARNING: shift/reduce conflict for IF in state 188 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 188 resolved as shift
WARNING: shift/reduce conflict for FOR in state 188 resolved as shift
WARNING: shift/reduce conflict for NULL in state 188 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 188 resolved as shift
WARNING: shift/reduce conflict for NOT in state 188 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 188 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 188 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 188 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 188 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 188 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 188 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 188 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 188 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 188 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 192 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 192 resolved as shift
WARNING: shift/reduce conflict for ID in state 192 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 192 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 192 resolved as shift
WARNING: shift/reduce conflict for VAR in state 192 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 192 resolved as shift
WARNING: shift/reduce conflict for IF in state 192 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 192 resolved as shift
WARNING: shift/reduce conflict for FOR in state 192 resolved as shift
WARNING: shift/reduce conflict for NULL in state 192 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 192 resolved as shift
WARNING: shift/reduce conflict for NOT in state 192 resolved as shift
WARNING: shift/reduce conflict for PARIZQ in state 192 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 192 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 192 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 192 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 192 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 192 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 192 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 192 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 192 resolved as shift
WARNING: reduce/reduce conflict in state 7 resolved using rule (instruccion -> call_instr)
WARNING: rejected rule (expresion -> call_instr) in state 7
WARNING: reduce/reduce conflict in state 73 resolved using rule (empty -> <empty>)
WARNING: rejected rule (expresion -> call_instr) in state 73
WARNING: reduce/reduce conflict in state 138 resolved using rule (empty -> <empty>)
WARNING: rejected rule (expresion -> call_instr) in state 138
